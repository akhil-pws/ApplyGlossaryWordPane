{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/index.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/data.ts","webpack://office-addin-taskpane/./src/taskpane/api.ts","webpack://office-addin-taskpane/./src/taskpane/components/tablestyles.ts","webpack://office-addin-taskpane/./src/taskpane/components/bodyelements.ts","webpack://office-addin-taskpane/./src/taskpane/functions.ts","webpack://office-addin-taskpane/./src/taskpane/components/home.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./css/bootstrap3.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Link addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> <\" + \"script src=\\\"https://kit.fontawesome.com/5aabee8816.js\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div id=\\\"header-nav\\\"> <div class=\\\"logo-header d-flex w-100 justify-content-between align-items-center bg-light\\\" id=\\\"logo-header\\\"> </div> </div> <main id=\\\"app-body\\\" class=\\\"d-block mh-34\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> <section id=\\\"confirmation-popup\\\"></section> <section id=\\\"toastr\\\"></section> <div id=\\\"footer\\\" class=\\\"py-2 text-center footer\\\"> </div> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const dataUrl='https://plsdevapp.azurewebsites.net'\r\nconst storeUrl='https://akhil-pws.github.io/ApplyGlossaryWordPane'\r\nconst versionLink='2.4.0'\r\nexport {dataUrl,storeUrl,versionLink};","import { dataUrl } from \"./data\";\r\n\r\n// api.ts\r\nconst baseUrl = dataUrl // Set your actual base URL\r\n\r\nexport async function loginUser(organization: string, username: string, password: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/user/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      ClientName: organization,\r\n      Username: username,\r\n      Password: password\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n// api.ts\r\n\r\nexport async function getReportById(documentID: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/id/${documentID}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAllClients(userId: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/client/all/${userId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAiHistory(tagId: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/${tagId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function updateGroupKey(tag: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/head/groupkey`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(tag)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function addAiHistory(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/add`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function updateAiHistory(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/update`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function fetchGlossaryTemplate(clientId: string, bodyText: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/glossary-template/client-id/${clientId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(bodyText)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function addGroupKey(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/group-key/add`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAllPromptTemplates(jwt): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/prompt-template/all`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getPromptTemplateById(id: string, jwt): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/prompt-template/${id}/data`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function updatePromptTemplate(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/groupkey/update-prompt`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n","export const wordTableStyles = [\r\n  { name: \"Table Grid\", style: \"Table Grid\", tableClass: \"background-color:#ffffff;border:1px solid #000;\", rowClass: \"background-color:#ffffff;color:#000000;\" },\r\n\r\n  { name: \"Grid Table 1 - Blue\",   style: \"Grid Table 2 - Accent 1\", tableClass: \"background-color:#ffffff;border:1px solid #95B3D7;\", rowClass: \"background-color:#dbe5f1;color:#000000;\" },\r\n  { name: \"Grid Table 1 - Red\",    style: \"Grid Table 2 - Accent 2\", tableClass: \"background-color:#ffffff;border:1px solid #c0504d;\", rowClass: \"background-color:#f2dbdb;color:#000000;\" },\r\n  { name: \"Grid Table 1 - Green\",  style: \"Grid Table 2 - Accent 3\", tableClass: \"background-color:#ffffff;border:1px solid #9bbb59;\", rowClass: \"background-color:#eaf1dd;color:#000000;\" },\r\n  { name: \"Grid Table 1 - Purple\", style: \"Grid Table 2 - Accent 4\", tableClass: \"background-color:#ffffff;border:1px solid #8064a2;\", rowClass: \"background-color:#e5dfec;color:#000000;\" },\r\n  { name: \"Grid Table 1 - Teal\",   style: \"Grid Table 2 - Accent 5\", tableClass: \"background-color:#ffffff;border:1px solid #4bacc6;\", rowClass: \"background-color:#daeef3;color:#000000;\" },\r\n  { name: \"Grid Table 1 - Orange\", style: \"Grid Table 2 - Accent 6\", tableClass: \"background-color:#ffffff;border:1px solid #f79646;\", rowClass: \"background-color:#fde9d9;color:#000000;\" },\r\n\r\n  { name: \"Grid Table 2 - Blue\",   style: \"Grid Table 4 - Accent 1\", tableClass: \"background-color:#4F81BD;border:1px solid #95B3D7;color:#ffffff;\", rowClass: \"background-color:#dbe5f1;color:#000000;\" },\r\n  { name: \"Grid Table 2 - Red\",    style: \"Grid Table 4 - Accent 2\", tableClass: \"background-color:#c0504d;border:1px solid #f2dbdb;color:#ffffff;\", rowClass: \"background-color:#f2dbdb;color:#000000;\" },\r\n  { name: \"Grid Table 2 - Green\",  style: \"Grid Table 4 - Accent 3\", tableClass: \"background-color:#9bbb59;border:1px solid #9bbb59;color:#ffffff;\", rowClass: \"background-color:#eaf1dd;color:#000000;\" },\r\n  { name: \"Grid Table 2 - Purple\", style: \"Grid Table 4 - Accent 4\", tableClass: \"background-color:#8064a2;border:1px solid #8064a2;color:#ffffff;\", rowClass: \"background-color:#e5dfec;color:#000000;\" },\r\n  { name: \"Grid Table 2 - Teal\",   style: \"Grid Table 4 - Accent 5\", tableClass: \"background-color:#4bacc6;border:1px solid #4bacc6;color:#ffffff;\", rowClass: \"background-color:#daeef3;color:#000000;\" },\r\n  { name: \"Grid Table 2 - Orange\", style: \"Grid Table 4 - Accent 6\", tableClass: \"background-color:#f79646;border:1px solid #f79646;color:#ffffff;\", rowClass: \"background-color:#fde9d9;color:#000000;\" },\r\n];\r\n","import { theme } from \"../taskpane\";\r\nimport { wordTableStyles } from \"./tablestyles\";\r\n\r\nfunction addtagbody(sponsorOptions) {\r\n  const body = `<div class=\"modal-dialog\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-body p-3 pt-0\">\r\n      <form id=\"genai-form\" autocomplete=\"off\" novalidate>\r\n        <!-- Name Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"name\" class=\"form-label\"><span class=\"text-danger\">*</span> Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" required>\r\n          <div class=\"invalid-feedback\">Name is required.</div>\r\n          <div id=\"submition-error\" class=\"invalid-feedback\" style=\"display: none;\"></div>\r\n\r\n        </div>\r\n\r\n        <!-- Description Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" rows=\"6\"></textarea>\r\n        </div>\r\n\r\n        <!-- Prompt Field -->\r\n        <div class=\"mb-3 prompt-box\">\r\n          <label for=\"prompt\" class=\"form-label\"><span class=\"text-danger\">*</span> Prompt \r\n            <small class=\"text-secondary\">(Note: Use # tag for content suggestions)</small>\r\n          </label>\r\n          <textarea class=\"form-control\" id=\"prompt\" rows=\"6\"  required></textarea>\r\n          <div class=\"invalid-feedback\">Prompt is required.</div>\r\n          <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n        </div>\r\n\r\n        <!-- Save Globally Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"saveGlobally\">\r\n          <label class=\"form-check-label\" for=\"saveGlobally\">Save Globally</label>\r\n        </div>\r\n\r\n        <!-- Available to All Sponsors Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"isAvailableForAll\" disabled>\r\n          <label class=\"form-check-label\" for=\"isAvailableForAll\">Available to All Sponsors</label>\r\n        </div>\r\n\r\n        <!-- Sponsor Dropdown -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"sponsor\" class=\"form-label\"><span class=\"text-danger\">*</span> Sponsor</label>\r\n          <div class=\"dropdown w-100\">\r\n            <button \r\n              class=\"btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle\" \r\n              type=\"button\" \r\n              id=\"sponsorDropdown\" \r\n              data-bs-toggle=\"dropdown\" \r\n              aria-expanded=\"false\" \r\n              disabled>\r\n              <span id=\"sponsorDropdownLabel\">Select Sponsors</span>\r\n              <span class=\"dropdown-toggle-icon\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu w-100 p-2\" aria-labelledby=\"sponsorDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\r\n              <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n                  <label class=\"form-check-label\" for=\"selectAll\">Select All</label>\r\n                </div>\r\n              </li>\r\n              ${sponsorOptions}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-btn-gen-ai\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"text-gen-save\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n  return body\r\n}\r\n\r\n\r\nfunction Confirmationpopup(content: string) {\r\n  const isDark = theme === 'Dark';\r\n  const popupClass = isDark ? 'bg-dark text-light' : 'bg-light text-dark';\r\n\r\n  const body = `\r\n<div class=\"modal show d-block\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content ${popupClass}\">\r\n      <div class=\"modal-header border-0\">\r\n        <h5 class=\"fw-bold\">Confirmation</h5>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <p>${content}</p>\r\n      </div>\r\n\r\n      <div class=\"modal-footer border-0\">\r\n        <button type=\"button\" class=\"btn btn-link ${isDark ? 'text-info' : 'text-primary'}\" id=\"confirmation-popup-cancel\">Cancel</button>\r\n        <button type=\"button\" class=\"btn btn-primary text-white\" id=\"confirmation-popup-confirm\">Ok</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n  return body;\r\n}\r\n\r\n\r\nfunction customizeTablePopup(selectedValue: string) {\r\n  const isDark = theme === 'Dark';\r\n  const popupClass = isDark ? 'bg-dark text-light' : 'bg-light text-dark';\r\n\r\n  const dropdown = `\r\n  \r\n    <select class=\"form-select mb-3 ${popupClass}\" id=\"confirmation-popup-dropdown\">\r\n      ${wordTableStyles\r\n      .map(\r\n        opt =>\r\n          `<option value=\"${opt.style}\" ${opt.style === selectedValue ? 'selected' : ''}>\r\n              ${opt.name}\r\n            </option>`\r\n      )\r\n      .join('')}\r\n    </select>\r\n  `;\r\n\r\n  const tablePreview = `\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-bordered table-sm\" id=\"confirmation-popup-table-preview\">\r\n        <thead>\r\n          <tr>\r\n            <th>Header 1</th>\r\n            <th>Header 2</th>\r\n            <th>Header 3</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr style=\"color:black;\">\r\n            <td>Data 1</td>\r\n            <td>Data 2</td>\r\n            <td>Data 3</td>\r\n          </tr>\r\n          <tr style=\"background-color:white;color:black;\">\r\n            <td>Data 4</td>\r\n            <td>Data 5</td>\r\n            <td>Data 6</td>\r\n          </tr>\r\n          <tr style=\"color:black;\" >\r\n            <td>Data 7</td>\r\n            <td>Data 8</td>\r\n            <td>Data 9</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  `;\r\n\r\n  return `\r\n<div class=\"modal show d-block\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content ${popupClass}\">\r\n      <div class=\"modal-header border-0\">\r\n        <h5 class=\"fw-bold\">Customize Table</h5>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        ${dropdown}\r\n        ${tablePreview}\r\n      </div>\r\n\r\n      <div class=\"modal-footer border-0\">\r\n        <button type=\"button\" class=\"btn btn-link ${isDark ? 'text-info' : 'text-primary'}\" id=\"confirmation-popup-cancel\">Cancel</button>\r\n        <button type=\"button\" class=\"btn btn-primary text-white\" id=\"confirmation-popup-confirm\">Ok</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n  `;\r\n}\r\n\r\n\r\nfunction DataModalPopup(selectedData) {\r\n  const isDark = theme === 'Dark';\r\n  const popupClass = isDark ? 'bg-dark text-light' : 'bg-light text-dark';\r\n\r\n  return `\r\n<div class=\"modal show d-block\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content p-3 ${popupClass}\">\r\n      <div class=\"modal-header flex-column align-items-start border-0\">\r\n        <span class=\"fw-bold mb-3\">${selectedData?.Name || ''}</span>\r\n        <span class=\"d-block list-height\">${selectedData?.UserValue || ''}</span>\r\n        ${selectedData?.Sources ? `\r\n        <hr class=\"${isDark ? 'border-light' : 'border-dark'}\">\r\n        <div class=\"d-flex align-items-start flex-wrap\">\r\n          <span class=\"fw-bold me-2\">Selected Sources :</span>\r\n          <div class=\"d-flex flex-wrap gap-1\">\r\n            ${selectedData.Sources.map(source => `\r\n              <span class=\"badge ${isDark ? 'text-bg-secondary' : 'text-bg-info'}\">${source.FileName}</span>\r\n            `).join('')}\r\n          </div>\r\n        </div>` : ''}\r\n      </div>\r\n\r\n      <div class=\"modal-body p-3 add-ai-gen\">\r\n        <div class=\"row g-2 list-height\">\r\n          ${selectedData?.Data?.map(item => `\r\n            <div class=\"col-md-12 mt-3\">\r\n              <div class=\"border rounded p-2 ${isDark ? 'bg-secondary text-light' : 'bg-light text-dark'} shadow-sm h-100\">\r\n                <div class=\"fw-bold small text-truncate\" title=\"${item.FileName}\">\r\n                  ${item.FileName}\r\n                </div>\r\n                <div class=\"text-muted small mb-1\">Page: ${item.PageNumber}</div>\r\n                <div class=\"small\" style=\"white-space: normal;\">\r\n                  ${item.Sentence}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n\r\n        <div class=\"d-flex w-100 justify-content-end mt-3 align-items-center\">\r\n          <button type=\"button\" class=\"btn btn-primary text-white\" id=\"datamodel-popup-ok\">OK</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n}\r\n\r\n\r\n\r\nfunction toaster(message: string, type: string) {\r\n  const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';\r\n  // const color = type === 'success' ? '#28a745' : '#dc3545';\r\n  const color = `#ffffff`\r\n  const body = `<div class=\"toast show\" style=\"position: fixed; top: 10px; right: 10px; z-index: 1050; max-width: fit-content; background-color: #808080; color: #ffffff;\">\r\n    <div class=\"toast-body\">\r\n         <i class=\"fa ${icon} me-2\" style=\"color: ${color};\"></i> ${message}\r\n    </div>\r\n  </div>`;\r\n\r\n  document.getElementById('toastr').innerHTML = body;\r\n  setTimeout(() => {\r\n    document.getElementById('toastr').innerHTML = ``;\r\n  }, 4000);\r\n}\r\n\r\nfunction logoheader(storedUrl) {\r\n  const themeicon = theme === 'Dark' ? 'fa-sun' : 'fa-moon'\r\n  const body = `\r\n    <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n    <div class=\"icon-nav me-3\">\r\n      <i class=\"fa fa-home c-pointer me-3\" title=\"Home\" id=\"home\"></i>\r\n      <div class=\"dropdown d-inline\">\r\n        <i class=\"fa fa-tools c-pointer me-3\" id=\"settingsDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" title=\"Settings\"></i>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"settingsDropdown\">\r\n        <li>\r\n        <li>\r\n            <a class=\"dropdown-item\" href=\"#\" id=\"define-formatting\">\r\n              <i class=\"fa fa-sliders-h me-2\" aria-hidden=\"true\"></i> Define Formatting\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"glossary\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-book me-2\" aria-hidden=\"true\"></i> Apply Glossary\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"removeFormatting\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-eraser me-2\" aria-hidden=\"true\"></i> Remove Formatting\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Theme Toggle Icon -->\r\n      <span id=\"theme-toggle\"><i class=\"fa ${themeicon} c-pointer me-3\" title=\"Toggle Theme\"></i></span>\r\n\r\n      <i class=\"fa fa-sign-out c-pointer me-3\" id=\"logout\" title=\"Logout\"></i>\r\n    </div>    \r\n  `\r\n  return body;\r\n}\r\n\r\nconst navTabs = `<ul class=\"nav nav-tabs\" id=\"tabList\" role=\"tablist\">\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link active\" id=\"tag-tab\" data-bs-toggle=\"tab\" href=\"#tag\" role=\"tab\">Tag</a>\r\n  </li>\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link\" id=\"prompt-tab\" data-bs-toggle=\"tab\" href=\"#prompt\" role=\"tab\">Prompt builder</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content p-3 border border-top-0\">\r\n  <div class=\"tab-pane fade show active\" id=\"add-tag-body\" role=\"tabpanel\" aria-labelledby=\"tag-tab\">\r\n  </div>\r\n  <div class=\"tab-pane fade\" id=\"add-prompt-template\" role=\"tabpanel\" aria-labelledby=\"prompt-tab\">\r\n  </div>\r\n</div>\r\n`\r\n\r\n\r\n\r\nconst promptbuilderbody = `<div>hi</div>`\r\n\r\n\r\nexport { navTabs, addtagbody, promptbuilderbody, logoheader, Confirmationpopup, toaster, DataModalPopup, customizeTablePopup };","import { toaster } from \"./components/bodyelements\";\r\nimport { generateCheckboxHistory } from \"./components/home\";\r\nimport { theme, UserRole } from \"./taskpane\";\r\n\r\nexport async function insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  await Word.run(async (context) => {\r\n    let style = \"Normal\";\r\n    let text = line;\r\n\r\n    if (line.startsWith('###### ')) {\r\n      style = \"Heading 6\";\r\n      text = line.substring(7).trim();\r\n    } else if (line.startsWith('##### ')) {\r\n      style = \"Heading 5\";\r\n      text = line.substring(6).trim();\r\n    } else if (line.startsWith('#### ')) {\r\n      style = \"Heading 4\";\r\n      text = line.substring(5).trim();\r\n    } else if (line.startsWith('### ')) {\r\n      style = \"Heading 3\";\r\n      text = line.substring(4).trim();\r\n    } else if (line.startsWith('## ')) {\r\n      style = \"Heading 2\";\r\n      text = line.substring(3).trim();\r\n    } else if (line.startsWith('# ')) {\r\n      style = \"Heading 1\";\r\n      text = line.substring(2).trim();\r\n    }\r\n\r\n    // Create an empty paragraph with the desired style\r\n    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n    paragraph.style = style;\r\n\r\n    // Combine all markdown patterns in a single regex\r\n    const regex = /(\\*\\*(.+?)\\*\\*)|(\\*(.+?)\\*)|(_(.+?)_)/g;\r\n    let lastIndex = 0;\r\n    let match;\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n      // Insert plain text before the match\r\n      if (match.index > lastIndex) {\r\n        paragraph.insertText(text.substring(lastIndex, match.index), Word.InsertLocation.end);\r\n      }\r\n\r\n      // Extract the actual content and formatting\r\n      let content = \"\";\r\n      let bold = false;\r\n      let italic = false;\r\n      let underline = false;\r\n\r\n      if (match[1]) { // **bold**\r\n        content = match[2];\r\n        bold = true;\r\n      } else if (match[3]) { // *italic*\r\n        content = match[4];\r\n        italic = true;\r\n      } else if (match[5]) { // _underline_\r\n        content = match[6];\r\n        underline = true;\r\n      }\r\n\r\n      const formattedRange = paragraph.insertText(content, Word.InsertLocation.end);\r\n      formattedRange.font.bold = bold;\r\n      formattedRange.font.italic = italic;\r\n      formattedRange.font.underline = underline ? Word.UnderlineType.single : Word.UnderlineType.none;\r\n\r\n      lastIndex = regex.lastIndex;\r\n    }\r\n\r\n    // Insert any remaining text after last formatting\r\n    if (lastIndex < text.length) {\r\n      paragraph.insertText(text.substring(lastIndex), Word.InsertLocation.end);\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\nexport function removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\n\r\nexport function copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n  toaster('Copied to clipboard successfully!', 'success')\r\n\r\n}\r\n\r\n\r\nexport function switchToPromptBuilder() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('prompt-tab').classList.add('active');\r\n  document.getElementById('add-prompt-template').classList.add('show', 'active');\r\n}\r\n\r\n\r\nexport function switchToAddTag() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('tag-tab').classList.add('active');\r\n  document.getElementById('add-tag-body').classList.add('show', 'active');\r\n}\r\n\r\nexport function updateEditorFinalTable(data) {\r\n  const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n  let match;\r\n  let tables = [];\r\n\r\n  while ((match = regex.exec(data)) !== null) {\r\n    try {\r\n      const parsedContent = JSON.parse(match[1]);\r\n      tables.push(jsonToHtmlTable(parsedContent));\r\n    } catch (error) {\r\n      console.error(\"Failed to parse JSON:\", error, match[1]);\r\n    }\r\n  }\r\n\r\n  let tableIndex = 0;\r\n  return data.replace(regex, () => tables[tableIndex++] || \"\");\r\n}\r\n\r\nfunction jsonToHtmlTable(jsonData) {\r\n  if (!jsonData || (Array.isArray(jsonData) && jsonData.length === 0)) {\r\n    return '<p>No data available</p>';\r\n  }\r\n\r\n  let headers = new Set();\r\n  let rows = [];\r\n\r\n  function flattenObject(obj, prefix = \"\", result = {}) {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key];\r\n      const newKey = prefix ? `${prefix} > ${key}` : key;\r\n\r\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n        flattenObject(value, newKey, result);\r\n      } else if (Array.isArray(value)) {\r\n        result[newKey] = value.map(item => {\r\n          return typeof item === 'object'\r\n            ? Object.entries(item).map(([k, v]) => `<strong>${k}:</strong> ${v}`).join('<br>')\r\n            : item;\r\n        }).join('<br>');\r\n      } else {\r\n        result[newKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  if (!Array.isArray(jsonData)) {\r\n    jsonData = Object.entries(jsonData).map(([key, value]) => ({ [key]: value }));\r\n  }\r\n\r\n  jsonData.forEach(item => {\r\n    let flattenedItem = flattenObject(item);\r\n    Object.keys(flattenedItem).forEach(key => headers.add(key));\r\n    rows.push(flattenedItem);\r\n  });\r\n\r\n  let table = '<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">';\r\n  table += '<tr>' + [...headers].map(header => `<th>${header}</th>`).join('') + '</tr>';\r\n  rows.forEach(row => {\r\n    table += '<tr>' + [...headers].map(header => `<td>${row[header]}</td>`).join('') + '</tr>';\r\n  });\r\n\r\n  table += '</table>';\r\n  return table;\r\n}\r\n\r\n\r\n\r\nexport function generateChatHistoryHtml(chatList: any[]): string {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const globalPromptUpdate = UserRole.UserRoleEntityAccessList.find(\r\n    (item: any) => item.UserRoleEntity === 'Global Prompt Update'\r\n  );\r\n\r\n  return chatList.map((chat, index) => {\r\n    const includeSaveIcon = globalPromptUpdate?.UserRoleAccessID === 3;\r\n    const includeReferenceIcon = chat.Evidences && chat.Evidences.length > 0;\r\n\r\n    return `\r\n      <div class=\"row chat-entry m-0 p-0\">\r\n        <div class=\"col-md-12 mt-2 p-2\">\r\n          <div class=\"d-flex justify-content-between align-items-start\">\r\n            <!-- Prompt Box -->\r\n            <div class=\"form-control h-34 d-flex align-items-center dynamic-height prompt-text ${promptclass}\" style=\"width: 95%;\">\r\n              ${chat.Prompt}\r\n            </div>\r\n\r\n            <!-- Icons Stack -->\r\n            <div class=\"d-flex flex-column align-items-center ms-2\">\r\n              <i class=\"fa fa-copy text-secondary c-pointer mb-2\" title=\"Copy Prompt\" id=\"copyPrompt-${index}\"></i>\r\n              ${includeSaveIcon ? `<i class=\"fa fa-save text-secondary c-pointer\" title=\"Save Prompt\" id=\"savePrompt-${index}\"></i>` : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-12 mb-2 p-2 d-flex\">\r\n          <span class=\"d-flex align-items-baseline w-100\">\r\n            <div class=\"flex-grow-1 c-pointer ai-response-container px-2 pe-3 pt-3 ai-selected-response\" id=\"responseContainer-${index}\">\r\n              <input\r\n                class=\"form-check-input c-pointer me-2 response-checkbox\"\r\n                type=\"checkbox\"\r\n                id=\"checkbox-${index}\"\r\n                ${chat.Selected === 1 ? 'checked' : ''}>\r\n              <span id=\"responseText-${index}\">${chat.Response}</span>\r\n              <i class=\"fa fa-copy text-secondary c-pointer ms-2\"\r\n                title=\"Copy Response\"\r\n                id=\"copyResponse-${index}\"></i>\r\n              ${includeReferenceIcon\r\n                ? `<i class=\"fa fa-folder-gear text-secondary c-pointer ms-2\"\r\n                    title=\"Open Reference\"\r\n                    id=\"openRefferance-${index}\"></i>`\r\n                : ''}\r\n            </div>\r\n          </span>\r\n        </div>\r\n      </div>`;\r\n  }).join('');\r\n}\r\n\r\n\r\n\r\n\r\nexport function chatfooter(tag: any) {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n  return ` <textarea class=\"form-control ${promptclass}\"\r\n                      rows=\"5\"\r\n                      id=\"chatInput\"\r\n                      ></textarea>\r\n            <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n            <div class=\"d-flex flex-column align-self-end me-3\">\r\n              <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insertTagButton\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\"></i>\r\n              </button>\r\n             <div class=\"ngb-tooltip d-inline-block\">\r\n                 ${tooltipButton}\r\n                <button class=\"btn btn-secondary ms-2 mb-2 text-white\" id=\"changeSourceButton\">\r\n                  <i class=\"fa fa-file-lines text-white\"></i>\r\n                </button>\r\n              </div>\r\n\r\n              <button type=\"submit\" class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\" id=\"sendPromptButton\">\r\n                <span class=\"tooltiptext\">Send</span>\r\n                <i class=\"fa fa-paper-plane text-white\"></i>\r\n              </button>\r\n            </div>`\r\n}\r\n\r\nexport function renderSelectedTags(selectedNames, availableKeys) {\r\n  const badgeWrapper = document.getElementById('tag-badge-wrapper');\r\n  badgeWrapper.innerHTML = '';\r\n  // Filter out duplicates (case-insensitive)\r\n  const uniqueNames = [...new Set(\r\n    selectedNames.map(name => name.toLowerCase())\r\n  )].map(lowerName =>\r\n    selectedNames.find(name => name.toLowerCase() === lowerName)\r\n  );\r\n\r\n\r\n  uniqueNames.forEach(name => {\r\n    let aiTag;\r\n\r\n    if (/^ID\\d+$/i.test(name)) {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && `id${mention.ID}`.toLowerCase() === name.toLowerCase()\r\n      );\r\n    } else {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && mention.DisplayName.toLowerCase() === name.toLowerCase()\r\n      );\r\n    }\r\n    const badge = document.createElement('span');\r\n    badge.className = 'badge rounded-pill border bg-white text-dark px-3 py-2 shadow-sm d-flex align-items-center badge-clickable';\r\n    badge.style.cursor = 'pointer';\r\n    badge.innerHTML = `${aiTag.DisplayName} <i class=\"fa-solid fa-microchip-ai ms-2 text-muted\" aria-label=\"AI Suggested\"></i>`;\r\n\r\n    badge.addEventListener('click', async () => {\r\n      await selectMatchingBookmarkFromSelection(name);\r\n\r\n      if (aiTag) {\r\n        const appBody = document.getElementById('app-body');\r\n        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n\r\n        generateCheckboxHistory(aiTag).then(html => {\r\n          appBody.innerHTML = html;\r\n        });\r\n      }\r\n    });\r\n\r\n\r\n    badgeWrapper.appendChild(badge);\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function applyThemeClasses(theme) {\r\n  const isDark = theme === 'Dark';\r\n  const isLight = theme === 'Light';\r\n\r\n  const safeApplyClass = (selector, darkClasses, lightClasses) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    const darkClassList = darkClasses.split(' ');\r\n    const lightClassList = lightClasses.split(' ');\r\n\r\n    elements.forEach(elem => {\r\n      if (!elem) return;\r\n      // Remove all related theme classes\r\n      elem.classList.remove(...darkClassList);\r\n      elem.classList.remove(...lightClassList);\r\n      // Add only the relevant set\r\n      if (isDark) elem.classList.add(...darkClassList);\r\n      if (isLight) elem.classList.add(...lightClassList);\r\n    });\r\n  };\r\n\r\n  // Now use it for different elements\r\n  safeApplyClass('#app-body', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('#search-box', 'bg-secondary text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-menu', 'bg-dark text-light border-light', 'bg-white text-dark border');\r\n  safeApplyClass('.list-group-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('.dropdown-toggle', 'bg-dark text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  // container for the suggestion list\r\n  safeApplyClass(\r\n    '.list-group-item-action',\r\n    'bg-dark text-light list-hover-dark',\r\n    'bg-light text-dark list-hover-light'\r\n  );\r\n\r\n  safeApplyClass('#close-ai-window', 'fa-solid fa-circle-xmark bg-dark text-light', 'fa-solid fa-circle-xmark bg-light text-dark');\r\n  safeApplyClass('#chatInput', 'bg-secondary text-light', 'bg-white text-dark');\r\n  safeApplyClass('.prompt-text', 'bg-secondary text-light', 'bg-white text-dark');\r\n\r\n\r\n}\r\n\r\nexport function swicthThemeIcon() {\r\n  const themeToggle = document.getElementById('theme-toggle');\r\n  const icon = themeToggle.querySelector('i');\r\n\r\n  if (theme === 'Dark') {\r\n    icon.classList.remove('fa-moon');\r\n    icon.classList.add('fa-sun');\r\n    sessionStorage.setItem('theme', 'Dark');\r\n  } else if (theme === 'Light') {\r\n    icon.classList.remove('fa-sun');\r\n    icon.classList.add('fa-moon');\r\n    sessionStorage.setItem('theme', 'Light');\r\n  }\r\n}\r\n\r\nasync function selectMatchingBookmarkFromSelection(displayName) {\r\n  return Word.run(async (context) => {\r\n    const selection = context.document.getSelection();\r\n    const bookmarks = selection.getBookmarks(); // ClientResult<string[]>\r\n    await context.sync();\r\n\r\n    const targetBookmarkName = bookmarks.value.find(bookmark => {\r\n      const cleanName = bookmark.split('_Split_')[0].replace(/_/g, ' ');\r\n      return cleanName.toLowerCase() === displayName.toLowerCase();\r\n    });\r\n\r\n    if (targetBookmarkName) {\r\n      const range = context.document.getBookmarkRangeOrNullObject(targetBookmarkName);\r\n      range.load('isNullObject');\r\n      await context.sync();\r\n\r\n      if (!range.isNullObject) {\r\n        range.select(); // Select the entire bookmark\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n","import { getPromptTemplateById, updateGroupKey, updateAiHistory, updatePromptTemplate } from \"../api\";\r\nimport { chatfooter, copyText, generateChatHistoryHtml, insertLineWithHeadingStyle, removeQuotes, renderSelectedTags, switchToAddTag, updateEditorFinalTable } from \"../functions\";\r\nimport { addGenAITags, aiTagList, applyAITagFn, availableKeys, createMultiSelectDropdown, customizeTable, fetchAIHistory, isPendingResponse, jwt, mentionDropdownFn, selectedNames, sendPrompt, sourceList, tableStyle, theme } from \"../taskpane\";\r\nimport { Confirmationpopup, DataModalPopup, toaster } from \"./bodyelements\";\r\n\r\nlet preview = '';\r\n\r\n\r\nexport function loadHomepage(availableKeys) {\r\n    const searchBoxClass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-3\">\r\n        <div class=\"d-flex justify-content-end px-2\">\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Action\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"add-btn-tag\">\r\n                            <i class=\"fa fa-plus me-2\" aria-hidden=\"true\"></i> Add\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"apply-btn-tag\">\r\n                            <i class=\"fa-solid fa-circle-check me-2\"></i> Apply\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"customize-table\">\r\n                            <i class=\"fa fa-brush me-2\" aria-hidden=\"true\"></i> Customize Table\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group px-2 pt-2\">\r\n            <input type=\"text\" id=\"search-box\" class=\"form-control ${searchBoxClass}\" placeholder=\"Search Tags...\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <ul id=\"suggestion-list\" class=\"list-group mt-2 px-2\"></ul>\r\n        \r\n        <div id=\"tags-in-selected-text\" class=\"mt-2 px-2 selected-text-box d-none\">\r\n            <label class=\"form-label mb-2 fw-bold\">Tags in Selected Text</label>\r\n            <div class=\"tag-panel d-flex flex-wrap gap-2\" id=\"tag-badge-wrapper\"></div>\r\n        </div>\r\n    </div>`;\r\n\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n\r\n    function updateSuggestions() {\r\n        const searchTerm = searchBox.value.trim().toLowerCase();\r\n        suggestionList.replaceChildren(); // Clear previous results\r\n        if (searchTerm === '') {\r\n            suggestionList.innerHTML = ''\r\n            return;\r\n        }\r\n\r\n        const filteredMentions = availableKeys.filter(mention =>\r\n            mention.DisplayName.toLowerCase().includes(searchTerm)\r\n        );\r\n\r\n        const nonAITags = filteredMentions.filter(m => m.AIFlag === 0);\r\n        const aiTags = filteredMentions.filter(m => m.AIFlag === 1);\r\n\r\n        const createSection = (labelText, mentions, isAISection = false) => {\r\n            if (mentions.length === 0) return;\r\n\r\n            // Define the theme classes based on the current theme\r\n            const themeClasses = theme === 'Dark'\r\n                ? { itemClass: 'bg-dark text-light list-hover-dark', labelClass: 'bg-dark text-light' }\r\n                : { itemClass: 'bg-light text-dark list-hover-light', labelClass: 'bg-light text-dark' };\r\n\r\n\r\n            // Create the section label\r\n            const label = document.createElement('li');\r\n            label.className = `list-group-item fw-bold text-secondary ${themeClasses.labelClass}`;\r\n            label.textContent = labelText;\r\n            suggestionList.appendChild(label);\r\n\r\n            // Loop through mentions and create the list items\r\n            mentions.forEach(mention => {\r\n                const listItem = document.createElement('li');\r\n                listItem.className = `list-group-item list-group-item-action ${themeClasses.itemClass}`; // Apply the theme classes\r\n\r\n                // Create the icon for AI or non-AI tags\r\n                const icon = isAISection\r\n                    ? `<i class=\"fa-solid fa-microchip-ai text-muted me-2\"></i>`\r\n                    : `<i class=\"fa-solid fa-layer-group text-muted me-2\"></i>`;\r\n\r\n                listItem.innerHTML = `${icon} ${mention.DisplayName}`;\r\n\r\n                listItem.onclick = () => {\r\n                    if (isAISection) {\r\n                        const appBody = document.getElementById('app-body');\r\n                        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n                        generateCheckboxHistory(mention).catch(error => {\r\n                            appBody.innerHTML = '<div class=\"text-danger p-2\">Error loading data</div>';\r\n                        }).then(html => {\r\n                            appBody.innerHTML = html;\r\n                        });\r\n                    } else {\r\n                        replaceMention(mention, mention.ComponentKeyDataType);\r\n                        suggestionList.replaceChildren();\r\n                    }\r\n                };\r\n\r\n                suggestionList.appendChild(listItem);\r\n            });\r\n        };\r\n\r\n        // Call the function for each section\r\n        createSection('Properties', nonAITags, false);\r\n        createSection('AI Tags', aiTags, true);\r\n\r\n    }\r\n    if (selectedNames.length > 0) {\r\n        const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n        renderSelectedTags(selectedNames, availableKeys);\r\n    }\r\n\r\n    // Add input event listener to the search box\r\n    let debounceTimeout;\r\n    searchBox.addEventListener('input', () => {\r\n        clearTimeout(debounceTimeout);\r\n        debounceTimeout = setTimeout(updateSuggestions, 300); // Delay input handling by 300ms\r\n    });\r\n\r\n    document.getElementById('add-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            addGenAITags();\r\n        }\r\n    });\r\n\r\n    document.getElementById('customize-table').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            customizeTable();\r\n        }\r\n    })\r\n\r\n    document.getElementById('apply-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            applyAITagFn();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n            let newSelection = selection;\r\n\r\n            if (type === 'TABLE') {\r\n                const parser = new DOMParser();\r\n                const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n                const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                await context.sync();\r\n\r\n                for (const node of bodyNodes) {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        const textContent = node.textContent?.trim();\r\n                        if (textContent) {\r\n                            textContent.split('\\n').forEach(line => {\r\n                                if (line.trim()) {\r\n                                    insertLineWithHeadingStyle(selection, line);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        const element = node as HTMLElement;\r\n\r\n                        if (element.tagName.toLowerCase() === 'table') {\r\n                            const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                            if (rows.length === 0) {\r\n                                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                continue;\r\n                            }\r\n\r\n                            const maxCols = Math.max(...rows.map(row => {\r\n                                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                }, 0);\r\n                            }));\r\n\r\n                            const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                            await context.sync();\r\n\r\n                            const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                            table.style = tableStyle;  // Apply built-in Word table style\r\n\r\n                            await context.sync();\r\n\r\n                            const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                            rows.forEach((row, rowIndex) => {\r\n                                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                let cellIndex = 0;\r\n\r\n                                cells.forEach((cell) => {\r\n                                    while (rowspanTracker[cellIndex] > 0) {\r\n                                        rowspanTracker[cellIndex]--;\r\n                                        cellIndex++;\r\n                                    }\r\n\r\n                                    const cellText = Array.from(cell.childNodes)\r\n                                        .map(node => {\r\n                                            if (node.nodeType === Node.TEXT_NODE) {\r\n                                                return node.textContent?.trim() || '';\r\n                                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                return (node as HTMLElement).innerText.trim();\r\n                                            }\r\n                                            return '';\r\n                                        })\r\n                                        .filter(text => text.length > 0)\r\n                                        .join(' ');\r\n\r\n                                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                    for (let i = 1; i < colspan; i++) {\r\n                                        if (cellIndex + i < maxCols) {\r\n                                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                        }\r\n                                    }\r\n\r\n                                    if (rowspan > 1) {\r\n                                        for (let i = 0; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    cellIndex += colspan;\r\n                                });\r\n                            });\r\n\r\n                            newSelection = table.getCell(0, 0); // Set the cursor to the start of the table\r\n                        } else {\r\n                            const elementText = element.innerText.trim();\r\n                            if (elementText) {\r\n                                elementText.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                            newSelection = selection; // If it's not a table, just use the existing selection.\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (word.EditorValue === '' || word.IsApplied) {\r\n                    selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n                } else {\r\n                    let content = removeQuotes(word.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n                    lines.forEach(line => {\r\n                        selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n                newSelection = selection; // After inserting the text, set selection to it.\r\n            }\r\n\r\n            // Move the cursor to the next line after content insertion\r\n            const nextLineParagraph = selection.insertParagraph(\"\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            // Set the new cursor position after content\r\n            newSelection = nextLineParagraph;\r\n            selection.select(); // Select the new paragraph where the cursor will be\r\n            await context.sync();\r\n\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport async function openAITag(tag) {\r\n    tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n    });\r\n\r\n\r\n}\r\n\r\nexport async function generateCheckboxHistory(tag) {\r\n    if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n        await fetchAIHistory(tag);\r\n    }\r\n\r\n    const history = tag.FilteredReportHeadAIHistoryList;\r\n\r\n    if (history.length === 0) {\r\n        return '<div>No AI history available.</div>';\r\n    }\r\n\r\n    // Check current theme\r\n    const isDark = theme === 'Dark';\r\n    const closeBtnClass = isDark\r\n        ? 'fa-solid fa-circle-xmark bg-dark text-light'\r\n        : 'fa-solid fa-circle-xmark bg-light text-dark';\r\n\r\n    const closeBar = `\r\n        <div class=\"d-flex justify-content-between align-items-center px-2 pt-3\">\r\n            <div class=\"d-flex align-items-center ms-3\">\r\n                <i class=\"fa fa-microchip-ai text-muted me-2\"></i>\r\n                <span class=\"fw-bold\">${tag.DisplayName}</span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-center align-items-center me-3 c-pointer\" id=\"close-btn-tag\">\r\n                <i class=\"${closeBtnClass}\" id=\"close-ai-window\"></i>\r\n            </div>\r\n        </div>\r\n        <hr class=\"mt-2 mb-1 mx-3\">\r\n    `;\r\n\r\n    const chatBody = `\r\n        <div class=\"chat-body\">\r\n            ${generateChatHistoryHtml(history)}\r\n        </div>\r\n    `;\r\n\r\n    const chatFooterHtml = `\r\n        <div class=\"d-flex align-items-end justify-content-end chatbox p-2\" id=\"chatFooter\">\r\n            ${chatfooter(tag)}\r\n        </div>\r\n    `;\r\n\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n\r\n    return `${closeBar}${chatBody}${chatFooterHtml}`;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function setupPromptBuilderUI(container, promptBuilderList) {\r\n\r\n    // Static template and field definitions\r\n    let preview = '';\r\n    let templateText = '';\r\n\r\n    // Field configs (can be extended)\r\n    let fieldsList = [];\r\n\r\n    // Create the form container\r\n    // Create the form container\r\n    container.innerHTML = `\r\n  <div class=\"form-group mb-3 p-3 pt-0\">\r\n    <label class='form-label'><span class=\"text-danger\">*</span> Prompt Builder Template</label>\r\n    <select id=\"promptBuilderTemplate\" class=\"form-control\">\r\n      <option value=\"\" disabled selected>Select a template</option>\r\n    </select>\r\n    <div id=\"templateError\" class=\"invalid-feedback d-none\">Type is required.</div>\r\n  </div>\r\n\r\n  <div id=\"fieldsContainer\"></div>\r\n\r\n  <div class=\"form-group mb-3 p-3 pt-0\" id=\"previewContainer\" style=\"display: none;\">\r\n    <label class=\"mb-2\">Preview</label>\r\n    <div id=\"preview\" class=\"form-control\"></div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between px-3 align-items-center mt-3\">\r\n    <span id=\"resetBtn\" class=\"text-primary fw-bold\" style=\"cursor: pointer;\">Reset</span>\r\n    <button id=\"applyBtn\" class=\"btn btn-primary text-white\" disabled>Apply Prompt</button>\r\n  </div>\r\n`;\r\n\r\n    // Element references\r\n    const templateSelect = container.querySelector('#promptBuilderTemplate') as HTMLSelectElement;\r\n    const applyBtn = container.querySelector('#applyBtn') as HTMLButtonElement;\r\n    const resetBtn = container.querySelector('#resetBtn') as HTMLSpanElement;\r\n    const previewDiv = container.querySelector('#preview') as HTMLDivElement;\r\n    const fieldsContainer = container.querySelector('#fieldsContainer') as HTMLDivElement;\r\n    const previewContainer = container.querySelector('#previewContainer') as HTMLDivElement;\r\n    const templateError = container.querySelector('#templateError') as HTMLDivElement;\r\n\r\n    // Populate template dropdown\r\n    promptBuilderList.forEach((item) => {\r\n        const option = document.createElement('option');\r\n        option.value = item.ID.toString();\r\n        option.textContent = item.Name;\r\n        templateSelect.appendChild(option);\r\n    });\r\n\r\n    templateSelect.addEventListener('change', async () => {\r\n        const templateId = templateSelect.value;\r\n        const jwt = sessionStorage.getItem('token') || '';\r\n\r\n        const data = await getPromptTemplateById(templateId, jwt);\r\n        if (data.Status && data.Data) {\r\n            fieldsList = data.Data;\r\n            preview = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n\r\n            templateText = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n        }\r\n        if (!templateId) {\r\n            templateError.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        templateError.classList.add('d-none');\r\n\r\n        renderFields();\r\n        updatePreview();\r\n    });\r\n\r\n    function renderFields() {\r\n        fieldsContainer.innerHTML = '';\r\n\r\n        fieldsList.forEach((field) => {\r\n            const div = document.createElement('div');\r\n            div.className = 'form-group mb-3 p-3 pt-0';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = field.Label;\r\n            div.appendChild(label);\r\n\r\n            if (field.Type === 1) {\r\n                const input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.className = 'form-control';\r\n                input.id = field.Label;\r\n                input.addEventListener('input', replaceKeywordsManually);\r\n                div.appendChild(input);\r\n            } else if (field.Type === 2) {\r\n                const select = document.createElement('select');\r\n                select.className = 'form-control';\r\n                select.id = field.Label;\r\n                field.PromptTemplateOptionList.forEach((opt: any) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = opt.Text;\r\n                    option.textContent = opt.Option;\r\n                    select.appendChild(option);\r\n                });\r\n                select.addEventListener('change', replaceKeywordsManually);\r\n                div.appendChild(select);\r\n            }\r\n\r\n            fieldsContainer.appendChild(div);\r\n        });\r\n    }\r\n\r\n    function replaceKeywordsManually() {\r\n        const keywordMap: { [key: string]: string } = {};\r\n\r\n        fieldsList.forEach((field) => {\r\n            const id = field.Label;\r\n            const keyword = `#${id}#`;\r\n\r\n            let value = '';\r\n            const element = document.getElementById(id) as HTMLInputElement | HTMLSelectElement;\r\n\r\n            if (element) {\r\n                value = (element instanceof HTMLInputElement || element instanceof HTMLSelectElement)\r\n                    ? element.value\r\n                    : '';\r\n            }\r\n\r\n            keywordMap[keyword] = value ? value : keyword;\r\n        });\r\n\r\n        let insertValue = templateText;\r\n        for (const [keyword, value] of Object.entries(keywordMap)) {\r\n            insertValue = insertValue.replace(new RegExp(keyword, 'g'), value);\r\n        }\r\n\r\n        preview = insertValue;\r\n        previewDiv.textContent = preview;\r\n        previewContainer.style.display = preview ? 'block' : 'none';\r\n        applyBtn.disabled = preview === '';\r\n    }\r\n\r\n    function updatePreview() {\r\n        replaceKeywordsManually();\r\n    }\r\n\r\n    function resetForm() {\r\n        // Reset only the dynamic field values\r\n        fieldsList.forEach((field) => {\r\n            const element = document.getElementById(field.Label) as HTMLInputElement | HTMLSelectElement;\r\n            if (element) {\r\n                if (element instanceof HTMLInputElement) {\r\n                    element.value = '';\r\n                } else if (element instanceof HTMLSelectElement) {\r\n                    element.selectedIndex = 0; // optional: reset to first option\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clear preview\r\n        previewDiv.textContent = templateText;\r\n        preview = templateText;\r\n    }\r\n\r\n\r\n    function applyPrompt() {\r\n        if (!preview) return;\r\n\r\n        const promptTextarea = document.getElementById('prompt') as HTMLTextAreaElement;\r\n        if (promptTextarea) {\r\n            promptTextarea.value = preview;\r\n            switchToAddTag()\r\n        }\r\n\r\n    }\r\n\r\n    resetBtn.addEventListener('click', resetForm);\r\n    applyBtn.addEventListener('click', applyPrompt);\r\n}\r\n\r\n\r\nasync function insertTagPrompt(tag: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.EditorValue === '') {\r\n                selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n            } else {\r\n                if (tag.ComponentKeyDataType === 'TABLE') {\r\n                    const parser = new DOMParser();\r\n                    const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n                    const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                    for (const node of bodyNodes) {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                            const textContent = node.textContent?.trim();\r\n                            if (textContent) {\r\n                                textContent.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                            const element = node as HTMLElement;\r\n\r\n                            if (element.tagName.toLowerCase() === 'table') {\r\n                                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                                if (rows.length === 0) {\r\n                                    selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                    continue;\r\n                                }\r\n\r\n                                const maxCols = Math.max(...rows.map(row => {\r\n                                    return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                    }, 0);\r\n                                }));\r\n\r\n                                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                                await context.sync();\r\n\r\n                                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                                table.style = tableStyle;\r\n                                await context.sync();\r\n\r\n                                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                                rows.forEach((row, rowIndex) => {\r\n                                    const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                    let cellIndex = 0;\r\n\r\n                                    cells.forEach((cell) => {\r\n                                        while (rowspanTracker[cellIndex] > 0) {\r\n                                            rowspanTracker[cellIndex]--;\r\n                                            cellIndex++;\r\n                                        }\r\n\r\n                                        const cellText = Array.from(cell.childNodes)\r\n                                            .map(node => {\r\n                                                if (node.nodeType === Node.TEXT_NODE) {\r\n                                                    return node.textContent?.trim() || '';\r\n                                                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                    return (node as HTMLElement).innerText.trim();\r\n                                                }\r\n                                                return '';\r\n                                            })\r\n                                            .filter(text => text.length > 0)\r\n                                            .join(' ');\r\n\r\n                                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                        for (let i = 1; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                            }\r\n                                        }\r\n\r\n                                        if (rowspan > 1) {\r\n                                            for (let i = 0; i < colspan; i++) {\r\n                                                if (cellIndex + i < maxCols) {\r\n                                                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        cellIndex += colspan;\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                const elementText = element.innerText.trim();\r\n                                if (elementText) {\r\n                                    elementText.split('\\n').forEach(line => {\r\n                                        if (line.trim()) {\r\n                                            insertLineWithHeadingStyle(selection, line);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let content = removeQuotes(tag.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/);\r\n                    lines.forEach(line => {\r\n                        insertLineWithHeadingStyle(selection, line)\r\n                        // selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n                const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                bookmarkRange.insertBookmark(bookmarkName);\r\n                console.log(`Bookmark added: ${bookmarkName}`);\r\n                const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n\r\n                afterBookmark.select();\r\n                start.delete()\r\n                end.delete();\r\n                afterBookmark.delete();\r\n                await context.sync();\r\n\r\n            }\r\n            toaster('Inserted successfully', 'success');\r\n\r\n        } catch (error) {\r\n            toaster('Something went wrong', 'error');\r\n\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport function initializeAIHistoryEvents(tag: any, jwt: string, availableKeys: any) {\r\n    setTimeout(() => {\r\n        tag.FilteredReportHeadAIHistoryList.forEach((chat: any, index: number) => {\r\n            // Copy buttons\r\n            if (tag.textareavalue) {\r\n                (document.getElementById(`chatInput`) as HTMLTextAreaElement).value = tag.textareavalue;\r\n                delete (tag.textareavalue)\r\n            }\r\n\r\n\r\n            // After initializing buttons inside setTimeout\r\n            const chatInput = document.getElementById(\"chatInput\") as HTMLTextAreaElement;\r\n            const changeSourceButton = document.getElementById(\"changeSourceButton\") as HTMLButtonElement;\r\n\r\n            if (chatInput && changeSourceButton) {\r\n                // Run once on load\r\n                changeSourceButton.disabled = chatInput.value.trim().length === 0;\r\n\r\n                // Listen for changes in textarea\r\n                chatInput.addEventListener(\"input\", () => {\r\n                    if (chatInput.value.trim().length > 0) {\r\n                        changeSourceButton.disabled = false;\r\n                    } else {\r\n                        changeSourceButton.disabled = true;\r\n                    }\r\n                });\r\n            };\r\n            document.getElementById(`copyPrompt-${index}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n            const savePromptele = document.getElementById(`savePrompt-${index}`);\r\n            if (savePromptele) {\r\n                document.getElementById(`savePrompt-${index}`)?.addEventListener('click', () => {\r\n                    const container = document.getElementById('confirmation-popup');\r\n                    if (container) {\r\n                        container.innerHTML = Confirmationpopup('Do you want to save the current prompt as a global default?');\r\n\r\n                        // Wait for DOM to update and then attach cancel button listener\r\n                        setTimeout(() => {\r\n                            document.getElementById('confirmation-popup-cancel')?.addEventListener('click', () => {\r\n                                container.innerHTML = '';\r\n                            });\r\n\r\n                            document.getElementById('confirmation-popup-confirm')?.addEventListener('click', async () => {\r\n                                try {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'true');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'true');\r\n                                    let updatedTag = JSON.parse(JSON.stringify(tag));\r\n                                    updatedTag.Prompt = chat.Prompt;\r\n                                    const data = await updatePromptTemplate(updatedTag, jwt);\r\n                                    if (data['Status']) {\r\n                                        toaster('Updated Succesfully', 'success');\r\n                                        container.innerHTML = '';\r\n                                    } else {\r\n                                        document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                        document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                        toaster('Something went wrong', 'error');\r\n\r\n\r\n                                    }\r\n                                } catch (error) {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                    toaster('Something went wrong', 'error');\r\n                                }\r\n                            });\r\n                        }, 0);\r\n                    }\r\n                });\r\n            }\r\n\r\n            const openRefferance = document.getElementById(`openRefferance-${index}`);\r\n            if (openRefferance) {\r\n                document.getElementById(`openRefferance-${index}`)?.addEventListener('click', () => {\r\n                    const container = document.getElementById('confirmation-popup');\r\n                    if (container) {\r\n                        const chatSources = chat.SourceValue.map((item: any) => {\r\n                            return sourceList.find(\r\n                                (source: any) => Number(item) === source.VectorID\r\n                            );\r\n                        });\r\n\r\n                        const sources = chatSources.filter((src: any) => !!src);\r\n                        const popupData = {\r\n                            Data: chat.Evidences,\r\n                            Name: tag.DisplayName,\r\n                            UserValue: chat.Response,\r\n                            Sources: sources\r\n                        }\r\n\r\n                        container.innerHTML = DataModalPopup(popupData);\r\n\r\n                        // Wait for DOM to update and then attach cancel button listener\r\n                        setTimeout(() => {\r\n                            document.getElementById('confirmation-popup-cancel')?.addEventListener('click', () => {\r\n                                container.innerHTML = '';\r\n                            });\r\n\r\n                            document.getElementById('confirmation-popup-confirm')?.addEventListener('click', async () => {\r\n                                try {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'true');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'true');\r\n                                    let updatedTag = JSON.parse(JSON.stringify(tag));\r\n                                    updatedTag.Prompt = chat.Prompt;\r\n                                    const data = await updatePromptTemplate(updatedTag, jwt);\r\n                                    if (data['Status']) {\r\n                                        toaster('Updated Succesfully', 'success');\r\n                                        container.innerHTML = '';\r\n                                    } else {\r\n                                        document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                        document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                        toaster('Something went wrong', 'error');\r\n\r\n\r\n                                    }\r\n                                } catch (error) {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                    toaster('Something went wrong', 'error');\r\n                                }\r\n                            });\r\n\r\n                            document.getElementById('datamodel-popup-ok')?.addEventListener('click', async () => {\r\n                                container.innerHTML = ''\r\n                            })\r\n                        }, 0);\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n            document.getElementById(`copyResponse-${index}`)?.addEventListener('click', () => copyText(chat.Response));\r\n\r\n            // Close button\r\n            document.getElementById(`close-btn-tag`)?.addEventListener('click', () => loadHomepage(availableKeys));\r\n\r\n            // Checkbox logic\r\n            const checkbox = document.getElementById(`checkbox-${index}`) as HTMLInputElement;\r\n            if (checkbox) {\r\n                checkbox.addEventListener('change', async (event: Event) => {\r\n                    const isChecked = (event.target as HTMLInputElement).checked;\r\n\r\n                    // Reset all\r\n                    tag.FilteredReportHeadAIHistoryList.forEach((_: any, otherIndex: number) => {\r\n                        const otherCheckbox = document.getElementById(`checkbox-${otherIndex}`) as HTMLInputElement;\r\n                        const responseContainer = document.getElementById(`responseContainer-${otherIndex}`);\r\n                        if (otherCheckbox) otherCheckbox.checked = false;\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.remove('ai-selected-response');\r\n                            responseContainer.classList.add('bg-light');\r\n                        }\r\n                        tag.FilteredReportHeadAIHistoryList[otherIndex].Selected = 0;\r\n                    });\r\n\r\n                    // Set selected\r\n                    if (isChecked) {\r\n                        checkbox.checked = true;\r\n                        const responseContainer = document.getElementById(`responseContainer-${index}`);\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.add('ai-selected-response');\r\n                            responseContainer.classList.remove('bg-light');\r\n                        }\r\n                        chat.Selected = 1;\r\n                    } else {\r\n                        chat.Selected = 0;\r\n                    }\r\n\r\n                    try {\r\n                        const data = await updateAiHistory(chat, jwt);\r\n                        if (data['Data']) {\r\n                            tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n                            tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n                            tag.ReportHeadAIHistoryList.forEach((historyList: any) => {\r\n                                historyList.Response = removeQuotes(historyList.Response);\r\n                                tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n                            });\r\n\r\n                            const finalResponse = chat.FormattedResponse\r\n                                ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                : chat.Response;\r\n\r\n                            tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n                            tag.UserValue = finalResponse;\r\n                            tag.EditorValue = finalResponse;\r\n                            tag.text = finalResponse;\r\n\r\n                            const currentlySelected = tag.FilteredReportHeadAIHistoryList.some((item: any) => item.Selected === 1);\r\n                            tag.IsApplied = !currentlySelected;\r\n                            availableKeys.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                    currentTag.IsApplied = tag.IsApplied;\r\n                                }\r\n                            })\r\n\r\n                            aiTagList.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n\r\n\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                    currentTag.IsApplied = tag.IsApplied;\r\n                                }\r\n                            });\r\n                        }\r\n                    } catch (err) {\r\n                        console.error('Failed to update AI history:', err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Button: Insert Tag\r\n        document.getElementById(`insertTagButton`)?.addEventListener('click', () => {\r\n            if (!tag.IsApplied) {\r\n                insertTagPrompt(tag);\r\n            }\r\n        });\r\n\r\n        // Button: Send Prompt\r\n        document.getElementById(`sendPromptButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            sendPrompt(tag, textareaValue);\r\n        });\r\n\r\n        // Button: Change Source\r\n        document.getElementById(`changeSourceButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            tag.textareavalue = textareaValue;\r\n            createMultiSelectDropdown(tag);\r\n        });\r\n\r\n        // Mention dropdown\r\n        mentionDropdownFn(`chatInput`, `mention-dropdown`, 'edit');\r\n    }, 0);\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\nimport { dataUrl, storeUrl, versionLink } from \"./data\";\r\nimport { generateCheckboxHistory, initializeAIHistoryEvents, loadHomepage, setupPromptBuilderUI } from \"./components/home\";\r\nimport { applyThemeClasses, chatfooter, renderSelectedTags, swicthThemeIcon, switchToAddTag, switchToPromptBuilder, updateEditorFinalTable } from \"./functions\";\r\nimport { addtagbody, customizeTablePopup, logoheader, navTabs, toaster } from \"./components/bodyelements\";\r\nimport { addAiHistory, addGroupKey, fetchGlossaryTemplate, getAiHistory, getAllClients, getAllPromptTemplates, getReportById, loginUser, updateGroupKey } from \"./api\";\r\nimport { wordTableStyles } from \"./components/tablestyles\";\r\nexport let jwt = '';\r\nexport let UserRole: any = {};\r\nlet storedUrl = storeUrl\r\nlet documentID = ''\r\nlet organizationName = ''\r\nexport let aiTagList = [];\r\nlet initialised = true;\r\nexport let availableKeys = [];\r\nlet promptBuilderList = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\nlet capturedFormatting: any = {};\r\nlet emptyFormat: boolean = false;\r\nlet isNoFormatTextAvailable: boolean = false;\r\nlet clientId = '0';\r\nlet userId = 0;\r\nlet clientList = [];\r\nlet version = versionLink;\r\nlet currentYear = new Date().getFullYear();\r\nexport let sourceList;\r\nlet filteredGlossaryTerm;\r\nexport let selectedNames = [];\r\nexport let isPendingResponse = false;\r\nexport let theme = 'Light';\r\nexport let tableStyle = 'Grid Table 4 - Accent 1';\r\n\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"footer\").innerText = `© ${currentYear} - TrialAssure LINK AI Assistant ${version}`\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      () => {\r\n        logBookmarksInSelection();\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      const orgName = properties.items.find(prop => prop.key === 'Organization');\r\n      if (property && orgName) {\r\n        documentID = property.value;\r\n        organizationName = orgName.value;\r\n        login()\r\n      } else {\r\n        document.getElementById('app-body').innerHTML = `\r\n        <p class=\"px-3 text-center\">Export a document from the LINK AI application to use this functionality.</p>`\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  if (sessionToken) {\r\n    UserRole = JSON.parse(sessionStorage.getItem('userRole')) || ''\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n    const style = localStorage.getItem('tableStyle');\r\n    if (style) {\r\n      tableStyle = style;\r\n    }\r\n\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n  document.getElementById('logo-header').innerHTML = `\r\n  <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n  <div class=\"icon-nav me-3\">\r\n    <span id=\"theme-toggle\"><i class=\"fa fa-moon c-pointer me-3\"  title=\"Toggle Theme\"></i><span>\r\n  </div>\r\n`;\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-2\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary bg-primary-clr\">Login</button>\r\n        </div>\r\n      <div id=\"login-error\" class=\"mt-3 text-danger\" style=\"display: none;\"></div>\r\n\r\n      </form>\r\n    </div>\r\n  `;\r\n  document.getElementById('theme-toggle').addEventListener('click', () => {\r\n    theme = theme === 'Light' ? 'Dark' : 'Light';\r\n    applyThemeClasses(theme)\r\n\r\n    document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n    document.body.classList.toggle('light-theme', theme === 'Light');\r\n    swicthThemeIcon()\r\n  }\r\n  );\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = (document.getElementById('organization') as HTMLInputElement).value;\r\n  const username = (document.getElementById('username') as HTMLInputElement).value;\r\n  const password = (document.getElementById('password') as HTMLInputElement).value;\r\n  if (organization.toLowerCase().trim() === organizationName.toLocaleLowerCase().trim()) {\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n    try {\r\n      const data = await loginUser(organization, username, password);\r\n      if (data.Status === true && data['Data']) {\r\n        if (data['Data'].ResponseStatus) {\r\n          jwt = data.Data.Token;\r\n          const style = localStorage.getItem('tableStyle');\r\n          if (style) {\r\n            tableStyle = style;\r\n          }\r\n          UserRole = data.Data.UserRole;\r\n          sessionStorage.setItem('userRole', JSON.stringify(data.Data.UserRole));\r\n          sessionStorage.setItem('token', jwt)\r\n          sessionStorage.setItem('userId', data.Data.ID);\r\n          toaster('You are successfully logged in', 'success');\r\n          window.location.hash = '#/dashboard';\r\n        } else {\r\n          showLoginError(\"An error occurred during login. Please try again.\")\r\n        }\r\n      } else {\r\n        showLoginError(\"An error occurred during login. Please try again.\")\r\n      }\r\n    } catch (error) {\r\n      showLoginError(\"An error occurred during login. Please try again.\")\r\n      console.error('Error during login:', error);\r\n      // Handle login error (e.g., show an error message)\r\n    }\r\n  } else {\r\n    showLoginError(\"The organization specified is not associated with this document\")\r\n  }\r\n}\r\n\r\nfunction showLoginError(message) {\r\n  loadLoginPage();  // Reload the form UI\r\n  const errorDiv = document.getElementById('login-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction displayMenu() {\r\n  userId = Number(sessionStorage.getItem('userId'))\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument('Init');\r\n\r\n}\r\n\r\nasync function fetchDocument(action) {\r\n  try {\r\n\r\n    const data = await getReportById(documentID, jwt);\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML = logoheader(storedUrl);\r\n\r\n    dataList = data['Data'];\r\n    sourceList = dataList?.SourceTypeList?.filter(\r\n      (item) => item.SourceValue !== ''\r\n        && item.AIFlag === 1\r\n    ) // Filter items with an extension\r\n      .map((item) => ({\r\n        ...item, // Spread the existing properties\r\n        SourceName: decodeURIComponent(transformDocumentName(item.SourceValue))\r\n      }));\r\n    clientId = dataList.ClientID;\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n    availableKeys.forEach((key) => {\r\n      if (key.AIFlag === 1) {\r\n        const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n        let match;\r\n        if ((match = regex.exec(key.EditorValue) !== null)) {\r\n          {\r\n            key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n            key.UserValue = key.EditorValue;\r\n            key.InitialTable = true;\r\n            key.ComponentKeyDataType = 'TABLE';\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    aiTagList.forEach((key, i) => {\r\n      const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n      let match;\r\n      if ((match = regex.exec(key.EditorValue) !== null)) {\r\n        {\r\n          key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n          key.UserValue = key.EditorValue;\r\n          key.InitialTable = true;\r\n          key.ComponentKeyDataType = 'TABLE';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    );\r\n    fetchClients();\r\n    loadPromptTemplates();\r\n    loadHomepage(availableKeys);\r\n    document.getElementById('home').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        loadHomepage(availableKeys);\r\n      }\r\n    });\r\n\r\n    document.getElementById('glossary').addEventListener('click', () => {\r\n      if (emptyFormat) {\r\n        fetchGlossary();\r\n      }\r\n    });\r\n\r\n    document.getElementById('define-formatting').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        formatOptionsDisplay()\r\n      }\r\n    }\r\n    );\r\n\r\n\r\n    document.getElementById('removeFormatting').addEventListener('click', () => {\r\n      if (Object.keys(capturedFormatting).length > 0) {\r\n        removeOptionsConfirmation();\r\n      }\r\n    });\r\n\r\n\r\n    document.getElementById('theme-toggle').addEventListener('click', () => {\r\n      theme = theme === 'Light' ? 'Dark' : 'Light';\r\n      applyThemeClasses(theme)\r\n\r\n      document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n      document.body.classList.toggle('light-theme', theme === 'Light');\r\n      swicthThemeIcon()\r\n    }\r\n    );\r\n\r\n    document.getElementById('logout').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        logout()\r\n      }\r\n    }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchClients() {\r\n  try {\r\n    const userId = sessionStorage.getItem('userId') || '';\r\n\r\n\r\n    const data = await getAllClients(userId, jwt);\r\n\r\n    if (data.Status && data.Data) {\r\n      clientList = data['Data'];\r\n    } else {\r\n      console.warn(\"Failed to load clients or no clients found.\");\r\n    }\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function formatOptionsDisplay() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n               <!-- Buttons for Capture and Empty Format -->\r\n            <div class=\"d-flex justify-content-end\">\r\n              <button id=\"capture-format-btn\" class=\"btn btn-primary bg-primary-clr\"><i class=\"fa fa-border-style me-1\"></i>  Capture Format</button>\r\n            </div>\r\n            <!-- <h5 class=\"card-title\">Formatting Options</h5> -->\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div class=\"formating-checkbox\">\r\n               <input type=\"checkbox\" id=\"empty-format-checkbox\" class=\"form-check-input\">\r\n              <label for=\"empty-format-checkbox\" class=\"form-check-label empty-format-checkbox-label\" style=\"flex: 1;\">\r\n                   Skip ignoring and removing format-based text\r\n              </label>\r\n            </div>\r\n\r\n            <!-- Section to display captured formatting -->\r\n            <div id=\"format-details\">\r\n              <h5 class=\"my-3\">Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled\"></ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    if (Object.keys(capturedFormatting).length === 0) {\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // The object is not empty\r\n    }\r\n\r\n    const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n    if (!glossaryBtn.classList.contains('disabled-link')) {\r\n      glossaryBtn.classList.add('disabled-link');\r\n    }\r\n\r\n    if (emptyFormat) {\r\n      clearCapturedFormatting();\r\n    }\r\n    else {\r\n      if (capturedFormatting.Bold === null || capturedFormatting.Bold === undefined ||\r\n        capturedFormatting.Underline === 'Mixed' || capturedFormatting.Underline === undefined ||\r\n        capturedFormatting.Size === null || capturedFormatting.Size === undefined ||\r\n        capturedFormatting[\"Font Name\"] === null || capturedFormatting[\"Font Name\"] === undefined ||\r\n        capturedFormatting[\"Background Color\"] === '' || capturedFormatting[\"Background Color\"] === undefined ||\r\n        capturedFormatting[\"Text Color\"] === '' || capturedFormatting[\"Text Color\"] === undefined) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n\r\n\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    }\r\n    // Event listeners for the buttons\r\n\r\n    document.getElementById(\"capture-format-btn\").addEventListener(\"click\", captureFormatting);\r\n\r\n    const emptyFormatCheckbox = document.getElementById(\"empty-format-checkbox\") as HTMLInputElement;\r\n    if (isNoFormatTextAvailable) {\r\n      emptyFormatCheckbox.checked = true;\r\n      clearCapturedFormatting();\r\n    }\r\n\r\n    emptyFormatCheckbox.addEventListener(\"change\", () => {\r\n      if (emptyFormatCheckbox.checked) {\r\n        isNoFormatTextAvailable = true;\r\n        clearCapturedFormatting();\r\n      } else {\r\n        const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n        CaptureBtn.disabled = false;\r\n        isNoFormatTextAvailable = false;\r\n        emptyFormat = false;\r\n        const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n        if (!glossaryBtn.classList.contains('disabled-link')) {\r\n          glossaryBtn.classList.add('disabled-link');\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayCapturedFormatting() {\r\n  emptyFormat = false;\r\n  const formatList = document.getElementById(\"format-list\");\r\n  formatList.innerHTML = \"\"; // Clear the list before adding new items\r\n\r\n  for (const [key, value] of Object.entries(capturedFormatting)) {\r\n    if ((key === \"Text Color\" || key === \"Background Color\") && value) {\r\n      formatList.innerHTML += `\r\n        <li><strong>${key}:</strong>${value}\r\n          <span style=\"display:inline-block;width:15px;height:15px;background-color:${value};border:1px solid black;\"></span>\r\n        </li>\r\n      `;\r\n    } else {\r\n      formatList.innerHTML += `<li><strong>${key}:</strong> ${value}</li>`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearCapturedFormatting() {\r\n  capturedFormatting = {}; // Clear the captured formatting object\r\n  const formatDetails = document.getElementById(\"format-details\");\r\n  formatDetails.style.display = 'none';\r\n  // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n  emptyFormat = true;\r\n  const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n  glossaryBtn.classList.remove('disabled-link');\r\n  const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n  CaptureBtn.disabled = true;\r\n\r\n\r\n  const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n  if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n    removeFormatBtn.classList.add('disabled-link');\r\n  }\r\n  console.log(\"Captured formatting cleared.\");\r\n}\r\n\r\nasync function captureFormatting() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      const font = selection.font;\r\n      font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n\r\n      await context.sync();\r\n\r\n      capturedFormatting = {\r\n        Bold: font.bold,\r\n        Italic: font.italic,\r\n        Underline: font.underline,\r\n        Size: font.size,\r\n        \"Background Color\": font.highlightColor,\r\n        \"Font Name\": font.name,\r\n        'Text Color': font.color\r\n      };\r\n\r\n\r\n\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'block';\r\n\r\n      if (capturedFormatting.Bold === null ||\r\n        capturedFormatting.Underline === 'Mixed' ||\r\n        capturedFormatting.Size === null ||\r\n        capturedFormatting[\"Font Name\"] === null ||\r\n        capturedFormatting[\"Background Color\"] === '' ||\r\n        capturedFormatting[\"Text Color\"] === ''\r\n\r\n      ) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error capturing formatting:\", error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function removeOptionsConfirmation() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    } // Check if isTagUpdating is false\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Are you sure you want to remove formatted text ?</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div id=\"format-details\">\r\n              <h5>Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled mb-3\"></ul>\r\n              <small class=\"text-secondary font-italic\" id=\"warning-rem-fmt\"></small>\r\n             \r\n            </div>\r\n               <!-- Buttons for Capture and Empty Format -->\r\n\r\n            <div class=\"mt-3 d-flex justify-content-between\">\r\n              <span id=\"change-ft-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n              <button id=\"clear-ft-btn\" class=\"btn btn-primary px-3\"><i class=\"fa fa-check-circle me-2\"></i>Yes</button>\r\n\r\n            </div>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    displayCapturedFormatting();\r\n\r\n    if (capturedFormatting['Background Color'] === null &&\r\n      capturedFormatting['Text Color'] === '#000000') {\r\n      const warningEle = document.getElementById('warning-rem-fmt').innerHTML = 'Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?'\r\n    }\r\n\r\n    // Event listeners for the buttons\r\n    document.getElementById(\"clear-ft-btn\").addEventListener(\"click\", removeFormattedText);\r\n    document.getElementById(\"change-ft-btn\").addEventListener(\"click\", formatOptionsDisplay);\r\n\r\n  }\r\n}\r\n\r\nasync function removeFormattedText() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n      const iconelement = document.getElementById(`clear-ft-btn`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Yes`;\r\n      const clrBtn = document.getElementById('clear-ft-btn') as HTMLButtonElement;\r\n      clrBtn.disabled = true;\r\n\r\n      const changeBtn = document.getElementById('change-ft-btn') as HTMLButtonElement;\r\n      changeBtn.disabled = true;\r\n      const paragraphs = context.document.body.paragraphs;\r\n      paragraphs.load(\"items\"); // Load paragraphs from the body\r\n\r\n      await context.sync();\r\n\r\n      // Iterate through each paragraph in the document body\r\n      for (const paragraph of paragraphs.items) {\r\n\r\n        // Check if the paragraph contains text\r\n        if (paragraph.text.trim() !== \"\") {\r\n          const textRanges = paragraph.split([\" \"]); // Split paragraph into individual words/segments\r\n          textRanges.load(\"items, font\");\r\n\r\n          await context.sync();\r\n\r\n          for (const range of textRanges.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n\r\n            // Check if the text range matches the captured formatting\r\n            if (\r\n              font.highlightColor === capturedFormatting['Background Color'] &&\r\n              font.color === capturedFormatting['Text Color'] &&\r\n              font.bold === capturedFormatting['Bold'] &&\r\n              font.italic === capturedFormatting['Italic'] &&\r\n              font.size === capturedFormatting['Size'] &&\r\n              font.underline === capturedFormatting['Underline'] &&\r\n              font.name === capturedFormatting['Font Name']\r\n            ) {\r\n              // Clear the range whether it's a full word or part of a word\r\n              font.highlightColor = \"#FFFFFF\"; // Set new background color\r\n              font.color = \"#000000\"; // Set new text color\r\n              font.bold = false; // Reset bold if needed\r\n              font.italic = false; // Reset italic if needed\r\n              font.underline = \"None\";\r\n              paragraph.insertText(\" \", Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n      capturedFormatting = {}; // Clear the captured formatting object\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n      emptyFormat = true;\r\n      isNoFormatTextAvailable = true;\r\n      const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n      glossaryBtn.classList.remove('disabled-link');\r\n      formatOptionsDisplay()\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing formatted text:\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAIHistory(tag) {\r\n  try {\r\n\r\n    const data = await getAiHistory(tag.ID, jwt);\r\n\r\n\r\n    if (data.Status && data.Data) {\r\n      tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n      tag.FilteredReportHeadAIHistoryList = [];\r\n      tag.SourceValueID = tag.ReportHeadAIHistoryList[0].SourceValue;\r\n      const selectedSources = sourceList.filter((list) =>\r\n        tag.SourceValueID.includes(String(list.VectorID))\r\n      );\r\n\r\n      tag.SourceName = selectedSources.map((item) => {\r\n        return item.SourceName;\r\n      });\r\n      tag.Sources = tag.SourceName.join(',');\r\n      tag.TempSourceValue = selectedSources.map((item) => {\r\n        return item.VectorID ? String(item.VectorID) : item.SourceValue;\r\n      });\r\n\r\n\r\n      tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n      });\r\n      return tag.FilteredReportHeadAIHistoryList;\r\n      // Use the data here\r\n    } else {\r\n      console.warn(\"No AI history available.\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendPrompt(tag, prompt) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n\r\n    const iconelement = document.getElementById(`sendPromptButton`);\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`;\r\n\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      ThreadID: tag.ThreadID,\r\n      AssistantID: dataList.AssistantID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      VectorID: dataList.VectorID,\r\n      Selected: 0,\r\n      ID: 0,\r\n      SourceValue: tag.TempSourceValue ? tag.TempSourceValue : []\r\n    };\r\n\r\n    try {\r\n      isPendingResponse = true;\r\n      const data = await addAiHistory(payload, jwt);\r\n\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n        const chat = tag.ReportHeadAIHistoryList[0];\r\n        aiTagList.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n\r\n\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n            currentTag.IsApplied = tag.IsApplied;\r\n\r\n          }\r\n        });\r\n\r\n        availableKeys.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n            currentTag.IsApplied = tag.IsApplied;\r\n\r\n          }\r\n        })\r\n\r\n\r\n\r\n        const appbody = document.getElementById('app-body')\r\n        appbody.innerHTML = await generateCheckboxHistory(tag);\r\n        isPendingResponse = false;\r\n\r\n      }\r\n\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      document.getElementById(`chatInput`).value = '';\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      // sourceListBtn.disabled = false;\r\n\r\n    } catch (error) {\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      console.error('Error sending AI prompt:', error);\r\n    }\r\n  } else {\r\n    console.error('No empty prompt allowed');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Your existing copyText function\r\n\r\n\r\n\r\nasync function logout() {\r\n  if (isGlossaryActive) {\r\n    await removeMatchingContentControls();\r\n  }\r\n  sessionStorage.clear();\r\n  window.location.hash = '#/new';\r\n  initialised = true;\r\n  document.getElementById('logo-header').innerHTML = ``;\r\n  login();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nexport async function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n\r\n      context.load(body, 'text');\r\n      await context.sync();\r\n\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n        context.load(searchResults, 'items');\r\n        await context.sync();\r\n\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n\r\n        for (const item of searchResults.items) {\r\n          if (tag.EditorValue !== \"\" && !tag.IsApplied) {\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = item.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.ComponentKeyDataType === 'TABLE') {\r\n              const range = item.getRange();\r\n              const parser = new DOMParser();\r\n              const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n              const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n              range.delete();\r\n\r\n              for (const node of bodyNodes) {\r\n                if (node.nodeType === Node.TEXT_NODE) {\r\n                  const textContent = node.textContent?.trim();\r\n                  if (textContent) {\r\n                    textContent.split('\\n').forEach(line => {\r\n                      if (line.trim()) {\r\n                        insertLineWithHeadingStyle(range, line);\r\n                      }\r\n                    });\r\n                  }\r\n                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                  const element = node as HTMLElement;\r\n\r\n                  if (element.tagName.toLowerCase() === 'table') {\r\n                    const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                    if (rows.length === 0) {\r\n                      range.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                      continue;\r\n                    }\r\n\r\n                    const maxCols = Math.max(...rows.map(row => {\r\n                      return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                      }, 0);\r\n                    }));\r\n\r\n                    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n                    await context.sync();\r\n\r\n                    const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                    table.style = tableStyle;\r\n                    await context.sync();\r\n                    const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                    rows.forEach((row, rowIndex) => {\r\n                      const cells = Array.from(row.querySelectorAll('td, th'));\r\n                      let cellIndex = 0;\r\n\r\n                      cells.forEach((cell) => {\r\n                        while (rowspanTracker[cellIndex] > 0) {\r\n                          rowspanTracker[cellIndex]--;\r\n                          cellIndex++;\r\n                        }\r\n\r\n                        const cellText = Array.from(cell.childNodes)\r\n                          .map(node => {\r\n                            if (node.nodeType === Node.TEXT_NODE) {\r\n                              return node.textContent?.trim() || '';\r\n                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                              return (node as HTMLElement).innerText.trim();\r\n                            }\r\n                            return '';\r\n                          })\r\n                          .filter(text => text.length > 0)\r\n                          .join(' ');\r\n\r\n                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n\r\n                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                        for (let i = 1; i < colspan; i++) {\r\n                          if (cellIndex + i < maxCols) {\r\n                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                          }\r\n                        }\r\n\r\n                        if (rowspan > 1) {\r\n                          for (let i = 0; i < colspan; i++) {\r\n                            if (cellIndex + i < maxCols) {\r\n                              rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                            }\r\n                          }\r\n                        }\r\n\r\n                        cellIndex += colspan;\r\n                      });\r\n                    });\r\n                  } else {\r\n                    const elementText = element.innerText.trim();\r\n                    if (elementText) {\r\n                      elementText.split('\\n').forEach(line => {\r\n                        if (line.trim()) {\r\n                          insertLineWithHeadingStyle(range, line);\r\n                        }\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              await context.sync();\r\n            } else {\r\n              item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n              await context.sync();\r\n            }\r\n\r\n            const endMarker = item.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n              const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n              bookmarkRange.insertBookmark(bookmarkName);\r\n              console.log(`Bookmark added: ${bookmarkName}`);\r\n              const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n\r\n              afterBookmark.select();\r\n              start.delete();\r\n              end.delete();\r\n              afterBookmark.delete();\r\n              await context.sync();\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction selectResponse(tagIndex, chatIndex) {\r\n  // Handle the response selection logic here\r\n  console.log(`Response selected for tagIndex ${tagIndex}, chatIndex ${chatIndex}`);\r\n}\r\n\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n    loadGlossary()\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n      body.load(\"text\");\r\n      await context.sync(); // Sync to get the text content\r\n\r\n      const bodyText = {\r\n        \"Content\": body.text.replace(/[\\n\\r]/g, ' ')\r\n      };\r\n      try {\r\n\r\n        const data = await fetchGlossaryTemplate(dataList?.ClientID, bodyText, jwt);\r\n\r\n        layTerms = data.Data;\r\n\r\n        if (data.Data.length > 0) {\r\n          glossaryName = data.Data[0].GlossaryTemplate;\r\n          loadGlossary();\r\n        } else {\r\n          document.getElementById('app-body').innerHTML = `\r\n            <p class=\"text-center\">Data not available</p>\r\n          `;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n      }\r\n      // Sort terms by length (longest first)\r\n      layTerms.sort((a, b) => b.ClinicalTerm.length - a.ClinicalTerm.length);\r\n\r\n      const processedTerms = new Set(); // Track added larger terms\r\n\r\n      // Filter out smaller terms if they are included in a larger term\r\n      const filteredTerms = layTerms.filter(term => {\r\n        for (const biggerTerm of processedTerms) {\r\n          if (typeof biggerTerm === 'string' && biggerTerm.includes(term.ClinicalTerm.toLowerCase())) {\r\n            console.log(`Skipping \"${term.ClinicalTerm}\" because it's part of \"${biggerTerm}\"`);\r\n            return false; // Exclude this smaller term\r\n          }\r\n        }\r\n        processedTerms.add(term.ClinicalTerm.toLowerCase());\r\n        return true;\r\n      });\r\n\r\n      filteredGlossaryTerm = filteredTerms;\r\n      await removeMatchingContentControls();\r\n\r\n      const foundRanges = new Map(); // Track words already processed\r\n\r\n      const searchPromises = filteredGlossaryTerm.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      for (const searchResults of searchPromises) {\r\n\r\n        for (const range of searchResults.items) {\r\n\r\n          if (!range || !range.text) {\r\n            console.log(\"Invalid range. Skipping...\");\r\n            continue;\r\n          }\r\n\r\n          // Load existing content controls inside this range\r\n          const font = range.font;\r\n          font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n          range.load(\"contentControls\");\r\n          await context.sync();\r\n\r\n          const existingControl = range.contentControls.items.length > 0;\r\n\r\n          if (existingControl) {\r\n            console.log(`Skipping \"${range.text}\" because it already has a content control.`);\r\n            continue; // Skip if content control is already present\r\n          }\r\n          // Check if we've already processed this term at this range\r\n          if (foundRanges.has(range.text)) {\r\n            console.log(`Skipping duplicate occurrence of \"${range.text}\"`);\r\n            continue;\r\n          }\r\n          // Mark this word as processed\r\n          foundRanges.set(range.text, true);\r\n          // Remove existing content controls if any\r\n          if (range.contentControls && range.contentControls.items.length > 0) {\r\n            console.log(`Removing existing content control from: \"${range.text}\"`);\r\n            for (const control of range.contentControls.items) {\r\n              control.delete(false); // 'false' keeps the text, only removes the control\r\n            }\r\n            await context.sync(); // Ensure deletion is applied before adding a new one\r\n          }\r\n\r\n          try {\r\n            // Insert a new content control\r\n            const contentControl = range.insertContentControl();\r\n            contentControl.title = `${range.text}`;\r\n            if (font.highlightColor !== null) {\r\n              contentControl.tag = `${font.highlightColor}`;\r\n            }\r\n            contentControl.font.highlightColor = \"yellow\"; // Highlight the control\r\n            contentControl.appearance = Word.ContentControlAppearance.boundingBox;\r\n            await context.sync();\r\n          } catch (error) {\r\n            console.error(`Error inserting content control for term \"${range.text}\":`, error);\r\n          }\r\n        }\r\n      }\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      <div class=\"d-flex justify-content-center box-loader\">\r\n       <div class=\"loader\" id=\"loader\"></div></div>\r\n      \r\n`\r\n      const displayElement = document.getElementById('loader');\r\n      displayElement.style.display = 'none';\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', removeMatchingContentControls);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const loader = document.getElementById('loader');\r\n        if (loader) {\r\n          loader.style.display = 'block';\r\n        }\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        for (const searchResults of searchPromises) {\r\n\r\n          for (const range of searchResults.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n            if (\r\n              font.highlightColor !== capturedFormatting['Background Color'] ||\r\n              font.color !== capturedFormatting['Text Color'] ||\r\n              font.bold !== capturedFormatting['Bold'] ||\r\n              font.italic !== capturedFormatting['Italic'] ||\r\n              font.size !== capturedFormatting['Size'] ||\r\n              font.underline !== capturedFormatting['Underline'] ||\r\n              font.name !== capturedFormatting['Font Name']\r\n            ) {\r\n              selectedWords.push(range.text);\r\n            }\r\n\r\n          }\r\n        }\r\n        // searchPromises.forEach(searchResults => {\r\n        //   searchResults.items.forEach(item => {\r\n        //   });\r\n        // });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n    const loader = document.getElementById('loader');\r\n    loader.style.display = 'block';\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm.toLowerCase() === word.toLowerCase()) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n    loader.style.display = 'none';\r\n\r\n  }\r\n}\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  const displayElement = document.getElementById('loader');\r\n  displayElement.style.display = 'block';\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.toLowerCase().includes(clinicalTerm.toLowerCase())) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        for (const item of searchResults.items) {\r\n          // Load the font properties\r\n          item.font.load(['bold', 'italic', 'underline', 'color', 'highlightColor', 'size', 'name']);\r\n          await context.sync();  // Ensure the properties are loaded before accessing them\r\n\r\n          // Insert the layTerm while keeping the formatting\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Apply the original formatting to the new text\r\n          item.font.bold = item.font.bold;\r\n          item.font.italic = item.font.italic;\r\n          item.font.underline = item.font.underline;\r\n          item.font.color = item.font.color;\r\n          item.font.highlightColor = '#c7c7c7';\r\n          item.font.size = item.font.size;\r\n          item.font.name = item.font.name;\r\n        }\r\n\r\n        await context.sync();\r\n        displayElement.style.display = 'none';\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and preserved the original formatting.`);\r\n      } else {\r\n        displayElement.style.display = 'none';\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    displayElement.style.display = 'none';\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function removeMatchingContentControls() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <div class=\"loader\" id=\"loader\"></div>\r\n        <div id=\"highlighted-text\"></div>`;\r\n      const body = context.document.body;\r\n\r\n      // Load all content controls\r\n      const contentControls = body.contentControls;\r\n      contentControls.load(\"items\");\r\n      await context.sync();\r\n\r\n      if (contentControls.items.length === 0) {\r\n        console.log(\"No content controls found.\");\r\n        return;\r\n      }\r\n\r\n      for (const control of contentControls.items) {\r\n        if (control.title && filteredGlossaryTerm.some(term => term.ClinicalTerm.toLowerCase() === control.title.toLowerCase())) {\r\n          const range = control.getRange();\r\n          range.load(\"text\");\r\n          await context.sync();\r\n          if (control.tag && /^#[0-9A-Fa-f]{6}$/.test(control.tag)) {\r\n            range.font.highlightColor = control.tag;\r\n          } else {\r\n            range.font.highlightColor = null\r\n          }\r\n          await context.sync();\r\n          control.delete(true);\r\n        }\r\n      }\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n      `;\r\n\r\n      await context.sync();\r\n      isGlossaryActive = false;\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing content controls:\", error);\r\n  }\r\n}\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nexport async function addGenAITags() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n    let selectedClient = clientList.filter((item) => item.ID === clientId);\r\n\r\n    let sponsorOptions = clientList.map(client => {\r\n      const isSelectedClient = selectedClient.some(selected => selected.ID === client.ID);\r\n      return ` \r\n        <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" value=\"${client.ID}\" id=\"sponsor${client.ID}\" ${isSelectedClient ? 'checked disabled' : ''}>\r\n            <label class=\"form-check-label text-prewrap\" for=\"sponsor${client.ID}\">${client.Name}</label>\r\n          </div>\r\n        </li>\r\n      `;\r\n    }).join('');\r\n\r\n    document.getElementById('app-body').innerHTML = navTabs;\r\n    // Add modal HTML to the DOM \r\n    document.getElementById('add-tag-body').innerHTML = addtagbody(sponsorOptions);\r\n    const promptTemplateElement = document.getElementById('add-prompt-template')\r\n    setupPromptBuilderUI(promptTemplateElement, promptBuilderList)\r\n\r\n\r\n    document.getElementById('tag-tab').addEventListener('click', () => {\r\n      switchToAddTag()\r\n    });\r\n\r\n\r\n    document.getElementById('prompt-tab').addEventListener('click', () => {\r\n      switchToPromptBuilder()\r\n    });\r\n\r\n    //prompt starting\r\n    mentionDropdownFn('prompt', 'mention-dropdown', 'add');\r\n    //prompt end\r\n    const form = document.getElementById('genai-form');\r\n    const promptField = document.getElementById('prompt');\r\n\r\n    const nameField = document.getElementById('name');\r\n    const descriptionField = document.getElementById('description');\r\n    const saveGloballyCheckbox = document.getElementById('saveGlobally');\r\n    const availableForAllCheckbox = document.getElementById('isAvailableForAll');\r\n    const sponsorDropdownButton = document.getElementById('sponsorDropdown');\r\n    const sponsorDropdownItems = document.querySelectorAll('.dropdown-item .form-check-input');\r\n\r\n    document.getElementById('cancel-btn-gen-ai').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        loadHomepage(availableKeys)\r\n      }\r\n    });\r\n\r\n    // Check if elements exist\r\n    if (form && nameField && promptField && sponsorDropdownItems.length > 0) {\r\n      const updateDropdownLabel = () => {\r\n        if (availableForAllCheckbox.checked) {\r\n          sponsorDropdownButton.textContent = clientList.map(client => client.Name).join(\", \");\r\n        } else {\r\n          const selectedOptions = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => cb.parentElement.textContent.trim());\r\n          sponsorDropdownButton.textContent = selectedOptions.length ? selectedOptions.join(\", \") : \"Select Sponsors\";\r\n        }\r\n      };\r\n      // Form validation logic on submit\r\n      form.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n\r\n        // Reset previous validation errors\r\n        form.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));\r\n\r\n        let valid = true;\r\n\r\n        if (!(nameField as HTMLInputElement).value.trim()) {\r\n          nameField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (!(promptField as HTMLInputElement).value.trim()) {\r\n          promptField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (valid) {\r\n          // Prepare object to pass to createTextGenTag\r\n          const selectedSponsors = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => {\r\n              const client = clientList.find(client => client.ID == cb.value);\r\n              return client; // Collect the entire client object\r\n            });\r\n\r\n          const isAvailableForAll = availableForAllCheckbox.checked;\r\n          const isSaveGlobally = saveGloballyCheckbox.checked;\r\n          const aigroup = dataList.Group.find(element => element.DisplayName === 'AIGroup');\r\n          const formData = {\r\n            DisplayName: nameField.value.trim(),\r\n            Prompt: promptField.value.trim(),\r\n            Description: descriptionField.value.trim(),\r\n            GroupKeyClient: selectedSponsors, // Array of selected sponsor objects\r\n            AllClient: isAvailableForAll ? 1 : 0,\r\n            SaveGlobally: isSaveGlobally,\r\n            UserDefined: '1',\r\n            ComponentKeyDataTypeID: '1',\r\n            ComponentKeyDataAccessID: '3',\r\n            AIFlag: 1,\r\n            DocumentTypeID: dataList.DocumentTypeID,\r\n            ReportHeadID: dataList.ID,\r\n            SourceTypeID: '',\r\n            ReportHeadGroupID: aigroup.ID,\r\n            ReportHeadSourceID: ''\r\n          };\r\n\r\n          await createTextGenTag(formData);\r\n        }\r\n      });\r\n\r\n\r\n      const checkAndDisableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          if (!checkbox.disabled) {\r\n            checkbox.checked = true;\r\n            checkbox.disabled = true;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Function to enable sponsors without unchecking them\r\n      const enableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          const isSelectedClient = selectedClient.some(selected => selected.ID === parseInt(checkbox.value));\r\n          if (!isSelectedClient) {\r\n            checkbox.disabled = false;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Event listener for \"Save Globally\" checkbox\r\n\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n\r\n      saveGloballyCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n          if (this.checked) {\r\n            availableForAllCheckbox.disabled = false;\r\n            sponsorDropdownButton.disabled = false;\r\n          } else {\r\n            enableSponsors();\r\n            availableForAllCheckbox.checked = false;\r\n            availableForAllCheckbox.disabled = true;\r\n            sponsorDropdownButton.disabled = true;\r\n            sponsorDropdownItems.forEach(checkbox => {\r\n              if (!checkbox.disabled) {\r\n                checkbox.checked = false;\r\n                checkbox.disabled = false;\r\n              }\r\n            });\r\n            updateDropdownLabel();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n      availableForAllCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n\r\n          if (this.checked) {\r\n            checkAndDisableSponsors();\r\n          } else {\r\n            enableSponsors();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Add event listener to prevent dropdown close on item selection\r\n      document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', function (event) {\r\n          {\r\n            event.stopPropagation(); // Prevent dropdown from closing\r\n            const checkbox = this.querySelector('.form-check-input');\r\n            if (checkbox) {\r\n\r\n\r\n              if (checkbox.id === 'selectAll') {\r\n                const isChecked = checkbox.checked;\r\n                sponsorDropdownItems.forEach(cb => {\r\n                  if (!cb.disabled) cb.checked = isChecked;\r\n                });\r\n              }\r\n              updateDropdownLabel();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Initial label update\r\n      updateDropdownLabel();\r\n\r\n\r\n      // Clear validation errors when user types\r\n      [nameField, promptField].forEach(field => {\r\n        field.addEventListener('input', function () {\r\n          if (this.classList.contains('is-invalid') && this.value.trim()) {\r\n            this.classList.remove('is-invalid');\r\n          }\r\n          if (nameField) {\r\n            const errorDiv = document.getElementById('submition-error');\r\n            errorDiv.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('Required elements are missing or not rendered yet.');\r\n    }\r\n  }\r\n}\r\n\r\nexport async function customizeTable() {\r\n  const container = document.getElementById('confirmation-popup');\r\n  if (!container) return;\r\n\r\n  container.innerHTML = customizeTablePopup(tableStyle);\r\n\r\n  const cancelBtn = document.getElementById('confirmation-popup-cancel');\r\n  const okBtn = document.getElementById('confirmation-popup-confirm');\r\n  const dropdown = document.getElementById('confirmation-popup-dropdown') as HTMLSelectElement;\r\n  const tablePreview = document.getElementById('confirmation-popup-table-preview') as HTMLTableElement;\r\n\r\n  const applyStyle = () => {\r\n    if (!dropdown || !tablePreview) return;\r\n\r\n    const selectedStyle = dropdown.value;\r\n    const styleObj = wordTableStyles.find(s => s.style === selectedStyle);\r\n\r\n    if (styleObj) {\r\n      // Apply main table style\r\n      if (styleObj.tableClass) {\r\n        tablePreview.style.cssText = styleObj.tableClass;\r\n      }\r\n\r\n      // Apply row style to odd rows (1,3,5...)\r\n      if (styleObj.rowClass) {\r\n        Array.from(tablePreview.rows).forEach((row, index) => {\r\n          if (index % 2 === 1) { // 0-based index => 0,2,4 = 1st,3rd,5th row\r\n            (row as HTMLTableRowElement).style.cssText = styleObj.rowClass!;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initial preview\r\n  applyStyle();\r\n\r\n  // Live preview on dropdown change\r\n  dropdown?.addEventListener('change', applyStyle);\r\n\r\n  if (cancelBtn) cancelBtn.addEventListener('click', () => (container.innerHTML = ''));\r\n\r\n  if (okBtn && dropdown) {\r\n    okBtn.addEventListener('click', () => {\r\n      tableStyle = dropdown.value; // update current style\r\n      localStorage.setItem('tableStyle', tableStyle)\r\n      container.innerHTML = '';\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nasync function createTextGenTag(payload) {\r\n  try {\r\n    const iconelement = document.getElementById(`text-gen-save`);\r\n    const cancelBtnGenAi = document.getElementById('cancel-btn-gen-ai');\r\n\r\n\r\n    (cancelBtnGenAi as HTMLButtonElement).disabled = true;\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Save`;\r\n    (iconelement as HTMLButtonElement).disabled = true;\r\n    isPendingResponse = true;\r\n\r\n    const data = await addGroupKey(payload, jwt);\r\n    isPendingResponse = false;\r\n\r\n    if (data['Data'] && data['Status']) {\r\n      fetchDocument('AIpanel');\r\n      toaster('Saved successfully', 'success');\r\n    } else {\r\n      (cancelBtnGenAi as HTMLButtonElement).disabled = false;\r\n      (iconelement as HTMLButtonElement).disabled = false;\r\n      iconelement.innerHTML = `<i class=\"fa fa-check-circle me-2\"></i>Save`;\r\n      toaster('Something went wrong', 'error');\r\n      // showAddTagError(data['Data']);\r\n    }\r\n\r\n  } catch (error) {\r\n    toaster('Something went wrong', 'error');\r\n    console.error('Error creating text generation tag:', error);\r\n  }\r\n}\r\n\r\n\r\nexport function mentionDropdownFn(textareaId, DropdownId, action) {\r\n  const filterMentions = (query) => {\r\n    // Assuming availableKeys is an array of objects with DisplayName and EditorValue properties\r\n    const filtered = availableKeys.filter(item => item.AIFlag === 0).filter(item =>\r\n      item.DisplayName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    return filtered;\r\n  };\r\n  let highlightedIndex = -1;\r\n\r\n  const promptField = document.getElementById(`${textareaId}`);\r\n  const mentionDropdown = document.getElementById(`${DropdownId}`);\r\n  if (promptField) {\r\n\r\n    // Handle input events on prompt field for mentions\r\n    promptField.addEventListener('input', (e) => {\r\n      const cursorPosition = promptField.selectionStart;\r\n      const textBeforeCursor = promptField.value.slice(0, cursorPosition);\r\n      const lastHashtag = textBeforeCursor.lastIndexOf('#');\r\n      if (lastHashtag !== -1) {\r\n        const query = textBeforeCursor.slice(lastHashtag + 1).trim();\r\n        if (query.length > 0) {\r\n          const mentions = filterMentions(query);\r\n\r\n          if (mentions.length > 0) {\r\n            mentionDropdown.innerHTML = mentions.map(item => {\r\n              let editorValue = '';\r\n              if (action === 'add') {\r\n                editorValue = `#${item.DisplayName}#`;\r\n              } else {\r\n                editorValue = item.EditorValue || `#${item.DisplayName}#`;\r\n              }\r\n\r\n              return `<li class=\"dropdown-item\" data-editor-value=\"${editorValue}\">${item.DisplayName}</li>`;\r\n            }).join('');\r\n\r\n            // Get the position of the textarea and place the dropdown above it\r\n            const textareaRect = promptField.getBoundingClientRect();\r\n            mentionDropdown.style.left = `${textareaRect.left}px`;\r\n            mentionDropdown.style.bottom = `75px`; // Position above the textarea\r\n            mentionDropdown.style.display = 'block';\r\n          } else {\r\n            mentionDropdown.style.display = 'none';\r\n          }\r\n        } else {\r\n          mentionDropdown.style.display = 'none';\r\n        }\r\n      } else {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n\r\n    });\r\n\r\n    // Handle keyboard navigation in the dropdown\r\n    promptField.addEventListener('keydown', (e) => {\r\n      const items = document.querySelectorAll(`#${DropdownId} .dropdown-item`);\r\n      const totalItems = items.length;\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight down and wrap around to the top if at the end\r\n        if (highlightedIndex < totalItems - 1) {\r\n          highlightedIndex++;\r\n        } else {\r\n          highlightedIndex = 0; // Wrap to the first item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'ArrowUp') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight up and wrap around to the bottom if at the top\r\n        if (highlightedIndex > 0) {\r\n          highlightedIndex--;\r\n        } else {\r\n          highlightedIndex = totalItems - 1; // Wrap to the last item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'Enter' && highlightedIndex !== -1) {\r\n        // Select the highlighted item\r\n        const selectedItem = items[highlightedIndex];\r\n        if (selectedItem) {\r\n          selectMention(selectedItem.getAttribute('data-editor-value'));\r\n          mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n          e.preventDefault();  // Prevent form submission on Enter key\r\n        }\r\n      }\r\n    });\r\n\r\n    // Function to highlight the selected item\r\n    function updateHighlightedItem(id) {\r\n      const items = document.querySelectorAll(`#${id} .dropdown-item`);\r\n      const dropdown = document.getElementById(`${id}`);\r\n      const totalItems = items.length;\r\n\r\n      // Remove the 'active' class from all items\r\n      items.forEach(item => item.classList.remove('active'));\r\n\r\n      // Add the 'active' class to the currently highlighted item\r\n      if (highlightedIndex >= 0 && highlightedIndex < totalItems) {\r\n        const highlightedItem = items[highlightedIndex];\r\n        highlightedItem.classList.add('active');\r\n\r\n        // Ensure the highlighted item is visible within the dropdown\r\n        highlightedItem.scrollIntoView({\r\n          behavior: 'smooth',    // Smooth scroll\r\n          block: 'nearest'      // Scroll only if necessary\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Handle selecting an item from the dropdown via mouse click\r\n    mentionDropdown.addEventListener('click', (e) => {\r\n      if (e.target && e.target.matches('li')) {\r\n        const editorValue = e.target.getAttribute('data-editor-value');\r\n        selectMention(editorValue);\r\n        mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n      }\r\n    });\r\n\r\n    // Function to insert the selected mention into the prompt field\r\n    const selectMention = (editorValue) => {\r\n      const textarea = document.getElementById(`${textareaId}`);\r\n      const currentValue = textarea.value;\r\n      const cursorPosition = textarea.selectionStart;\r\n\r\n      const textBefore = currentValue.slice(0, cursorPosition);\r\n      const textAfter = currentValue.slice(cursorPosition);\r\n\r\n      const lastHashPosition = textBefore.lastIndexOf('#');\r\n      const updatedTextBefore = textBefore.slice(0, lastHashPosition); // Removing '#' symbol\r\n\r\n      textarea.value = `${updatedTextBefore}${editorValue}${textAfter}`;\r\n      const newCursorPosition = updatedTextBefore.length + editorValue.length;\r\n      textarea.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    };\r\n\r\n    // Hide the dropdown if clicked outside\r\n    document.addEventListener('click', (e) => {\r\n      if (!mentionDropdown.contains(e.target) && e.target !== promptField) {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n        const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n        for (const node of bodyNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const textContent = node.textContent?.trim();\r\n            if (textContent) {\r\n              textContent.split('\\n').forEach(line => {\r\n                if (line.trim()) {\r\n                  insertLineWithHeadingStyle(selection, line);\r\n                }\r\n              });\r\n            }\r\n          } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n            const element = node as HTMLElement;\r\n\r\n            if (element.tagName.toLowerCase() === 'table') {\r\n              const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n              if (rows.length === 0) {\r\n                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                continue;\r\n              }\r\n\r\n              const maxCols = Math.max(...rows.map(row => {\r\n                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                  return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                }, 0);\r\n              }));\r\n\r\n              const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n              await context.sync();\r\n\r\n              const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n              table.style = tableStyle;  // Apply built-in Word table style\r\n\r\n              await context.sync();\r\n\r\n              const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n              rows.forEach((row, rowIndex) => {\r\n                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                let cellIndex = 0;\r\n\r\n                cells.forEach((cell) => {\r\n                  while (rowspanTracker[cellIndex] > 0) {\r\n                    rowspanTracker[cellIndex]--;\r\n                    cellIndex++;\r\n                  }\r\n\r\n                  const cellText = Array.from(cell.childNodes)\r\n                    .map(node => {\r\n                      if (node.nodeType === Node.TEXT_NODE) {\r\n                        return node.textContent?.trim() || '';\r\n                      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        return (node as HTMLElement).innerText.trim();\r\n                      }\r\n                      return '';\r\n                    })\r\n                    .filter(text => text.length > 0)\r\n                    .join(' ');\r\n\r\n                  const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                  const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                  // if (rowIndex === 0) {\r\n                  //   const cell = table.getCell(rowIndex, cellIndex);\r\n                  //   const paragraph = cell.body.paragraphs.getFirst();\r\n                  //   paragraph.font.bold = true;\r\n                  //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                  // }\r\n                  table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                  for (let i = 1; i < colspan; i++) {\r\n                    if (cellIndex + i < maxCols) {\r\n                      table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                    }\r\n                  }\r\n\r\n                  if (rowspan > 1) {\r\n                    for (let i = 0; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellIndex += colspan;\r\n                });\r\n              });\r\n            } else {\r\n              const elementText = element.innerText.trim();\r\n              if (elementText) {\r\n                elementText.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        if (word.EditorValue === '' || word.IsApplied) {\r\n          selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n        } else {\r\n          let content = removeQuotes(word.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\nfunction showAddTagError(message) {\r\n  const errorDiv = document.getElementById('submition-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction transformDocumentName(value: string): string {\r\n  if (!value || value.trim() === '') {\r\n    return value; // Return the input value unchanged\r\n  }\r\n\r\n  const parts = value.split('_');\r\n  if (parts.length <= 1) {\r\n    return value; // Return the input value unchanged if no underscores are present\r\n  }\r\n\r\n  return parts.slice(1).join('_').replace(/%20/g, ' ').replace(/%25/g, '%');\r\n}\r\n\r\n\r\n\r\nexport function createMultiSelectDropdown(tag) {\r\n  const isDark = theme === 'Dark';\r\n  const btnClass = isDark ? 'btn-dark text-light border-0' : 'btn-light text-dark border';\r\n  const dropdownMenuClass = isDark ? 'bg-dark text-light border-light' : 'bg-white text-dark border';\r\n  const itemClass = isDark ? 'bg-dark text-light' : 'bg-white text-dark';\r\n\r\n  // Group sources by SourceType\r\n  const groupedSources = sourceList.reduce((groups, source) => {\r\n    if (!groups[source.SourceType]) groups[source.SourceType] = [];\r\n    groups[source.SourceType].push(source);\r\n    return groups;\r\n  }, {});\r\n\r\n  const multiSelectHTML = `\r\n  <div class='p-3 w-100'>\r\n    <div class=\"mb-3\">\r\n      <label for=\"source-select\" class=\"form-label\"><span class=\"text-danger\">*</span> Select Sources</label>\r\n      <div class=\"dropdown w-100\">\r\n        <button \r\n          class=\"btn ${btnClass} w-100 text-start d-flex justify-content-between align-items-start dropdown-toggle dropdown-toggle-sources\" \r\n          type=\"button\" \r\n          id=\"sourceDropdown\" \r\n          data-bs-toggle=\"dropdown\" \r\n          aria-expanded=\"false\">\r\n          <span id=\"sourceDropdownLabel\" class='sourceDropdownLabel'></span>\r\n          <span class=\"dropdown-toggle-icon dropdown-toggle-icon-s\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu ${dropdownMenuClass} w-100 p-2\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 10000; max-height: 300px; overflow-y: auto;\">\r\n          \r\n          <!-- Select All -->\r\n          <li class=\"dropdown-item p-2 ${itemClass}\" data-checkbox-id=\"selectAll\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n              <label class=\"form-check-label w-100\" for=\"selectAll\">Select All</label>\r\n            </div>\r\n          </li>\r\n\r\n          <!-- Grouped Sources -->\r\n          ${Object.keys(groupedSources)\r\n      .map((group, groupIndex) => {\r\n        const groupItems = groupedSources[group]\r\n          .map(\r\n            (source, index) => `\r\n                  <li class=\"dropdown-item ps-4 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"source-${groupIndex}-${index}\">\r\n                    <div class=\"form-check\">\r\n                      <input class=\"form-check-input source-checkbox\" type=\"checkbox\" value=\"${source.SourceName}\" id=\"source-${groupIndex}-${index}\">\r\n                      <label class=\"form-check-label w-100 text-prewrap\" for=\"source-${groupIndex}-${index}\">${source.SourceName}</label>\r\n                    </div>\r\n                  </li>\r\n                `\r\n          )\r\n          .join('');\r\n\r\n        return `\r\n                <!-- Group Header -->\r\n                <li class=\"dropdown-item p-2 ${itemClass}\" data-group-id=\"group-${groupIndex}\">\r\n                  <div class=\"form-check\">\r\n                    <input class=\"form-check-input group-checkbox\" type=\"checkbox\" value=\"${group}\" id=\"group-${groupIndex}\">\r\n                    <label class=\"form-check-label fw-bold\" for=\"group-${groupIndex}\">${group}</label>\r\n                  </div>\r\n                </li>\r\n                ${groupItems}\r\n              `;\r\n      })\r\n      .join('')}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-3 d-flex justify-content-between\">\r\n      <span id=\"cancel-src-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n      <button id=\"ok-src-btn\" class=\"btn btn-primary\">Save</button>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  const accordionBody = document.getElementById(`chatFooter`);\r\n  accordionBody.innerHTML = multiSelectHTML;\r\n\r\n  let selectedSources = [];\r\n\r\n  const selectAllCheckbox = document.getElementById(`selectAll`);\r\n  const groupCheckboxes = document.querySelectorAll(`.group-checkbox`);\r\n  const individualCheckboxes = document.querySelectorAll(`.source-checkbox`);\r\n  const sourceDropdownLabel = document.getElementById(`sourceDropdownLabel`);\r\n\r\n  function updateLabel() {\r\n    sourceDropdownLabel.innerText = selectedSources.length > 0 ? selectedSources.join(', ') : ' ';\r\n  }\r\n\r\n  // Select All logic\r\n  selectAllCheckbox.addEventListener(\"change\", function () {\r\n    const checked = this.checked;\r\n    groupCheckboxes.forEach(cb => cb.checked = checked);\r\n    individualCheckboxes.forEach(cb => {\r\n      cb.checked = checked;\r\n      if (checked && !selectedSources.includes(cb.value)) {\r\n        selectedSources.push(cb.value);\r\n      }\r\n      if (!checked) {\r\n        selectedSources = [];\r\n      }\r\n    });\r\n    updateLabel();\r\n  });\r\n\r\n  // Group checkbox logic\r\n  groupCheckboxes.forEach(groupCb => {\r\n    groupCb.addEventListener(\"change\", function () {\r\n      const groupIndex = this.id.split('-')[1];\r\n      const groupItems = document.querySelectorAll(`[data-checkbox-id^=\"source-${groupIndex}-\"] .source-checkbox`);\r\n\r\n      groupItems.forEach(cb => {\r\n        cb.checked = this.checked;\r\n        if (this.checked && !selectedSources.includes(cb.value)) {\r\n          selectedSources.push(cb.value);\r\n        }\r\n        if (!this.checked) {\r\n          selectedSources = selectedSources.filter(s => s !== cb.value);\r\n        }\r\n      });\r\n\r\n      // Update Select All state\r\n      selectAllCheckbox.checked = Array.from(individualCheckboxes).every(child => child.checked);\r\n      updateLabel();\r\n    });\r\n  });\r\n\r\n  // Individual checkbox logic\r\n  individualCheckboxes.forEach(cb => {\r\n    cb.addEventListener(\"change\", function () {\r\n      if (cb.checked) {\r\n        if (!selectedSources.includes(cb.value)) selectedSources.push(cb.value);\r\n      } else {\r\n        selectedSources = selectedSources.filter(s => s !== cb.value);\r\n      }\r\n\r\n      // Update parent group checkbox\r\n      const groupIndex = cb.id.split(\"-\")[1];\r\n      const groupItems = document.querySelectorAll(`[data-checkbox-id^=\"source-${groupIndex}-\"] .source-checkbox`);\r\n      const groupCheckbox = document.getElementById(`group-${groupIndex}`);\r\n      groupCheckbox.checked = Array.from(groupItems).every(child => child.checked);\r\n\r\n      // Update Select All checkbox\r\n      selectAllCheckbox.checked = Array.from(individualCheckboxes).every(child => child.checked);\r\n\r\n      updateLabel();\r\n    });\r\n  });\r\n\r\n  // Initialize with pre-selected sources\r\n  if (tag.Sources && tag.Sources.length > 0) {\r\n    individualCheckboxes.forEach(cb => {\r\n      if (tag.Sources.includes(cb.value)) {\r\n        cb.checked = true;\r\n        selectedSources.push(cb.value);\r\n      }\r\n    });\r\n\r\n    // Update group checkboxes\r\n    groupCheckboxes.forEach(groupCb => {\r\n      const groupIndex = groupCb.id.split(\"-\")[1];\r\n      const groupItems = document.querySelectorAll(`[data-checkbox-id^=\"source-${groupIndex}-\"] .source-checkbox`);\r\n      groupCb.checked = Array.from(groupItems).every(child => child.checked);\r\n    });\r\n\r\n    // Update Select All\r\n    selectAllCheckbox.checked = Array.from(individualCheckboxes).every(child => child.checked);\r\n    updateLabel();\r\n  }\r\n\r\n  // Save\r\n  document.getElementById(`ok-src-btn`).addEventListener(\"click\", function () {\r\n    tag.Sources = [...selectedSources];\r\n    const receivedEntry = sourceList.filter(source => selectedSources.includes(source.SourceName));\r\n    tag.TempSourceValue = receivedEntry.map((item) => {\r\n      return item.VectorID ? String(item.VectorID) : item.SourceValue;\r\n    });\r\n\r\n    tag.SourceName = receivedEntry.map((item) => {\r\n      return item.SourceName;\r\n    });\r\n\r\n    tag.SourceValueID = receivedEntry.map((item) => {\r\n      return String(item.VectorID);\r\n    });\r\n\r\n    tag.SourceValue = receivedEntry\r\n      .map(source => source.SourceValue);\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n\r\n  // Cancel\r\n  document.getElementById(`cancel-src-btn`).addEventListener(\"click\", function () {\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function loadPromptTemplates() {\r\n  try {\r\n    const data = await getAllPromptTemplates(jwt);\r\n    if (data.Status && data.Data) {\r\n      promptBuilderList = data.Data;\r\n    }\r\n    // Do something with the data\r\n  } catch (error) {\r\n    console.error('Error fetching prompt templates:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function logBookmarksInSelection() {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n\r\n    // Get bookmarks in the selection\r\n    let bookmarks = range.getBookmarks(); // Returns ClientResult<string[]>\r\n\r\n    await context.sync(); // Ensure bookmarks are retrieved\r\n    if (bookmarks.value.length > 0) {\r\n      selectedNames = []\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n      }\r\n      bookmarks.value.forEach((bookmarkName) => {\r\n        let processedName = bookmarkName.split(\"_Split_\")[0];\r\n        processedName = processedName.replace(/_/g, \" \");\r\n        selectedNames.push(processedName)\r\n        const container = document.getElementById('tags-in-selected-text');\r\n        if (container) {\r\n          renderSelectedTags(selectedNames, availableKeys)// Trigger function when selection changes\r\n        }\r\n      });\r\n    } else {\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-block');\r\n        badgeWrapper.classList.add('d-none');\r\n      }\r\n    }\r\n  });\r\n}\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","baseUrl","async","updatePromptTemplate","payload","jwt","response","fetch","method","headers","body","JSON","stringify","ok","json","wordTableStyles","name","style","tableClass","rowClass","toaster","message","type","getElementById","innerHTML","setTimeout","navTabs","insertLineWithHeadingStyle","range","line","Word","run","text","startsWith","substring","trim","paragraph","insertParagraph","InsertLocation","before","regex","match","lastIndex","exec","index","insertText","end","content","bold","italic","underline","formattedRange","font","UnderlineType","single","none","context","sync","removeQuotes","value","copyText","tempTextArea","createElement","appendChild","select","execCommand","removeChild","switchToAddTag","querySelector","classList","remove","add","updateEditorFinalTable","data","tables","parsedContent","parse","push","jsonToHtmlTable","error","console","tableIndex","jsonData","Array","isArray","Set","rows","flattenObject","prefix","result","keys","forEach","newKey","map","item","entries","k","v","join","flattenedItem","table","header","row","chatfooter","tag","theme","Sources","renderSelectedTags","selectedNames","availableKeys","badgeWrapper","toLowerCase","lowerName","find","aiTag","mention","AIFlag","ID","DisplayName","badge","className","cursor","addEventListener","displayName","bookmarks","getSelection","getBookmarks","targetBookmarkName","bookmark","split","getBookmarkRangeOrNullObject","load","isNullObject","selectMatchingBookmarkFromSelection","appBody","generateCheckboxHistory","then","html","applyThemeClasses","isDark","isLight","safeApplyClass","selector","darkClasses","lightClasses","elements","querySelectorAll","darkClassList","lightClassList","elem","swicthThemeIcon","icon","sessionStorage","setItem","loadHomepage","searchBoxClass","searchBox","suggestionList","updateSuggestions","searchTerm","replaceChildren","filteredMentions","filter","includes","nonAITags","aiTags","createSection","labelText","mentions","isAISection","themeClasses","itemClass","labelClass","label","textContent","listItem","onclick","catch","word","selection","newSelection","doc","DOMParser","parseFromString","EditorValue","bodyNodes","from","childNodes","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","element","tagName","maxCols","Math","max","reduce","sum","cell","parseInt","getAttribute","insertTable","after","tableStyle","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","innerText","colspan","rowspan","getCell","elementText","IsApplied","nextLineParagraph","replaceMention","ComponentKeyDataType","debounceTimeout","clearTimeout","isPendingResponse","addGenAITags","customizeTable","applyAITagFn","FilteredReportHeadAIHistoryList","fetchAIHistory","history","closeBtnClass","closeBar","chatBody","chatList","promptclass","globalPromptUpdate","UserRole","UserRoleEntityAccessList","UserRoleEntity","chat","includeSaveIcon","UserRoleAccessID","includeReferenceIcon","Evidences","Prompt","Selected","Response","generateChatHistoryHtml","chatFooterHtml","initializeAIHistoryEvents","textareavalue","chatInput","changeSourceButton","disabled","container","Confirmationpopup","setAttribute","updatedTag","sources","SourceValue","sourceList","source","Number","VectorID","popupData","Data","Name","UserValue","selectedData","FileName","PageNumber","Sentence","DataModalPopup","checkbox","isChecked","event","target","checked","_","otherIndex","otherCheckbox","responseContainer","updateAiHistory","ReportHeadAIHistoryList","historyList","unshift","finalResponse","FormattedResponse","currentlySelected","some","currentTag","isTable","aiTagList","err","bookmarkName","Date","getTime","markers","paragraphs","start","items","getRange","expandTo","insertBookmark","log","afterBookmark","delete","insertTagPrompt","textareaValue","sendPrompt","createMultiSelectDropdown","mentionDropdownFn","filteredGlossaryTerm","storedUrl","documentID","organizationName","initialised","promptBuilderList","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","capturedFormatting","emptyFormat","isNoFormatTextAvailable","clientId","userId","clientList","currentYear","getFullYear","login","sessionToken","getItem","localStorage","loadLoginPage","toggle","handleLogin","preventDefault","organization","username","password","toLocaleLowerCase","ClientName","Username","Password","loginUser","Status","ResponseStatus","Token","showLoginError","errorDiv","display","fetchDocument","action","getReportById","logoheader","SourceTypeList","SourceName","decodeURIComponent","transformDocumentName","ClientID","aiGroup","Group","GroupKey","GroupKeyAll","InitialTable","getAllClients","warn","fetchClients","getAllPromptTemplates","loadPromptTemplates","removeMatchingContentControls","loadGlossary","fetchGlossary","formatOptionsDisplay","htmlBody","displayCapturedFormatting","removeFormattedText","removeOptionsConfirmation","clear","logout","glossaryBtn","contains","clearCapturedFormatting","Bold","Underline","Size","removeFormatBtn","captureFormatting","emptyFormatCheckbox","formatList","Italic","size","highlightColor","color","textRanges","tagId","getAiHistory","SourceValueID","selectedSources","list","TempSourceValue","prompt","iconelement","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","ThreadID","AssistantID","Container","PromptType","addAiHistory","searchResults","search","matchCase","matchWholeWord","applyglossary","bodyText","fetchGlossaryTemplate","GlossaryTemplate","sort","ClinicalTerm","processedTerms","filteredTerms","term","biggerTerm","foundRanges","Map","searchPromises","contentControls","has","set","control","contentControl","insertContentControl","title","appearance","ContentControlAppearance","boundingBox","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","loader","selectedWords","words","displayElement","groupedTerms","LayTerm","clinicalTerm","mainBox","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","selectedClient","sponsorOptions","client","isSelectedClient","selected","addtagbody","preview","templateText","fieldsList","templateSelect","applyBtn","resetBtn","previewDiv","fieldsContainer","previewContainer","templateError","replaceKeywordsManually","keywordMap","field","id","Label","keyword","HTMLInputElement","HTMLSelectElement","insertValue","RegExp","option","toString","templateId","getPromptTemplateById","Template","div","Type","input","PromptTemplateOptionList","opt","Text","Option","selectedIndex","promptTextarea","setupPromptBuilderUI","form","promptField","nameField","descriptionField","saveGloballyCheckbox","availableForAllCheckbox","sponsorDropdownButton","sponsorDropdownItems","updateDropdownLabel","selectedOptions","cb","parentElement","valid","selectedSponsors","isAvailableForAll","isSaveGlobally","aigroup","formData","Description","GroupKeyClient","AllClient","SaveGlobally","UserDefined","ComponentKeyDataTypeID","ComponentKeyDataAccessID","DocumentTypeID","SourceTypeID","ReportHeadGroupID","ReportHeadSourceID","cancelBtnGenAi","addGroupKey","createTextGenTag","checkAndDisableSponsors","enableSponsors","stopPropagation","selectedValue","popupClass","customizeTablePopup","cancelBtn","okBtn","dropdown","tablePreview","applyStyle","selectedStyle","styleObj","s","cssText","textareaId","DropdownId","highlightedIndex","mentionDropdown","updateHighlightedItem","totalItems","highlightedItem","scrollIntoView","behavior","block","cursorPosition","selectionStart","textBeforeCursor","slice","lastHashtag","lastIndexOf","query","filterMentions","editorValue","textareaRect","getBoundingClientRect","left","bottom","selectedItem","selectMention","matches","textarea","currentValue","textBefore","textAfter","lastHashPosition","updatedTextBefore","newCursorPosition","setSelectionRange","parts","btnClass","dropdownMenuClass","groupedSources","groups","SourceType","multiSelectHTML","group","groupIndex","groupItems","accordionBody","selectAllCheckbox","groupCheckboxes","individualCheckboxes","sourceDropdownLabel","updateLabel","groupCb","every","child","receivedEntry","onReady","info","host","HostType","properties","customProperties","property","orgName","retrieveDocumentProperties","processedName","logBookmarksInSelection","URL"],"sourceRoot":""}