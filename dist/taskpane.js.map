{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/index.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/data.ts","webpack://office-addin-taskpane/./src/taskpane/api.ts","webpack://office-addin-taskpane/./src/taskpane/functions.ts","webpack://office-addin-taskpane/./src/taskpane/components/home.ts","webpack://office-addin-taskpane/./src/taskpane/components/bodyelements.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./css/bootstrap3.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Link addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div id=\\\"header-nav\\\"> <div class=\\\"logo-header d-flex w-100 justify-content-between align-items-center bg-light\\\" id=\\\"logo-header\\\"> </div> </div> <main id=\\\"app-body\\\" class=\\\"d-block mh-34\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> <div id=\\\"footer\\\" class=\\\"py-2 text-center footer\\\"> </div> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const dataUrl='https://plsdevapp.azurewebsites.net'\r\nconst storeUrl='https://akhil-pws.github.io/ApplyGlossaryWordPane'\r\nconst versionLink='2.0.1'\r\nexport {dataUrl,storeUrl,versionLink};","import { dataUrl } from \"./data\";\r\n\r\n// api.ts\r\nconst baseUrl = dataUrl // Set your actual base URL\r\n\r\nexport async function loginUser(organization: string, username: string, password: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/user/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      ClientName: organization,\r\n      Username: username,\r\n      Password: password\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n// api.ts\r\n\r\nexport async function getReportById(documentID: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/id/${documentID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getAllClients(userId: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/client/all/${userId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n\r\n\r\n  export async function getAiHistory(tagId: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/${tagId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n  export async function updateGroupKey(tag: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/head/groupkey`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(tag)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function addAiHistory(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function updateAiHistory(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/update`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n  export async function fetchGlossaryTemplate(clientId: string, bodyText: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/glossary-template/client-id/${clientId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(bodyText)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function addGroupKey(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/group-key/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getAllPromptTemplates(jwt): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/prompt-template/all`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getPromptTemplateById(id: string,jwt): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/prompt-template/${id}/data`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  ","import { generateCheckboxHistory } from \"./components/home\";\r\nimport { theme } from \"./taskpane\";\r\n\r\nexport async function insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  await Word.run(async (context) => {\r\n    let style = \"Normal\";\r\n    let text = line;\r\n\r\n    if (line.startsWith('###### ')) {\r\n      style = \"Heading 6\";\r\n      text = line.substring(7).trim();\r\n    } else if (line.startsWith('##### ')) {\r\n      style = \"Heading 5\";\r\n      text = line.substring(6).trim();\r\n    } else if (line.startsWith('#### ')) {\r\n      style = \"Heading 4\";\r\n      text = line.substring(5).trim();\r\n    } else if (line.startsWith('### ')) {\r\n      style = \"Heading 3\";\r\n      text = line.substring(4).trim();\r\n    } else if (line.startsWith('## ')) {\r\n      style = \"Heading 2\";\r\n      text = line.substring(3).trim();\r\n    } else if (line.startsWith('# ')) {\r\n      style = \"Heading 1\";\r\n      text = line.substring(2).trim();\r\n    }\r\n\r\n    // Create an empty paragraph with the desired style\r\n    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n    paragraph.style = style;\r\n\r\n    // Combine all markdown patterns in a single regex\r\n    const regex = /(\\*\\*(.+?)\\*\\*)|(\\*(.+?)\\*)|(_(.+?)_)/g;\r\n    let lastIndex = 0;\r\n    let match;\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n      // Insert plain text before the match\r\n      if (match.index > lastIndex) {\r\n        paragraph.insertText(text.substring(lastIndex, match.index), Word.InsertLocation.end);\r\n      }\r\n\r\n      // Extract the actual content and formatting\r\n      let content = \"\";\r\n      let bold = false;\r\n      let italic = false;\r\n      let underline = false;\r\n\r\n      if (match[1]) { // **bold**\r\n        content = match[2];\r\n        bold = true;\r\n      } else if (match[3]) { // *italic*\r\n        content = match[4];\r\n        italic = true;\r\n      } else if (match[5]) { // _underline_\r\n        content = match[6];\r\n        underline = true;\r\n      }\r\n\r\n      const formattedRange = paragraph.insertText(content, Word.InsertLocation.end);\r\n      formattedRange.font.bold = bold;\r\n      formattedRange.font.italic = italic;\r\n      formattedRange.font.underline = underline ? Word.UnderlineType.single : Word.UnderlineType.none;\r\n\r\n      lastIndex = regex.lastIndex;\r\n    }\r\n\r\n    // Insert any remaining text after last formatting\r\n    if (lastIndex < text.length) {\r\n      paragraph.insertText(text.substring(lastIndex), Word.InsertLocation.end);\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\nexport function removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\n\r\nexport function copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n\r\n}\r\n\r\n\r\nexport function switchToPromptBuilder() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('prompt-tab').classList.add('active');\r\n  document.getElementById('add-prompt-template').classList.add('show', 'active');\r\n}\r\n\r\n\r\nexport function switchToAddTag() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('tag-tab').classList.add('active');\r\n  document.getElementById('add-tag-body').classList.add('show', 'active');\r\n}\r\n\r\nexport function updateEditorFinalTable(data) {\r\n  const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n  let match;\r\n  let tables = [];\r\n\r\n  while ((match = regex.exec(data)) !== null) {\r\n    try {\r\n      const parsedContent = JSON.parse(match[1]);\r\n      tables.push(jsonToHtmlTable(parsedContent));\r\n    } catch (error) {\r\n      console.error(\"Failed to parse JSON:\", error, match[1]);\r\n    }\r\n  }\r\n\r\n  let tableIndex = 0;\r\n  return data.replace(regex, () => tables[tableIndex++] || \"\");\r\n}\r\n\r\nfunction jsonToHtmlTable(jsonData) {\r\n  if (!jsonData || (Array.isArray(jsonData) && jsonData.length === 0)) {\r\n    return '<p>No data available</p>';\r\n  }\r\n\r\n  let headers = new Set();\r\n  let rows = [];\r\n\r\n  function flattenObject(obj, prefix = \"\", result = {}) {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key];\r\n      const newKey = prefix ? `${prefix} > ${key}` : key;\r\n\r\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n        flattenObject(value, newKey, result);\r\n      } else if (Array.isArray(value)) {\r\n        result[newKey] = value.map(item => {\r\n          return typeof item === 'object'\r\n            ? Object.entries(item).map(([k, v]) => `<strong>${k}:</strong> ${v}`).join('<br>')\r\n            : item;\r\n        }).join('<br>');\r\n      } else {\r\n        result[newKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  if (!Array.isArray(jsonData)) {\r\n    jsonData = Object.entries(jsonData).map(([key, value]) => ({ [key]: value }));\r\n  }\r\n\r\n  jsonData.forEach(item => {\r\n    let flattenedItem = flattenObject(item);\r\n    Object.keys(flattenedItem).forEach(key => headers.add(key));\r\n    rows.push(flattenedItem);\r\n  });\r\n\r\n  let table = '<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">';\r\n  table += '<tr>' + [...headers].map(header => `<th>${header}</th>`).join('') + '</tr>';\r\n  rows.forEach(row => {\r\n    table += '<tr>' + [...headers].map(header => `<td>${row[header]}</td>`).join('') + '</tr>';\r\n  });\r\n\r\n  table += '</table>';\r\n  return table;\r\n}\r\n\r\n\r\n\r\nexport function generateChatHistoryHtml(chatList: any[]): string {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n  return chatList.map((chat, index) =>\r\n    `<div class=\"row chat-entry m-0 p-0\">\r\n            <div class=\"col-md-12 mt-2 p-2\">\r\n                <span class=\"float-end me-1\">\r\n                    <i class=\"fa fa-copy text-secondary c-pointer\" title=\"Copy Prompt\" id=\"copyPrompt-${index}\"></i>\r\n                </span>\r\n                <span class=\"float-end w-75 me-2\">\r\n                    <div class=\"form-control h-34 d-flex align-items-center dynamic-height prompt-text ${promptclass}\">\r\n                        ${chat.Prompt}\r\n                    </div>\r\n                </span>\r\n            </div>\r\n            <div class=\"col-md-12 mb-2 p-2 d-flex\">\r\n                <span class=\"d-flex align-items-baseline w-100\">\r\n                    <div class=\"flex-grow-1 c-pointer ai-response-container px-2 pe-3 pt-3 ai-selected-response\" id=\"responseContainer-${index}\">\r\n                        <input\r\n                            class=\"form-check-input c-pointer me-2 response-checkbox\"\r\n                            type=\"checkbox\"\r\n                            id=\"checkbox-${index}\"\r\n                            ${chat.Selected === 1 ? 'checked' : ''}>\r\n                        <span id=\"responseText-${index}\">${chat.Response}</span>\r\n                        <i class=\"fa fa-copy text-secondary c-pointer ms-2\"\r\n                           title=\"Copy Response\"\r\n                           id=\"copyResponse-${index}\"></i>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        </div>`\r\n  ).join('');\r\n}\r\n\r\n\r\nexport function chatfooter(tag: any) {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n  return ` <textarea class=\"form-control ${promptclass}\"\r\n                      rows=\"5\"\r\n                      id=\"chatInput\"\r\n                      ></textarea>\r\n            <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n            <div class=\"d-flex flex-column align-self-end me-3\">\r\n              <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insertTagButton\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\"></i>\r\n              </button>\r\n              <button class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\" id=\"changeSourceButton\">\r\n              ${tooltipButton}\r\n                <i class=\"fa fa-file-lines text-white\"></i>\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\" id=\"sendPromptButton\">\r\n                <span class=\"tooltiptext\">Send</span>\r\n                <i class=\"fa fa-paper-plane text-white\"></i>\r\n              </button>\r\n            </div>`\r\n}\r\n\r\nexport function renderSelectedTags(selectedNames, availableKeys) {\r\n  const badgeWrapper = document.getElementById('tag-badge-wrapper');\r\n  badgeWrapper.innerHTML = '';\r\n  // Filter out duplicates (case-insensitive)\r\n  const uniqueNames = [...new Set(\r\n    selectedNames.map(name => name.toLowerCase())\r\n  )].map(lowerName =>\r\n    selectedNames.find(name => name.toLowerCase() === lowerName)\r\n  );\r\n\r\n\r\n  uniqueNames.forEach(name => {\r\n    let aiTag;\r\n\r\n    if (/^ID\\d+$/i.test(name)) {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && `id${mention.ID}`.toLowerCase() === name.toLowerCase()\r\n      );\r\n    }else{\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && mention.DisplayName.toLowerCase() === name.toLowerCase()\r\n      );\r\n    }\r\n    const badge = document.createElement('span');\r\n    badge.className = 'badge rounded-pill border bg-white text-dark px-3 py-2 shadow-sm d-flex align-items-center badge-clickable';\r\n    badge.style.cursor = 'pointer';\r\n    badge.innerHTML = `${aiTag.DisplayName} <i class=\"fa-solid fa-robot ms-2 text-muted\" aria-label=\"AI Suggested\"></i>`;\r\n\r\n    badge.addEventListener('click', async () => {\r\n      await selectMatchingBookmarkFromSelection(name);\r\n\r\n      if (aiTag) {\r\n        const appBody = document.getElementById('app-body');\r\n        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n\r\n        generateCheckboxHistory(aiTag).then(html => {\r\n          appBody.innerHTML = html;\r\n        });\r\n      }\r\n    });\r\n\r\n\r\n    badgeWrapper.appendChild(badge);\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function applyThemeClasses(theme) {\r\n  const isDark = theme === 'Dark';\r\n  const isLight = theme === 'Light';\r\n\r\n  const safeApplyClass = (selector, darkClasses, lightClasses) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    const darkClassList = darkClasses.split(' ');\r\n    const lightClassList = lightClasses.split(' ');\r\n\r\n    elements.forEach(elem => {\r\n      if (!elem) return;\r\n      // Remove all related theme classes\r\n      elem.classList.remove(...darkClassList);\r\n      elem.classList.remove(...lightClassList);\r\n      // Add only the relevant set\r\n      if (isDark) elem.classList.add(...darkClassList);\r\n      if (isLight) elem.classList.add(...lightClassList);\r\n    });\r\n  };\r\n\r\n  // Now use it for different elements\r\n  safeApplyClass('#app-body', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('#search-box', 'bg-secondary text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-menu', 'bg-dark text-light border-light', 'bg-white text-dark border');\r\n  safeApplyClass('.list-group-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('.dropdown-toggle', 'bg-dark text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  // container for the suggestion list\r\n  safeApplyClass(\r\n    '.list-group-item-action',\r\n    'bg-dark text-light list-hover-dark',\r\n    'bg-light text-dark list-hover-light'\r\n  );\r\n\r\n  safeApplyClass('#close-ai-window', 'fa-solid fa-circle-xmark bg-dark text-light', 'fa-solid fa-circle-xmark bg-light text-dark');\r\n  safeApplyClass('#chatInput', 'bg-secondary text-light', 'bg-white text-dark');\r\n  safeApplyClass('.prompt-text', 'bg-secondary text-light', 'bg-white text-dark');\r\n\r\n\r\n}\r\n\r\nexport function swicthThemeIcon() {\r\n  const themeToggle = document.getElementById('theme-toggle');\r\n  const icon = themeToggle.querySelector('i');\r\n\r\n  if (theme === 'Dark') {\r\n    icon.classList.remove('fa-moon');\r\n    icon.classList.add('fa-sun');\r\n  } else if (theme === 'Light') {\r\n    icon.classList.remove('fa-sun');\r\n    icon.classList.add('fa-moon');\r\n  }\r\n}\r\n\r\nasync function selectMatchingBookmarkFromSelection(displayName) {\r\n  return Word.run(async (context) => {\r\n    const selection = context.document.getSelection();\r\n    const bookmarks = selection.getBookmarks(); // ClientResult<string[]>\r\n    await context.sync();\r\n\r\n    const targetBookmarkName = bookmarks.value.find(bookmark => {\r\n      const cleanName = bookmark.split('_Split_')[0].replace(/_/g, ' ');\r\n      return cleanName.toLowerCase() === displayName.toLowerCase();\r\n    });\r\n\r\n    if (targetBookmarkName) {\r\n      const range = context.document.getBookmarkRangeOrNullObject(targetBookmarkName);\r\n      range.load('isNullObject');\r\n      await context.sync();\r\n\r\n      if (!range.isNullObject) {\r\n        range.select(); // Select the entire bookmark\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { getPromptTemplateById, updateGroupKey, updateAiHistory } from \"../api\";\r\nimport { chatfooter, copyText, generateChatHistoryHtml, insertLineWithHeadingStyle, removeQuotes, renderSelectedTags, switchToAddTag, updateEditorFinalTable } from \"../functions\";\r\nimport { addGenAITags, aiTagList, applyAITagFn, availableKeys, createMultiSelectDropdown, fetchAIHistory, isPendingResponse, jwt, mentionDropdownFn, selectedNames, sendPrompt, theme } from \"../taskpane\";\r\n\r\nlet preview = '';\r\n\r\n\r\nexport function loadHomepage(availableKeys) {\r\n    const searchBoxClass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-3\">\r\n        <div class=\"d-flex justify-content-end px-2\">\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Action\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"add-btn-tag\">\r\n                            <i class=\"fa fa-plus me-2\" aria-hidden=\"true\"></i> Add\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"apply-btn-tag\">\r\n                            <i class=\"fa-solid fa-circle-check me-2\"></i> Apply\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group px-2 pt-2\">\r\n            <input type=\"text\" id=\"search-box\" class=\"form-control ${searchBoxClass}\" placeholder=\"Search Tags...\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <ul id=\"suggestion-list\" class=\"list-group mt-2 px-2\"></ul>\r\n        \r\n        <div id=\"tags-in-selected-text\" class=\"mt-2 px-2 selected-text-box d-none\">\r\n            <label class=\"form-label mb-2 fw-bold\">Tags in Selected Text</label>\r\n            <div class=\"tag-panel d-flex flex-wrap gap-2\" id=\"tag-badge-wrapper\"></div>\r\n        </div>\r\n    </div>`;\r\n\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n     \r\n    function updateSuggestions() {\r\n        const searchTerm = searchBox.value.trim().toLowerCase();\r\n        suggestionList.replaceChildren(); // Clear previous results\r\n        if (searchTerm === '') {\r\n            suggestionList.innerHTML = ''\r\n            return;\r\n        }\r\n\r\n        const filteredMentions = availableKeys.filter(mention =>\r\n            mention.DisplayName.toLowerCase().includes(searchTerm)\r\n        );\r\n\r\n        const nonAITags = filteredMentions.filter(m => m.AIFlag === 0);\r\n        const aiTags = filteredMentions.filter(m => m.AIFlag === 1);\r\n\r\n        const createSection = (labelText, mentions, isAISection = false) => {\r\n            if (mentions.length === 0) return;\r\n\r\n            // Define the theme classes based on the current theme\r\n            const themeClasses = theme === 'Dark'\r\n                ? { itemClass: 'bg-dark text-light list-hover-dark', labelClass: 'bg-dark text-light' }\r\n                : { itemClass: 'bg-light text-dark list-hover-light', labelClass: 'bg-light text-dark' };\r\n\r\n\r\n            // Create the section label\r\n            const label = document.createElement('li');\r\n            label.className = `list-group-item fw-bold text-secondary ${themeClasses.labelClass}`;\r\n            label.textContent = labelText;\r\n            suggestionList.appendChild(label);\r\n\r\n            // Loop through mentions and create the list items\r\n            mentions.forEach(mention => {\r\n                const listItem = document.createElement('li');\r\n                listItem.className = `list-group-item list-group-item-action ${themeClasses.itemClass}`; // Apply the theme classes\r\n\r\n                // Create the icon for AI or non-AI tags\r\n                const icon = isAISection\r\n                    ? `<i class=\"fa-solid fa-robot text-muted me-2\"></i>`\r\n                    : `<i class=\"fa-solid fa-layer-group text-muted me-2\"></i>`;\r\n\r\n                listItem.innerHTML = `${icon} ${mention.DisplayName}`;\r\n\r\n                listItem.onclick = () => {\r\n                    if (isAISection) {\r\n                        const appBody = document.getElementById('app-body');\r\n                        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n                        generateCheckboxHistory(mention).catch(error => {\r\n                            appBody.innerHTML = '<div class=\"text-danger p-2\">Error loading data</div>';\r\n                        }).then(html => {\r\n                            appBody.innerHTML = html;\r\n                        });\r\n                    } else {\r\n                        replaceMention(mention, mention.ComponentKeyDataType);\r\n                        suggestionList.replaceChildren();\r\n                    }\r\n                };\r\n\r\n                suggestionList.appendChild(listItem);\r\n            });\r\n        };\r\n\r\n        // Call the function for each section\r\n        createSection('Properties', nonAITags, false);\r\n        createSection('AI Tags', aiTags, true);\r\n\r\n    }\r\n    if(selectedNames.length>0){\r\n        const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n        renderSelectedTags(selectedNames ,availableKeys);\r\n    }\r\n    \r\n    // Add input event listener to the search box\r\n    let debounceTimeout;\r\n    searchBox.addEventListener('input', () => {\r\n        clearTimeout(debounceTimeout);\r\n        debounceTimeout = setTimeout(updateSuggestions, 300); // Delay input handling by 300ms\r\n    });\r\n\r\n    document.getElementById('add-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            addGenAITags();\r\n        }\r\n    });\r\n\r\n    document.getElementById('apply-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            applyAITagFn();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n    return Word.run(async (context) => {\r\n      try {\r\n        const selection = context.document.getSelection();\r\n        await context.sync();\r\n  \r\n        if (!selection) {\r\n          throw new Error('Selection is invalid or not found.');\r\n        }\r\n  \r\n        let newSelection = selection;\r\n  \r\n        if (type === 'TABLE') {\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n          const bodyNodes = Array.from(doc.body.childNodes);\r\n  \r\n          await context.sync();\r\n  \r\n          for (const node of bodyNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n              const textContent = node.textContent?.trim();\r\n              if (textContent) {\r\n                textContent.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as HTMLElement;\r\n  \r\n              if (element.tagName.toLowerCase() === 'table') {\r\n                const rows = Array.from(element.querySelectorAll('tr'));\r\n  \r\n                if (rows.length === 0) {\r\n                  selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                  continue;\r\n                }\r\n  \r\n                const maxCols = Math.max(...rows.map(row => {\r\n                  return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                  }, 0);\r\n                }));\r\n  \r\n                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                await context.sync();\r\n  \r\n                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n  \r\n                await context.sync();\r\n  \r\n                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n  \r\n                rows.forEach((row, rowIndex) => {\r\n                  const cells = Array.from(row.querySelectorAll('td, th'));\r\n                  let cellIndex = 0;\r\n  \r\n                  cells.forEach((cell) => {\r\n                    while (rowspanTracker[cellIndex] > 0) {\r\n                      rowspanTracker[cellIndex]--;\r\n                      cellIndex++;\r\n                    }\r\n  \r\n                    const cellText = Array.from(cell.childNodes)\r\n                      .map(node => {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                          return node.textContent?.trim() || '';\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                          return (node as HTMLElement).innerText.trim();\r\n                        }\r\n                        return '';\r\n                      })\r\n                      .filter(text => text.length > 0)\r\n                      .join(' ');\r\n  \r\n                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n  \r\n                    for (let i = 1; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                      }\r\n                    }\r\n  \r\n                    if (rowspan > 1) {\r\n                      for (let i = 0; i < colspan; i++) {\r\n                        if (cellIndex + i < maxCols) {\r\n                          rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                        }\r\n                      }\r\n                    }\r\n  \r\n                    cellIndex += colspan;\r\n                  });\r\n                });\r\n  \r\n                newSelection = table.getCell(0, 0); // Set the cursor to the start of the table\r\n              } else {\r\n                const elementText = element.innerText.trim();\r\n                if (elementText) {\r\n                  elementText.split('\\n').forEach(line => {\r\n                    if (line.trim()) {\r\n                      insertLineWithHeadingStyle(selection, line);\r\n                    }\r\n                  });\r\n                }\r\n                newSelection = selection; // If it's not a table, just use the existing selection.\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          if (word.EditorValue === '' || word.IsApplied) {\r\n            selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n          } else {\r\n            let content = removeQuotes(word.EditorValue);\r\n            let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n            lines.forEach(line => {\r\n              selection.insertParagraph(line, Word.InsertLocation.before);\r\n            });\r\n          }\r\n          newSelection = selection; // After inserting the text, set selection to it.\r\n        }\r\n  \r\n        // Move the cursor to the next line after content insertion\r\n        const nextLineParagraph = selection.insertParagraph(\"\", Word.InsertLocation.after);\r\n        await context.sync();\r\n  \r\n        // Set the new cursor position after content\r\n        newSelection = nextLineParagraph;\r\n        selection.select(); // Select the new paragraph where the cursor will be\r\n        await context.sync();\r\n  \r\n      } catch (error) {\r\n        console.error('Detailed error:', error);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\nexport async function openAITag(tag) {\r\n    tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n    });\r\n\r\n\r\n}\r\n\r\nexport async function generateCheckboxHistory(tag) {\r\n    if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n        await fetchAIHistory(tag);\r\n    }\r\n\r\n    const history = tag.FilteredReportHeadAIHistoryList;\r\n\r\n    if (history.length === 0) {\r\n        return '<div>No AI history available.</div>';\r\n    }\r\n\r\n    // Check current theme\r\n    const isDark = theme === 'Dark';\r\n    const closeBtnClass = isDark\r\n        ? 'fa-solid fa-circle-xmark bg-dark text-light'\r\n        : 'fa-solid fa-circle-xmark bg-light text-dark';\r\n\r\n    const closeBar = `\r\n        <div class=\"d-flex justify-content-between align-items-center px-2 pt-3\">\r\n            <div class=\"d-flex align-items-center ms-3\">\r\n                <i class=\"fa fa-robot text-muted me-2\"></i>\r\n                <span class=\"fw-bold\">${tag.DisplayName}</span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-center align-items-center me-3 c-pointer\" id=\"close-btn-tag\">\r\n                <i class=\"${closeBtnClass}\" id=\"close-ai-window\"></i>\r\n            </div>\r\n        </div>\r\n        <hr class=\"mt-2 mb-1 mx-3\">\r\n    `;\r\n\r\n    const chatBody = `\r\n        <div class=\"chat-body\">\r\n            ${generateChatHistoryHtml(history)}\r\n        </div>\r\n    `;\r\n\r\n    const chatFooterHtml = `\r\n        <div class=\"d-flex align-items-end justify-content-end chatbox p-2\" id=\"chatFooter\">\r\n            ${chatfooter(tag)}\r\n        </div>\r\n    `;\r\n\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);  // Make sure jwt and availableKeys are in scope\r\n\r\n    return `${closeBar}${chatBody}${chatFooterHtml}`;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function setupPromptBuilderUI(container, promptBuilderList) {\r\n\r\n    // Static template and field definitions\r\n    let preview = '';\r\n    let templateText = '';\r\n\r\n    // Field configs (can be extended)\r\n    let fieldsList = [];\r\n\r\n    // Create the form container\r\n    // Create the form container\r\n    container.innerHTML = `\r\n  <div class=\"form-group mb-3 p-3 pt-0\">\r\n    <label class='form-label'><span class=\"text-danger\">*</span> Prompt Builder Template</label>\r\n    <select id=\"promptBuilderTemplate\" class=\"form-control\">\r\n      <option value=\"\" disabled selected>Select a template</option>\r\n    </select>\r\n    <div id=\"templateError\" class=\"invalid-feedback d-none\">Type is required.</div>\r\n  </div>\r\n\r\n  <div id=\"fieldsContainer\"></div>\r\n\r\n  <div class=\"form-group mb-3 p-3 pt-0\" id=\"previewContainer\" style=\"display: none;\">\r\n    <label class=\"mb-2\">Preview</label>\r\n    <div id=\"preview\" class=\"form-control\"></div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between px-3 align-items-center mt-3\">\r\n    <span id=\"resetBtn\" class=\"text-primary fw-bold\" style=\"cursor: pointer;\">Reset</span>\r\n    <button id=\"applyBtn\" class=\"btn btn-primary text-white\" disabled>Apply Prompt</button>\r\n  </div>\r\n`;\r\n\r\n    // Element references\r\n    const templateSelect = container.querySelector('#promptBuilderTemplate') as HTMLSelectElement;\r\n    const applyBtn = container.querySelector('#applyBtn') as HTMLButtonElement;\r\n    const resetBtn = container.querySelector('#resetBtn') as HTMLSpanElement;\r\n    const previewDiv = container.querySelector('#preview') as HTMLDivElement;\r\n    const fieldsContainer = container.querySelector('#fieldsContainer') as HTMLDivElement;\r\n    const previewContainer = container.querySelector('#previewContainer') as HTMLDivElement;\r\n    const templateError = container.querySelector('#templateError') as HTMLDivElement;\r\n\r\n    // Populate template dropdown\r\n    promptBuilderList.forEach((item) => {\r\n        const option = document.createElement('option');\r\n        option.value = item.ID.toString();\r\n        option.textContent = item.Name;\r\n        templateSelect.appendChild(option);\r\n    });\r\n\r\n    templateSelect.addEventListener('change', async () => {\r\n        const templateId = templateSelect.value;\r\n        const jwt = sessionStorage.getItem('token') || '';\r\n\r\n        const data = await getPromptTemplateById(templateId, jwt);\r\n        if (data.Status && data.Data) {\r\n            fieldsList = data.Data;\r\n            preview = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n\r\n            templateText = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n        }\r\n        if (!templateId) {\r\n            templateError.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        templateError.classList.add('d-none');\r\n\r\n        renderFields();\r\n        updatePreview();\r\n    });\r\n\r\n    function renderFields() {\r\n        fieldsContainer.innerHTML = '';\r\n\r\n        fieldsList.forEach((field) => {\r\n            const div = document.createElement('div');\r\n            div.className = 'form-group mb-3 p-3 pt-0';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = field.Label;\r\n            div.appendChild(label);\r\n\r\n            if (field.Type === 1) {\r\n                const input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.className = 'form-control';\r\n                input.id = field.Label;\r\n                input.addEventListener('input', replaceKeywordsManually);\r\n                div.appendChild(input);\r\n            } else if (field.Type === 2) {\r\n                const select = document.createElement('select');\r\n                select.className = 'form-control';\r\n                select.id = field.Label;\r\n                field.PromptTemplateOptionList.forEach((opt: any) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = opt.Text;\r\n                    option.textContent = opt.Option;\r\n                    select.appendChild(option);\r\n                });\r\n                select.addEventListener('change', replaceKeywordsManually);\r\n                div.appendChild(select);\r\n            }\r\n\r\n            fieldsContainer.appendChild(div);\r\n        });\r\n    }\r\n\r\n    function replaceKeywordsManually() {\r\n        const keywordMap: { [key: string]: string } = {};\r\n\r\n        fieldsList.forEach((field) => {\r\n            const id = field.Label;\r\n            const keyword = `#${id}#`;\r\n\r\n            let value = '';\r\n            const element = document.getElementById(id) as HTMLInputElement | HTMLSelectElement;\r\n\r\n            if (element) {\r\n                value = (element instanceof HTMLInputElement || element instanceof HTMLSelectElement)\r\n                    ? element.value\r\n                    : '';\r\n            }\r\n\r\n            keywordMap[keyword] = value ? value : keyword;\r\n        });\r\n\r\n        let insertValue = templateText;\r\n        for (const [keyword, value] of Object.entries(keywordMap)) {\r\n            insertValue = insertValue.replace(new RegExp(keyword, 'g'), value);\r\n        }\r\n\r\n        preview = insertValue;\r\n        previewDiv.textContent = preview;\r\n        previewContainer.style.display = preview ? 'block' : 'none';\r\n        applyBtn.disabled = preview === '';\r\n    }\r\n\r\n    function updatePreview() {\r\n        replaceKeywordsManually();\r\n    }\r\n\r\n    function resetForm() {\r\n        // Reset only the dynamic field values\r\n        fieldsList.forEach((field) => {\r\n            const element = document.getElementById(field.Label) as HTMLInputElement | HTMLSelectElement;\r\n            if (element) {\r\n                if (element instanceof HTMLInputElement) {\r\n                    element.value = '';\r\n                } else if (element instanceof HTMLSelectElement) {\r\n                    element.selectedIndex = 0; // optional: reset to first option\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clear preview\r\n        previewDiv.textContent = templateText;\r\n        preview = templateText;\r\n    }\r\n\r\n\r\n    function applyPrompt() {\r\n        if (!preview) return;\r\n\r\n        const promptTextarea = document.getElementById('prompt') as HTMLTextAreaElement;\r\n        if (promptTextarea) {\r\n            promptTextarea.value = preview;\r\n            switchToAddTag()\r\n        }\r\n\r\n    }\r\n\r\n    resetBtn.addEventListener('click', resetForm);\r\n    applyBtn.addEventListener('click', applyPrompt);\r\n}\r\n\r\n\r\nasync function insertTagPrompt(tag: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n    \r\n\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.EditorValue === '') {\r\n                selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n            } else {\r\n                if (tag.ComponentKeyDataType === 'TABLE') {\r\n                    const parser = new DOMParser();\r\n                    const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n                    const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                    for (const node of bodyNodes) {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                            const textContent = node.textContent?.trim();\r\n                            if (textContent) {\r\n                                textContent.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                            const element = node as HTMLElement;\r\n\r\n                            if (element.tagName.toLowerCase() === 'table') {\r\n                                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                                if (rows.length === 0) {\r\n                                    selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                    continue;\r\n                                }\r\n\r\n                                const maxCols = Math.max(...rows.map(row => {\r\n                                    return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                    }, 0);\r\n                                }));\r\n\r\n                                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                                await context.sync();\r\n\r\n                                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                                table.style = \"Grid Table 4 - Accent 1\";\r\n                                await context.sync();\r\n\r\n                                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                                rows.forEach((row, rowIndex) => {\r\n                                    const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                    let cellIndex = 0;\r\n\r\n                                    cells.forEach((cell) => {\r\n                                        while (rowspanTracker[cellIndex] > 0) {\r\n                                            rowspanTracker[cellIndex]--;\r\n                                            cellIndex++;\r\n                                        }\r\n\r\n                                        const cellText = Array.from(cell.childNodes)\r\n                                            .map(node => {\r\n                                                if (node.nodeType === Node.TEXT_NODE) {\r\n                                                    return node.textContent?.trim() || '';\r\n                                                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                    return (node as HTMLElement).innerText.trim();\r\n                                                }\r\n                                                return '';\r\n                                            })\r\n                                            .filter(text => text.length > 0)\r\n                                            .join(' ');\r\n\r\n                                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                        for (let i = 1; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                            }\r\n                                        }\r\n\r\n                                        if (rowspan > 1) {\r\n                                            for (let i = 0; i < colspan; i++) {\r\n                                                if (cellIndex + i < maxCols) {\r\n                                                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        cellIndex += colspan;\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                const elementText = element.innerText.trim();\r\n                                if (elementText) {\r\n                                    elementText.split('\\n').forEach(line => {\r\n                                        if (line.trim()) {\r\n                                            insertLineWithHeadingStyle(selection, line);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let content = removeQuotes(tag.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/);\r\n                    lines.forEach(line => {\r\n                        insertLineWithHeadingStyle(selection,line)\r\n                        // selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n                const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                bookmarkRange.insertBookmark(bookmarkName);\r\n                console.log(`Bookmark added: ${bookmarkName}`);\r\n                const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n                await context.sync();\r\n\r\n                // Move the cursor to this paragraph (now it's outside the bookmark)\r\n                afterBookmark.select();\r\n            }\r\n\r\n            if (start) start.insertText('', Word.InsertLocation.replace);\r\n            if (end) end.insertText('', Word.InsertLocation.replace);\r\n\r\n            await context.sync();\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport function initializeAIHistoryEvents(tag: any, jwt: string, availableKeys: any) {\r\n    setTimeout(() => {\r\n        tag.FilteredReportHeadAIHistoryList.forEach((chat: any, index: number) => {\r\n            // Copy buttons\r\n            document.getElementById(`copyPrompt-${index}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n            document.getElementById(`copyResponse-${index}`)?.addEventListener('click', () => copyText(chat.Response));\r\n\r\n            // Close button\r\n            document.getElementById(`close-btn-tag`)?.addEventListener('click', () => loadHomepage(availableKeys));\r\n\r\n            // Checkbox logic\r\n            const checkbox = document.getElementById(`checkbox-${index}`) as HTMLInputElement;\r\n            if (checkbox) {\r\n                checkbox.addEventListener('change', async (event: Event) => {\r\n                    const isChecked = (event.target as HTMLInputElement).checked;\r\n\r\n                    // Reset all\r\n                    tag.FilteredReportHeadAIHistoryList.forEach((_: any, otherIndex: number) => {\r\n                        const otherCheckbox = document.getElementById(`checkbox-${otherIndex}`) as HTMLInputElement;\r\n                        const responseContainer = document.getElementById(`responseContainer-${otherIndex}`);\r\n                        if (otherCheckbox) otherCheckbox.checked = false;\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.remove('ai-selected-response');\r\n                            responseContainer.classList.add('bg-light');\r\n                        }\r\n                        tag.FilteredReportHeadAIHistoryList[otherIndex].Selected = 0;\r\n                    });\r\n\r\n                    // Set selected\r\n                    if (isChecked) {\r\n                        checkbox.checked = true;\r\n                        const responseContainer = document.getElementById(`responseContainer-${index}`);\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.add('ai-selected-response');\r\n                            responseContainer.classList.remove('bg-light');\r\n                        }\r\n                        chat.Selected = 1;\r\n                    } else {\r\n                        chat.Selected = 0;\r\n                    }\r\n\r\n                    try {\r\n                        const data = await updateAiHistory(chat, jwt);\r\n                        if (data['Data']) {\r\n                            tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n                            tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n                            tag.ReportHeadAIHistoryList.forEach((historyList: any) => {\r\n                                historyList.Response = removeQuotes(historyList.Response);\r\n                                tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n                            });\r\n\r\n                            const finalResponse = chat.FormattedResponse\r\n                                ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                : chat.Response;\r\n\r\n                            tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n                            tag.UserValue = finalResponse;\r\n                            tag.EditorValue = finalResponse;\r\n                            tag.text = finalResponse;\r\n\r\n                            const currentlySelected = tag.FilteredReportHeadAIHistoryList.some((item: any) => item.Selected === 1);\r\n                            tag.IsApplied = !currentlySelected;\r\n                                   availableKeys.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                }\r\n                            })\r\n                            \r\n                            aiTagList.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n\r\n\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                }\r\n                            });\r\n                        }\r\n                    } catch (err) {\r\n                        console.error('Failed to update AI history:', err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Button: Insert Tag\r\n        document.getElementById(`insertTagButton`)?.addEventListener('click', () => {\r\n            if (!tag.IsApplied) {\r\n                insertTagPrompt(tag);\r\n            }\r\n        });\r\n\r\n        // Button: Send Prompt\r\n        document.getElementById(`sendPromptButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            sendPrompt(tag, textareaValue);\r\n        });\r\n\r\n        // Button: Change Source\r\n        document.getElementById(`changeSourceButton`)?.addEventListener('click', () => {\r\n            createMultiSelectDropdown(tag);\r\n        });\r\n\r\n        // Mention dropdown\r\n        mentionDropdownFn(`chatInput`, `mention-dropdown`, 'edit');\r\n    }, 0);\r\n}\r\n","import { theme } from \"../taskpane\";\r\n\r\nfunction addtagbody(sponsorOptions) {\r\n  const body = `<div class=\"modal-dialog\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-body p-3 pt-0\">\r\n      <form id=\"genai-form\" autocomplete=\"off\" novalidate>\r\n        <!-- Name Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"name\" class=\"form-label\"><span class=\"text-danger\">*</span> Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" required>\r\n          <div class=\"invalid-feedback\">Name is required.</div>\r\n          <div id=\"submition-error\" class=\"invalid-feedback\" style=\"display: none;\"></div>\r\n\r\n        </div>\r\n\r\n        <!-- Description Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" rows=\"6\"></textarea>\r\n        </div>\r\n\r\n        <!-- Prompt Field -->\r\n        <div class=\"mb-3 prompt-box\">\r\n          <label for=\"prompt\" class=\"form-label\"><span class=\"text-danger\">*</span> Prompt \r\n            <small class=\"text-secondary\">(Note: Use # tag for content suggestions)</small>\r\n          </label>\r\n          <textarea class=\"form-control\" id=\"prompt\" rows=\"6\"  required></textarea>\r\n          <div class=\"invalid-feedback\">Prompt is required.</div>\r\n          <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n        </div>\r\n\r\n        <!-- Save Globally Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"saveGlobally\">\r\n          <label class=\"form-check-label\" for=\"saveGlobally\">Save Globally</label>\r\n        </div>\r\n\r\n        <!-- Available to All Sponsors Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"isAvailableForAll\" disabled>\r\n          <label class=\"form-check-label\" for=\"isAvailableForAll\">Available to All Sponsors</label>\r\n        </div>\r\n\r\n        <!-- Sponsor Dropdown -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"sponsor\" class=\"form-label\"><span class=\"text-danger\">*</span> Sponsor</label>\r\n          <div class=\"dropdown w-100\">\r\n            <button \r\n              class=\"btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle\" \r\n              type=\"button\" \r\n              id=\"sponsorDropdown\" \r\n              data-bs-toggle=\"dropdown\" \r\n              aria-expanded=\"false\" \r\n              disabled>\r\n              <span id=\"sponsorDropdownLabel\">Select Sponsors</span>\r\n              <span class=\"dropdown-toggle-icon\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu w-100 p-2\" aria-labelledby=\"sponsorDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\r\n              <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n                  <label class=\"form-check-label\" for=\"selectAll\">Select All</label>\r\n                </div>\r\n              </li>\r\n              ${sponsorOptions}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-btn-gen-ai\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"text-gen-save\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n  return body\r\n}\r\n\r\nfunction logoheader(storedUrl) {\r\n  const themeicon=theme==='Dark'?'fa-sun':'fa-moon'\r\n  const body = `\r\n    <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n    <div class=\"icon-nav me-3\">\r\n      <i class=\"fa fa-home c-pointer me-3\" title=\"Home\" id=\"home\"></i>\r\n      <div class=\"dropdown d-inline\">\r\n        <i class=\"fa fa-tools c-pointer me-3\" id=\"settingsDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" title=\"Settings\"></i>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"settingsDropdown\">\r\n          <li>\r\n            <a class=\"dropdown-item\" href=\"#\" id=\"define-formatting\">\r\n              <i class=\"fa fa-sliders-h me-2\" aria-hidden=\"true\"></i> Define Formatting\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"glossary\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-book me-2\" aria-hidden=\"true\"></i> Apply Glossary\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"removeFormatting\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-eraser me-2\" aria-hidden=\"true\"></i> Remove Formatting\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Theme Toggle Icon -->\r\n      <span id=\"theme-toggle\"><i class=\"fa ${themeicon} c-pointer me-3\" title=\"Toggle Theme\"></i></span>\r\n\r\n      <i class=\"fa fa-sign-out c-pointer me-3\" id=\"logout\" title=\"Logout\"></i>\r\n    </div>    \r\n  `\r\n  return body;\r\n}\r\n\r\nconst navTabs = `<ul class=\"nav nav-tabs\" id=\"tabList\" role=\"tablist\">\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link active\" id=\"tag-tab\" data-bs-toggle=\"tab\" href=\"#tag\" role=\"tab\">Tag</a>\r\n  </li>\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link\" id=\"prompt-tab\" data-bs-toggle=\"tab\" href=\"#prompt\" role=\"tab\">Prompt builder</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content p-3 border border-top-0\">\r\n  <div class=\"tab-pane fade show active\" id=\"add-tag-body\" role=\"tabpanel\" aria-labelledby=\"tag-tab\">\r\n  </div>\r\n  <div class=\"tab-pane fade\" id=\"add-prompt-template\" role=\"tabpanel\" aria-labelledby=\"prompt-tab\">\r\n  </div>\r\n</div>\r\n`\r\n\r\n\r\n\r\nconst promptbuilderbody = `<div>hi</div>`\r\n\r\n\r\nexport { navTabs, addtagbody, promptbuilderbody, logoheader };","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\nimport { dataUrl, storeUrl, versionLink } from \"./data\";\r\nimport { generateCheckboxHistory, initializeAIHistoryEvents, loadHomepage, setupPromptBuilderUI } from \"./components/home\";\r\nimport { applyThemeClasses, chatfooter, copyText, renderSelectedTags, swicthThemeIcon, switchToAddTag, switchToPromptBuilder, updateEditorFinalTable } from \"./functions\";\r\nimport { addtagbody, logoheader, navTabs, promptbuilderbody } from \"./components/bodyelements\";\r\nimport { addAiHistory, addGroupKey, fetchGlossaryTemplate, getAiHistory, getAllClients, getAllPromptTemplates, getReportById, loginUser, updateAiHistory, updateGroupKey } from \"./api\";\r\nexport let jwt = '';\r\nlet storedUrl = storeUrl\r\nlet documentID = ''\r\nlet organizationName = ''\r\nexport let aiTagList = [];\r\nlet initialised = true;\r\nexport let availableKeys = [];\r\nlet promptBuilderList = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\nlet capturedFormatting: any = {};\r\nlet emptyFormat: boolean = false;\r\nlet isNoFormatTextAvailable: boolean = false;\r\nlet clientId = '0';\r\nlet userId = 0;\r\nlet clientList = [];\r\nlet version = versionLink;\r\nlet currentYear = new Date().getFullYear();\r\nlet sourceList;\r\nlet filteredGlossaryTerm;\r\nexport let selectedNames = [];\r\nexport let isPendingResponse = false;\r\nexport let theme = 'Light';\r\n\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"footer\").innerText = `© ${currentYear} - TrialAssure LINK AI Assistant ${version}`\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      () => {\r\n        logBookmarksInSelection();\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      const orgName = properties.items.find(prop => prop.key === 'Organization');\r\n      if (property && orgName) {\r\n        documentID = property.value;\r\n        organizationName = orgName.value;\r\n        login()\r\n      } else {\r\n        document.getElementById('app-body').innerHTML = `\r\n        <p class=\"px-3 text-center\">Export a document from the LINK AI application to use this functionality.</p>`\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  console.log(sessionToken)\r\n  if (sessionToken) {\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n  document.getElementById('logo-header').innerHTML = `\r\n  <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n  <div class=\"icon-nav me-3\">\r\n    <span id=\"theme-toggle\"><i class=\"fa fa-moon c-pointer me-3\"  title=\"Toggle Theme\"></i><span>\r\n  </div>\r\n`;\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-2\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary bg-primary-clr\">Login</button>\r\n        </div>\r\n      <div id=\"login-error\" class=\"mt-3 text-danger\" style=\"display: none;\"></div>\r\n\r\n      </form>\r\n    </div>\r\n  `;\r\n  document.getElementById('theme-toggle').addEventListener('click', () => {\r\n    theme = theme === 'Light' ? 'Dark' : 'Light';\r\n    applyThemeClasses(theme)\r\n\r\n    document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n    document.body.classList.toggle('light-theme', theme === 'Light');\r\n    swicthThemeIcon()\r\n  }\r\n  );\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = (document.getElementById('organization') as HTMLInputElement).value;\r\n  const username = (document.getElementById('username') as HTMLInputElement).value;\r\n  const password = (document.getElementById('password') as HTMLInputElement).value;\r\n  if (organization.toLowerCase().trim() === organizationName.toLocaleLowerCase().trim()) {\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n    try {\r\n      const data = await loginUser(organization, username, password);\r\n      if (data.Status === true && data['Data']) {\r\n        if (data['Data'].ResponseStatus) {\r\n          jwt = data.Data.Token;\r\n          sessionStorage.setItem('token', jwt)\r\n          sessionStorage.setItem('userId', data.Data.ID);\r\n          window.location.hash = '#/dashboard';\r\n\r\n        } else {\r\n          showLoginError(\"An error occurred during login. Please try again.\")\r\n        }\r\n      } else {\r\n        showLoginError(\"An error occurred during login. Please try again.\")\r\n      }\r\n    } catch (error) {\r\n      showLoginError(\"An error occurred during login. Please try again.\")\r\n      console.error('Error during login:', error);\r\n      // Handle login error (e.g., show an error message)\r\n    }\r\n  } else {\r\n    showLoginError(\"The organization specified is not associated with this document\")\r\n  }\r\n}\r\n\r\nfunction showLoginError(message) {\r\n  loadLoginPage();  // Reload the form UI\r\n  const errorDiv = document.getElementById('login-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction displayMenu() {\r\n  userId = Number(sessionStorage.getItem('userId'))\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument('Init');\r\n\r\n}\r\n\r\nasync function fetchDocument(action) {\r\n  try {\r\n\r\n    const data = await getReportById(documentID, jwt);\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML = logoheader(storedUrl);\r\n\r\n    dataList = data['Data'];\r\n    sourceList = dataList.SourceTypeList.filter(\r\n      (item) => item.SourceValue !== ''\r\n        && item.AIFlag === 1\r\n    ) // Filter items with an extension\r\n      .map((item) => ({\r\n        ...item, // Spread the existing properties\r\n        SourceName: transformDocumentName(item.SourceValue)\r\n      }));\r\n    clientId = dataList.ClientID;\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n    availableKeys.forEach((key) => {\r\n      if (key.AIFlag === 1) {\r\n        const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n        let match;\r\n        if ((match = regex.exec(key.EditorValue) !== null)) {\r\n          {\r\n            key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n            key.UserValue = key.EditorValue;\r\n            key.InitialTable = true;\r\n            key.ComponentKeyDataType = 'TABLE';\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    aiTagList.forEach((key, i) => {\r\n      const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n      let match;\r\n      if ((match = regex.exec(key.EditorValue) !== null)) {\r\n        {\r\n          key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n          key.UserValue = key.EditorValue;\r\n          key.InitialTable = true;\r\n          key.ComponentKeyDataType = 'TABLE';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    );\r\n    fetchClients();\r\n    loadPromptTemplates();\r\n    loadHomepage(availableKeys);\r\n    document.getElementById('home').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        loadHomepage(availableKeys);\r\n      }\r\n    });\r\n\r\n    document.getElementById('glossary').addEventListener('click', () => {\r\n      if (emptyFormat) {\r\n        fetchGlossary();\r\n      }\r\n    });\r\n\r\n    document.getElementById('define-formatting').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        formatOptionsDisplay()\r\n      }\r\n    }\r\n    );\r\n\r\n\r\n    document.getElementById('removeFormatting').addEventListener('click', () => {\r\n      if (Object.keys(capturedFormatting).length > 0) {\r\n        removeOptionsConfirmation();\r\n      }\r\n    });\r\n\r\n\r\n    document.getElementById('theme-toggle').addEventListener('click', () => {\r\n      theme = theme === 'Light' ? 'Dark' : 'Light';\r\n      applyThemeClasses(theme)\r\n\r\n      document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n      document.body.classList.toggle('light-theme', theme === 'Light');\r\n      swicthThemeIcon()\r\n    }\r\n    );\r\n\r\n    document.getElementById('logout').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        logout()\r\n      }\r\n    }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchClients() {\r\n  try {\r\n    const userId = sessionStorage.getItem('userId') || '';\r\n\r\n\r\n    const data = await getAllClients(userId, jwt);\r\n\r\n    if (data.Status && data.Data) {\r\n      clientList = data['Data'];\r\n    } else {\r\n      console.warn(\"Failed to load clients or no clients found.\");\r\n    }\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function formatOptionsDisplay() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n               <!-- Buttons for Capture and Empty Format -->\r\n            <div class=\"d-flex justify-content-end\">\r\n              <button id=\"capture-format-btn\" class=\"btn btn-primary bg-primary-clr\"><i class=\"fa fa-border-style me-1\"></i>  Capture Format</button>\r\n            </div>\r\n            <!-- <h5 class=\"card-title\">Formatting Options</h5> -->\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div class=\"formating-checkbox\">\r\n               <input type=\"checkbox\" id=\"empty-format-checkbox\" class=\"form-check-input\">\r\n              <label for=\"empty-format-checkbox\" class=\"form-check-label empty-format-checkbox-label\" style=\"flex: 1;\">\r\n                   Skip ignoring and removing format-based text\r\n              </label>\r\n            </div>\r\n\r\n            <!-- Section to display captured formatting -->\r\n            <div id=\"format-details\">\r\n              <h5 class=\"my-3\">Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled\"></ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    if (Object.keys(capturedFormatting).length === 0) {\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // The object is not empty\r\n    }\r\n\r\n    const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n    if (!glossaryBtn.classList.contains('disabled-link')) {\r\n      glossaryBtn.classList.add('disabled-link');\r\n    }\r\n\r\n    if (emptyFormat) {\r\n      clearCapturedFormatting();\r\n    }\r\n    else {\r\n      if (capturedFormatting.Bold === null || capturedFormatting.Bold === undefined ||\r\n        capturedFormatting.Underline === 'Mixed' || capturedFormatting.Underline === undefined ||\r\n        capturedFormatting.Size === null || capturedFormatting.Size === undefined ||\r\n        capturedFormatting[\"Font Name\"] === null || capturedFormatting[\"Font Name\"] === undefined ||\r\n        capturedFormatting[\"Background Color\"] === '' || capturedFormatting[\"Background Color\"] === undefined ||\r\n        capturedFormatting[\"Text Color\"] === '' || capturedFormatting[\"Text Color\"] === undefined) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n\r\n\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    }\r\n    // Event listeners for the buttons\r\n\r\n    document.getElementById(\"capture-format-btn\").addEventListener(\"click\", captureFormatting);\r\n\r\n    const emptyFormatCheckbox = document.getElementById(\"empty-format-checkbox\") as HTMLInputElement;\r\n    if (isNoFormatTextAvailable) {\r\n      emptyFormatCheckbox.checked = true;\r\n      clearCapturedFormatting();\r\n    }\r\n\r\n    emptyFormatCheckbox.addEventListener(\"change\", () => {\r\n      if (emptyFormatCheckbox.checked) {\r\n        isNoFormatTextAvailable = true;\r\n        clearCapturedFormatting();\r\n      } else {\r\n        const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n        CaptureBtn.disabled = false;\r\n        isNoFormatTextAvailable = false;\r\n        emptyFormat = false;\r\n        const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n        if (!glossaryBtn.classList.contains('disabled-link')) {\r\n          glossaryBtn.classList.add('disabled-link');\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayCapturedFormatting() {\r\n  emptyFormat = false;\r\n  const formatList = document.getElementById(\"format-list\");\r\n  formatList.innerHTML = \"\"; // Clear the list before adding new items\r\n\r\n  for (const [key, value] of Object.entries(capturedFormatting)) {\r\n    if ((key === \"Text Color\" || key === \"Background Color\") && value) {\r\n      formatList.innerHTML += `\r\n        <li><strong>${key}:</strong>${value}\r\n          <span style=\"display:inline-block;width:15px;height:15px;background-color:${value};border:1px solid black;\"></span>\r\n        </li>\r\n      `;\r\n    } else {\r\n      formatList.innerHTML += `<li><strong>${key}:</strong> ${value}</li>`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearCapturedFormatting() {\r\n  capturedFormatting = {}; // Clear the captured formatting object\r\n  const formatDetails = document.getElementById(\"format-details\");\r\n  formatDetails.style.display = 'none';\r\n  // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n  emptyFormat = true;\r\n  const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n  glossaryBtn.classList.remove('disabled-link');\r\n  const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n  CaptureBtn.disabled = true;\r\n\r\n\r\n  const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n  if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n    removeFormatBtn.classList.add('disabled-link');\r\n  }\r\n  console.log(\"Captured formatting cleared.\");\r\n}\r\n\r\nasync function captureFormatting() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      const font = selection.font;\r\n      font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n\r\n      await context.sync();\r\n\r\n      capturedFormatting = {\r\n        Bold: font.bold,\r\n        Italic: font.italic,\r\n        Underline: font.underline,\r\n        Size: font.size,\r\n        \"Background Color\": font.highlightColor,\r\n        \"Font Name\": font.name,\r\n        'Text Color': font.color\r\n      };\r\n\r\n\r\n\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'block';\r\n\r\n      if (capturedFormatting.Bold === null ||\r\n        capturedFormatting.Underline === 'Mixed' ||\r\n        capturedFormatting.Size === null ||\r\n        capturedFormatting[\"Font Name\"] === null ||\r\n        capturedFormatting[\"Background Color\"] === '' ||\r\n        capturedFormatting[\"Text Color\"] === ''\r\n\r\n      ) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error capturing formatting:\", error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function removeOptionsConfirmation() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    } // Check if isTagUpdating is false\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Are you sure you want to remove formatted text ?</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div id=\"format-details\">\r\n              <h5>Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled mb-3\"></ul>\r\n              <small class=\"text-secondary font-italic\" id=\"warning-rem-fmt\"></small>\r\n             \r\n            </div>\r\n               <!-- Buttons for Capture and Empty Format -->\r\n\r\n            <div class=\"mt-3 d-flex justify-content-between\">\r\n              <span id=\"change-ft-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n              <button id=\"clear-ft-btn\" class=\"btn btn-primary px-3\"><i class=\"fa fa-check-circle me-2\"></i>Yes</button>\r\n\r\n            </div>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    displayCapturedFormatting();\r\n\r\n    if (capturedFormatting['Background Color'] === null &&\r\n      capturedFormatting['Text Color'] === '#000000') {\r\n      const warningEle = document.getElementById('warning-rem-fmt').innerHTML = 'Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?'\r\n    }\r\n\r\n    // Event listeners for the buttons\r\n    document.getElementById(\"clear-ft-btn\").addEventListener(\"click\", removeFormattedText);\r\n    document.getElementById(\"change-ft-btn\").addEventListener(\"click\", formatOptionsDisplay);\r\n\r\n  }\r\n}\r\n\r\nasync function removeFormattedText() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n      const iconelement = document.getElementById(`clear-ft-btn`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Yes`;\r\n      const clrBtn = document.getElementById('clear-ft-btn') as HTMLButtonElement;\r\n      clrBtn.disabled = true;\r\n\r\n      const changeBtn = document.getElementById('change-ft-btn') as HTMLButtonElement;\r\n      changeBtn.disabled = true;\r\n      const paragraphs = context.document.body.paragraphs;\r\n      paragraphs.load(\"items\"); // Load paragraphs from the body\r\n\r\n      await context.sync();\r\n\r\n      // Iterate through each paragraph in the document body\r\n      for (const paragraph of paragraphs.items) {\r\n\r\n        // Check if the paragraph contains text\r\n        if (paragraph.text.trim() !== \"\") {\r\n          const textRanges = paragraph.split([\" \"]); // Split paragraph into individual words/segments\r\n          textRanges.load(\"items, font\");\r\n\r\n          await context.sync();\r\n\r\n          for (const range of textRanges.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n\r\n            // Check if the text range matches the captured formatting\r\n            if (\r\n              font.highlightColor === capturedFormatting['Background Color'] &&\r\n              font.color === capturedFormatting['Text Color'] &&\r\n              font.bold === capturedFormatting['Bold'] &&\r\n              font.italic === capturedFormatting['Italic'] &&\r\n              font.size === capturedFormatting['Size'] &&\r\n              font.underline === capturedFormatting['Underline'] &&\r\n              font.name === capturedFormatting['Font Name']\r\n            ) {\r\n              // Clear the range whether it's a full word or part of a word\r\n              font.highlightColor = \"#FFFFFF\"; // Set new background color\r\n              font.color = \"#000000\"; // Set new text color\r\n              font.bold = false; // Reset bold if needed\r\n              font.italic = false; // Reset italic if needed\r\n              font.underline = \"None\";\r\n              paragraph.insertText(\" \", Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n      capturedFormatting = {}; // Clear the captured formatting object\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n      emptyFormat = true;\r\n      isNoFormatTextAvailable = true;\r\n      const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n      glossaryBtn.classList.remove('disabled-link');\r\n      formatOptionsDisplay()\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing formatted text:\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAIHistory(tag) {\r\n  try {\r\n\r\n    const data = await getAiHistory(tag.ID, jwt);\r\n\r\n\r\n    if (data.Status && data.Data) {\r\n      tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n      tag.FilteredReportHeadAIHistoryList = [];\r\n      tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n      });\r\n      return tag.FilteredReportHeadAIHistoryList;\r\n      // Use the data here\r\n    } else {\r\n      console.warn(\"No AI history available.\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendPrompt(tag, prompt) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n\r\n    const iconelement = document.getElementById(`sendPromptButton`);\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`;\r\n\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      ThreadID: tag.ThreadID,\r\n      AssistantID: dataList.AssistantID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      VectorID: dataList.VectorID,\r\n      Selected: 0,\r\n      ID: 0,\r\n      SourceValue: tag.SourceValue ? tag.SourceValue : []\r\n    };\r\n\r\n    try {\r\n      isPendingResponse = true;\r\n      const data = await addAiHistory(payload, jwt);\r\n\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n        const chat = tag.ReportHeadAIHistoryList[0];\r\n        aiTagList.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n\r\n\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n          }\r\n        });\r\n\r\n        availableKeys.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n          }\r\n        })\r\n\r\n\r\n\r\n        const appbody = document.getElementById('app-body')\r\n        appbody.innerHTML = await generateCheckboxHistory(tag);\r\n        isPendingResponse = false;\r\n\r\n      }\r\n\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      document.getElementById(`chatInput`).value = '';\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      // sourceListBtn.disabled = false;\r\n\r\n    } catch (error) {\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      console.error('Error sending AI prompt:', error);\r\n    }\r\n  } else {\r\n    console.error('No empty prompt allowed');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Your existing copyText function\r\n\r\n\r\n\r\nasync function logout() {\r\n  if (isGlossaryActive) {\r\n    await removeMatchingContentControls();\r\n  }\r\n  sessionStorage.clear();\r\n  window.location.hash = '#/new';\r\n  initialised = true;\r\n  document.getElementById('logo-header').innerHTML = ``;\r\n  login();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nexport async function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n\r\n      context.load(body, 'text');\r\n\r\n      await context.sync();\r\n\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n        context.load(searchResults, 'items');\r\n        await context.sync();\r\n\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n        const tableInsertPositions: { range: Word.Range, tag: any }[] = [];\r\n\r\n        for (const item of searchResults.items) {\r\n          if (tag.EditorValue !== \"\" && !tag.IsApplied) {\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = item.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.ComponentKeyDataType === 'TABLE') {\r\n              const range = item.getRange();\r\n              tableInsertPositions.push({ range, tag });\r\n              range.delete();\r\n            } else {\r\n              item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n            }\r\n\r\n\r\n            for (const { range, tag } of tableInsertPositions) {\r\n              const parser = new DOMParser();\r\n              const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n              const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n              for (const node of bodyNodes) {\r\n                if (node.nodeType === Node.TEXT_NODE) {\r\n                  const textContent = node.textContent?.trim();\r\n                  if (textContent) {\r\n                    textContent.split('\\n').forEach(line => {\r\n                      if (line.trim()) {\r\n                        insertLineWithHeadingStyle(range, line);\r\n                      }\r\n                    });\r\n                  }\r\n                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                  const element = node as HTMLElement;\r\n\r\n                  if (element.tagName.toLowerCase() === 'table') {\r\n                    const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                    if (rows.length === 0) {\r\n                      range.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                      continue;\r\n                    }\r\n\r\n                    const maxCols = Math.max(...rows.map(row => {\r\n                      return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                      }, 0);\r\n                    }));\r\n\r\n                    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n                    await context.sync();\r\n\r\n                    const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                    table.style = \"Grid Table 4 - Accent 1\";\r\n                    await context.sync();\r\n\r\n                    const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                    rows.forEach((row, rowIndex) => {\r\n                      const cells = Array.from(row.querySelectorAll('td, th'));\r\n                      let cellIndex = 0;\r\n\r\n                      cells.forEach((cell) => {\r\n                        while (rowspanTracker[cellIndex] > 0) {\r\n                          rowspanTracker[cellIndex]--;\r\n                          cellIndex++;\r\n                        }\r\n\r\n                        const cellText = Array.from(cell.childNodes)\r\n                          .map(node => {\r\n                            if (node.nodeType === Node.TEXT_NODE) {\r\n                              return node.textContent?.trim() || '';\r\n                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                              return (node as HTMLElement).innerText.trim();\r\n                            }\r\n                            return '';\r\n                          })\r\n                          .filter(text => text.length > 0)\r\n                          .join(' ');\r\n\r\n                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n\r\n                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                        for (let i = 1; i < colspan; i++) {\r\n                          if (cellIndex + i < maxCols) {\r\n                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                          }\r\n                        }\r\n\r\n                        if (rowspan > 1) {\r\n                          for (let i = 0; i < colspan; i++) {\r\n                            if (cellIndex + i < maxCols) {\r\n                              rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                            }\r\n                          }\r\n                        }\r\n\r\n                        cellIndex += colspan;\r\n                      });\r\n                    });\r\n                  } else {\r\n                    const elementText = element.innerText.trim();\r\n                    if (elementText) {\r\n                      elementText.split('\\n').forEach(line => {\r\n                        if (line.trim()) {\r\n                          insertLineWithHeadingStyle(range, line);\r\n                        }\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              await context.sync();\r\n            }\r\n            const endMarker = item.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n              const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n              bookmarkRange.insertBookmark(bookmarkName);\r\n              console.log(`Bookmark added: ${bookmarkName}`);\r\n              const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n              await context.sync();\r\n\r\n              // Move the cursor to this paragraph (now it's outside the bookmark)\r\n              afterBookmark.select();\r\n            }\r\n\r\n            if (start) start.insertText('', Word.InsertLocation.replace);\r\n            if (end) end.insertText('', Word.InsertLocation.replace);\r\n\r\n            await context.sync();\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n    loadGlossary()\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n      body.load(\"text\");\r\n      await context.sync(); // Sync to get the text content\r\n\r\n      const bodyText = {\r\n        \"Content\": body.text.replace(/[\\n\\r]/g, ' ')\r\n      };\r\n      try {\r\n\r\n        const data = await fetchGlossaryTemplate(dataList?.ClientID, bodyText, jwt);\r\n\r\n        layTerms = data.Data;\r\n\r\n        if (data.Data.length > 0) {\r\n          glossaryName = data.Data[0].GlossaryTemplate;\r\n          loadGlossary();\r\n        } else {\r\n          document.getElementById('app-body').innerHTML = `\r\n            <p class=\"text-center\">Data not available</p>\r\n          `;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n      }\r\n      // Sort terms by length (longest first)\r\n      layTerms.sort((a, b) => b.ClinicalTerm.length - a.ClinicalTerm.length);\r\n\r\n      const processedTerms = new Set(); // Track added larger terms\r\n\r\n      // Filter out smaller terms if they are included in a larger term\r\n      const filteredTerms = layTerms.filter(term => {\r\n        for (const biggerTerm of processedTerms) {\r\n          if (typeof biggerTerm === 'string' && biggerTerm.includes(term.ClinicalTerm.toLowerCase())) {\r\n            console.log(`Skipping \"${term.ClinicalTerm}\" because it's part of \"${biggerTerm}\"`);\r\n            return false; // Exclude this smaller term\r\n          }\r\n        }\r\n        processedTerms.add(term.ClinicalTerm.toLowerCase());\r\n        return true;\r\n      });\r\n\r\n      filteredGlossaryTerm = filteredTerms;\r\n      await removeMatchingContentControls();\r\n\r\n      const foundRanges = new Map(); // Track words already processed\r\n\r\n      const searchPromises = filteredGlossaryTerm.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      for (const searchResults of searchPromises) {\r\n\r\n        for (const range of searchResults.items) {\r\n\r\n          if (!range || !range.text) {\r\n            console.log(\"Invalid range. Skipping...\");\r\n            continue;\r\n          }\r\n\r\n          // Load existing content controls inside this range\r\n          const font = range.font;\r\n          font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n          range.load(\"contentControls\");\r\n          await context.sync();\r\n\r\n          const existingControl = range.contentControls.items.length > 0;\r\n\r\n          if (existingControl) {\r\n            console.log(`Skipping \"${range.text}\" because it already has a content control.`);\r\n            continue; // Skip if content control is already present\r\n          }\r\n          // Check if we've already processed this term at this range\r\n          if (foundRanges.has(range.text)) {\r\n            console.log(`Skipping duplicate occurrence of \"${range.text}\"`);\r\n            continue;\r\n          }\r\n          // Mark this word as processed\r\n          foundRanges.set(range.text, true);\r\n          // Remove existing content controls if any\r\n          if (range.contentControls && range.contentControls.items.length > 0) {\r\n            console.log(`Removing existing content control from: \"${range.text}\"`);\r\n            for (const control of range.contentControls.items) {\r\n              control.delete(false); // 'false' keeps the text, only removes the control\r\n            }\r\n            await context.sync(); // Ensure deletion is applied before adding a new one\r\n          }\r\n\r\n          try {\r\n            // Insert a new content control\r\n            const contentControl = range.insertContentControl();\r\n            contentControl.title = `${range.text}`;\r\n            if (font.highlightColor !== null) {\r\n              contentControl.tag = `${font.highlightColor}`;\r\n            }\r\n            contentControl.font.highlightColor = \"yellow\"; // Highlight the control\r\n            contentControl.appearance = Word.ContentControlAppearance.boundingBox;\r\n            await context.sync();\r\n          } catch (error) {\r\n            console.error(`Error inserting content control for term \"${range.text}\":`, error);\r\n          }\r\n        }\r\n      }\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      <div class=\"d-flex justify-content-center box-loader\">\r\n       <div class=\"loader\" id=\"loader\"></div></div>\r\n      \r\n`\r\n      const displayElement = document.getElementById('loader');\r\n      displayElement.style.display = 'none';\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', removeMatchingContentControls);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const loader = document.getElementById('loader');\r\n        if (loader) {\r\n          loader.style.display = 'block';\r\n        }\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        for (const searchResults of searchPromises) {\r\n\r\n          for (const range of searchResults.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n            if (\r\n              font.highlightColor !== capturedFormatting['Background Color'] ||\r\n              font.color !== capturedFormatting['Text Color'] ||\r\n              font.bold !== capturedFormatting['Bold'] ||\r\n              font.italic !== capturedFormatting['Italic'] ||\r\n              font.size !== capturedFormatting['Size'] ||\r\n              font.underline !== capturedFormatting['Underline'] ||\r\n              font.name !== capturedFormatting['Font Name']\r\n            ) {\r\n              selectedWords.push(range.text);\r\n            }\r\n\r\n          }\r\n        }\r\n        // searchPromises.forEach(searchResults => {\r\n        //   searchResults.items.forEach(item => {\r\n        //   });\r\n        // });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n    const loader = document.getElementById('loader');\r\n    loader.style.display = 'block';\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm.toLowerCase() === word.toLowerCase()) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n    loader.style.display = 'none';\r\n\r\n  }\r\n}\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  const displayElement = document.getElementById('loader');\r\n  displayElement.style.display = 'block';\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.toLowerCase().includes(clinicalTerm.toLowerCase())) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        for (const item of searchResults.items) {\r\n          // Load the font properties\r\n          item.font.load(['bold', 'italic', 'underline', 'color', 'highlightColor', 'size', 'name']);\r\n          await context.sync();  // Ensure the properties are loaded before accessing them\r\n\r\n          // Insert the layTerm while keeping the formatting\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Apply the original formatting to the new text\r\n          item.font.bold = item.font.bold;\r\n          item.font.italic = item.font.italic;\r\n          item.font.underline = item.font.underline;\r\n          item.font.color = item.font.color;\r\n          item.font.highlightColor = '#c7c7c7';\r\n          item.font.size = item.font.size;\r\n          item.font.name = item.font.name;\r\n        }\r\n\r\n        await context.sync();\r\n        displayElement.style.display = 'none';\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and preserved the original formatting.`);\r\n      } else {\r\n        displayElement.style.display = 'none';\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    displayElement.style.display = 'none';\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function removeMatchingContentControls() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <div class=\"loader\" id=\"loader\"></div>\r\n        <div id=\"highlighted-text\"></div>`;\r\n      const body = context.document.body;\r\n\r\n      // Load all content controls\r\n      const contentControls = body.contentControls;\r\n      contentControls.load(\"items\");\r\n      await context.sync();\r\n\r\n      if (contentControls.items.length === 0) {\r\n        console.log(\"No content controls found.\");\r\n        return;\r\n      }\r\n\r\n      for (const control of contentControls.items) {\r\n        if (control.title && filteredGlossaryTerm.some(term => term.ClinicalTerm.toLowerCase() === control.title.toLowerCase())) {\r\n          const range = control.getRange();\r\n          range.load(\"text\");\r\n          await context.sync();\r\n          if (control.tag && /^#[0-9A-Fa-f]{6}$/.test(control.tag)) {\r\n            range.font.highlightColor = control.tag;\r\n          } else {\r\n            range.font.highlightColor = null\r\n          }\r\n          await context.sync();\r\n          control.delete(true);\r\n        }\r\n      }\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n      `;\r\n\r\n      await context.sync();\r\n      isGlossaryActive = false;\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing content controls:\", error);\r\n  }\r\n}\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nexport async function addGenAITags() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n    let selectedClient = clientList.filter((item) => item.ID === clientId);\r\n\r\n    let sponsorOptions = clientList.map(client => {\r\n      const isSelectedClient = selectedClient.some(selected => selected.ID === client.ID);\r\n      return ` \r\n        <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" value=\"${client.ID}\" id=\"sponsor${client.ID}\" ${isSelectedClient ? 'checked disabled' : ''}>\r\n            <label class=\"form-check-label text-prewrap\" for=\"sponsor${client.ID}\">${client.Name}</label>\r\n          </div>\r\n        </li>\r\n      `;\r\n    }).join('');\r\n\r\n    document.getElementById('app-body').innerHTML = navTabs;\r\n    // Add modal HTML to the DOM\r\n    document.getElementById('add-tag-body').innerHTML = addtagbody(sponsorOptions);\r\n    const promptTemplateElement = document.getElementById('add-prompt-template')\r\n    setupPromptBuilderUI(promptTemplateElement, promptBuilderList)\r\n\r\n\r\n    document.getElementById('tag-tab').addEventListener('click', () => {\r\n      switchToAddTag()\r\n    });\r\n\r\n\r\n    document.getElementById('prompt-tab').addEventListener('click', () => {\r\n      switchToPromptBuilder()\r\n    });\r\n\r\n    //prompt starting\r\n    mentionDropdownFn('prompt', 'mention-dropdown', 'add');\r\n    //prompt end\r\n    const form = document.getElementById('genai-form');\r\n    const promptField = document.getElementById('prompt');\r\n\r\n    const nameField = document.getElementById('name');\r\n    const descriptionField = document.getElementById('description');\r\n    const saveGloballyCheckbox = document.getElementById('saveGlobally');\r\n    const availableForAllCheckbox = document.getElementById('isAvailableForAll');\r\n    const sponsorDropdownButton = document.getElementById('sponsorDropdown');\r\n    const sponsorDropdownItems = document.querySelectorAll('.dropdown-item .form-check-input');\r\n\r\n    document.getElementById('cancel-btn-gen-ai').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        loadHomepage(availableKeys)\r\n      }\r\n    });\r\n\r\n    // Check if elements exist\r\n    if (form && nameField && promptField && sponsorDropdownItems.length > 0) {\r\n      const updateDropdownLabel = () => {\r\n        if (availableForAllCheckbox.checked) {\r\n          sponsorDropdownButton.textContent = clientList.map(client => client.Name).join(\", \");\r\n        } else {\r\n          const selectedOptions = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => cb.parentElement.textContent.trim());\r\n          sponsorDropdownButton.textContent = selectedOptions.length ? selectedOptions.join(\", \") : \"Select Sponsors\";\r\n        }\r\n      };\r\n      // Form validation logic on submit\r\n      form.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n\r\n        // Reset previous validation errors\r\n        form.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));\r\n\r\n        let valid = true;\r\n\r\n        if (!(nameField as HTMLInputElement).value.trim()) {\r\n          nameField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (!(promptField as HTMLInputElement).value.trim()) {\r\n          promptField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (valid) {\r\n          // Prepare object to pass to createTextGenTag\r\n          const selectedSponsors = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => {\r\n              const client = clientList.find(client => client.ID == cb.value);\r\n              return client; // Collect the entire client object\r\n            });\r\n\r\n          const isAvailableForAll = availableForAllCheckbox.checked;\r\n          const isSaveGlobally = saveGloballyCheckbox.checked;\r\n          const aigroup = dataList.Group.find(element => element.DisplayName === 'AIGroup');\r\n          const formData = {\r\n            DisplayName: nameField.value.trim(),\r\n            Prompt: promptField.value.trim(),\r\n            Description: descriptionField.value.trim(),\r\n            GroupKeyClient: selectedSponsors, // Array of selected sponsor objects\r\n            AllClient: isAvailableForAll ? 1 : 0,\r\n            SaveGlobally: isSaveGlobally,\r\n            UserDefined: '1',\r\n            ComponentKeyDataTypeID: '1',\r\n            ComponentKeyDataAccessID: '3',\r\n            AIFlag: 1,\r\n            DocumentTypeID: dataList.DocumentTypeID,\r\n            ReportHeadID: dataList.ID,\r\n            SourceTypeID: '',\r\n            ReportHeadGroupID: aigroup.ID,\r\n            ReportHeadSourceID: ''\r\n          };\r\n\r\n          await createTextGenTag(formData);\r\n        }\r\n      });\r\n\r\n\r\n      const checkAndDisableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          if (!checkbox.disabled) {\r\n            checkbox.checked = true;\r\n            checkbox.disabled = true;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Function to enable sponsors without unchecking them\r\n      const enableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          const isSelectedClient = selectedClient.some(selected => selected.ID === parseInt(checkbox.value));\r\n          if (!isSelectedClient) {\r\n            checkbox.disabled = false;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Event listener for \"Save Globally\" checkbox\r\n\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n\r\n      saveGloballyCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n          if (this.checked) {\r\n            availableForAllCheckbox.disabled = false;\r\n            sponsorDropdownButton.disabled = false;\r\n          } else {\r\n            enableSponsors();\r\n            availableForAllCheckbox.checked = false;\r\n            availableForAllCheckbox.disabled = true;\r\n            sponsorDropdownButton.disabled = true;\r\n            sponsorDropdownItems.forEach(checkbox => {\r\n              if (!checkbox.disabled) {\r\n                checkbox.checked = false;\r\n                checkbox.disabled = false;\r\n              }\r\n            });\r\n            updateDropdownLabel();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n      availableForAllCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n\r\n          if (this.checked) {\r\n            checkAndDisableSponsors();\r\n          } else {\r\n            enableSponsors();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Add event listener to prevent dropdown close on item selection\r\n      document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', function (event) {\r\n          {\r\n            event.stopPropagation(); // Prevent dropdown from closing\r\n            const checkbox = this.querySelector('.form-check-input');\r\n            if (checkbox) {\r\n\r\n\r\n              if (checkbox.id === 'selectAll') {\r\n                const isChecked = checkbox.checked;\r\n                sponsorDropdownItems.forEach(cb => {\r\n                  if (!cb.disabled) cb.checked = isChecked;\r\n                });\r\n              }\r\n              updateDropdownLabel();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Initial label update\r\n      updateDropdownLabel();\r\n\r\n\r\n      // Clear validation errors when user types\r\n      [nameField, promptField].forEach(field => {\r\n        field.addEventListener('input', function () {\r\n          if (this.classList.contains('is-invalid') && this.value.trim()) {\r\n            this.classList.remove('is-invalid');\r\n          }\r\n          if (nameField) {\r\n            const errorDiv = document.getElementById('submition-error');\r\n            errorDiv.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('Required elements are missing or not rendered yet.');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function createTextGenTag(payload) {\r\n  try {\r\n    const iconelement = document.getElementById(`text-gen-save`);\r\n    const cancelBtnGenAi = document.getElementById('cancel-btn-gen-ai');\r\n\r\n\r\n    (cancelBtnGenAi as HTMLButtonElement).disabled = true;\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Save`;\r\n    (iconelement as HTMLButtonElement).disabled = true;\r\n    isPendingResponse = true;\r\n\r\n    const data = await addGroupKey(payload, jwt);\r\n    isPendingResponse = false;\r\n\r\n    if (data['Data'] && data['Status']) {\r\n      fetchDocument('AIpanel');\r\n    } else {\r\n      (cancelBtnGenAi as HTMLButtonElement).disabled = false;\r\n      (iconelement as HTMLButtonElement).disabled = false;\r\n      iconelement.innerHTML = `<i class=\"fa fa-check-circle me-2\"></i>Save`;\r\n      showAddTagError(data['Data']);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error creating text generation tag:', error);\r\n  }\r\n}\r\n\r\n\r\nexport function mentionDropdownFn(textareaId, DropdownId, action) {\r\n  const filterMentions = (query) => {\r\n    // Assuming availableKeys is an array of objects with DisplayName and EditorValue properties\r\n    const filtered = availableKeys.filter(item => item.AIFlag === 0).filter(item =>\r\n      item.DisplayName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    return filtered;\r\n  };\r\n  let highlightedIndex = -1;\r\n\r\n  const promptField = document.getElementById(`${textareaId}`);\r\n  const mentionDropdown = document.getElementById(`${DropdownId}`);\r\n  if (promptField) {\r\n\r\n    // Handle input events on prompt field for mentions\r\n    promptField.addEventListener('input', (e) => {\r\n      const cursorPosition = promptField.selectionStart;\r\n      const textBeforeCursor = promptField.value.slice(0, cursorPosition);\r\n      const lastHashtag = textBeforeCursor.lastIndexOf('#');\r\n      if (lastHashtag !== -1) {\r\n        const query = textBeforeCursor.slice(lastHashtag + 1).trim();\r\n        if (query.length > 0) {\r\n          const mentions = filterMentions(query);\r\n\r\n          if (mentions.length > 0) {\r\n            mentionDropdown.innerHTML = mentions.map(item => {\r\n              let editorValue = '';\r\n              if (action === 'add') {\r\n                editorValue = `#${item.DisplayName}#`;\r\n              } else {\r\n                editorValue = item.EditorValue || `#${item.DisplayName}#`;\r\n              }\r\n\r\n              return `<li class=\"dropdown-item\" data-editor-value=\"${editorValue}\">${item.DisplayName}</li>`;\r\n            }).join('');\r\n\r\n            // Get the position of the textarea and place the dropdown above it\r\n            const textareaRect = promptField.getBoundingClientRect();\r\n            mentionDropdown.style.left = `${textareaRect.left}px`;\r\n            mentionDropdown.style.bottom = `75px`; // Position above the textarea\r\n            mentionDropdown.style.display = 'block';\r\n          } else {\r\n            mentionDropdown.style.display = 'none';\r\n          }\r\n        } else {\r\n          mentionDropdown.style.display = 'none';\r\n        }\r\n      } else {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n\r\n    });\r\n\r\n    // Handle keyboard navigation in the dropdown\r\n    promptField.addEventListener('keydown', (e) => {\r\n      const items = document.querySelectorAll(`#${DropdownId} .dropdown-item`);\r\n      const totalItems = items.length;\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight down and wrap around to the top if at the end\r\n        if (highlightedIndex < totalItems - 1) {\r\n          highlightedIndex++;\r\n        } else {\r\n          highlightedIndex = 0; // Wrap to the first item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'ArrowUp') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight up and wrap around to the bottom if at the top\r\n        if (highlightedIndex > 0) {\r\n          highlightedIndex--;\r\n        } else {\r\n          highlightedIndex = totalItems - 1; // Wrap to the last item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'Enter' && highlightedIndex !== -1) {\r\n        // Select the highlighted item\r\n        const selectedItem = items[highlightedIndex];\r\n        if (selectedItem) {\r\n          selectMention(selectedItem.getAttribute('data-editor-value'));\r\n          mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n          e.preventDefault();  // Prevent form submission on Enter key\r\n        }\r\n      }\r\n    });\r\n\r\n    // Function to highlight the selected item\r\n    function updateHighlightedItem(id) {\r\n      const items = document.querySelectorAll(`#${id} .dropdown-item`);\r\n      const dropdown = document.getElementById(`${id}`);\r\n      const totalItems = items.length;\r\n\r\n      // Remove the 'active' class from all items\r\n      items.forEach(item => item.classList.remove('active'));\r\n\r\n      // Add the 'active' class to the currently highlighted item\r\n      if (highlightedIndex >= 0 && highlightedIndex < totalItems) {\r\n        const highlightedItem = items[highlightedIndex];\r\n        highlightedItem.classList.add('active');\r\n\r\n        // Ensure the highlighted item is visible within the dropdown\r\n        highlightedItem.scrollIntoView({\r\n          behavior: 'smooth',    // Smooth scroll\r\n          block: 'nearest'      // Scroll only if necessary\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Handle selecting an item from the dropdown via mouse click\r\n    mentionDropdown.addEventListener('click', (e) => {\r\n      if (e.target && e.target.matches('li')) {\r\n        const editorValue = e.target.getAttribute('data-editor-value');\r\n        selectMention(editorValue);\r\n        mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n      }\r\n    });\r\n\r\n    // Function to insert the selected mention into the prompt field\r\n    const selectMention = (editorValue) => {\r\n      const textarea = document.getElementById(`${textareaId}`);\r\n      const currentValue = textarea.value;\r\n      const cursorPosition = textarea.selectionStart;\r\n\r\n      const textBefore = currentValue.slice(0, cursorPosition);\r\n      const textAfter = currentValue.slice(cursorPosition);\r\n\r\n      const lastHashPosition = textBefore.lastIndexOf('#');\r\n      const updatedTextBefore = textBefore.slice(0, lastHashPosition); // Removing '#' symbol\r\n\r\n      textarea.value = `${updatedTextBefore}${editorValue}${textAfter}`;\r\n      const newCursorPosition = updatedTextBefore.length + editorValue.length;\r\n      textarea.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    };\r\n\r\n    // Hide the dropdown if clicked outside\r\n    document.addEventListener('click', (e) => {\r\n      if (!mentionDropdown.contains(e.target) && e.target !== promptField) {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n        const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n        for (const node of bodyNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const textContent = node.textContent?.trim();\r\n            if (textContent) {\r\n              textContent.split('\\n').forEach(line => {\r\n                if (line.trim()) {\r\n                  insertLineWithHeadingStyle(selection, line);\r\n                }\r\n              });\r\n            }\r\n          } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n            const element = node as HTMLElement;\r\n\r\n            if (element.tagName.toLowerCase() === 'table') {\r\n              const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n              if (rows.length === 0) {\r\n                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                continue;\r\n              }\r\n\r\n              const maxCols = Math.max(...rows.map(row => {\r\n                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                  return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                }, 0);\r\n              }));\r\n\r\n              const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n              await context.sync();\r\n\r\n              const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n              table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n              await context.sync();\r\n\r\n              const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n              rows.forEach((row, rowIndex) => {\r\n                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                let cellIndex = 0;\r\n\r\n                cells.forEach((cell) => {\r\n                  while (rowspanTracker[cellIndex] > 0) {\r\n                    rowspanTracker[cellIndex]--;\r\n                    cellIndex++;\r\n                  }\r\n\r\n                  const cellText = Array.from(cell.childNodes)\r\n                    .map(node => {\r\n                      if (node.nodeType === Node.TEXT_NODE) {\r\n                        return node.textContent?.trim() || '';\r\n                      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        return (node as HTMLElement).innerText.trim();\r\n                      }\r\n                      return '';\r\n                    })\r\n                    .filter(text => text.length > 0)\r\n                    .join(' ');\r\n\r\n                  const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                  const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                  // if (rowIndex === 0) {\r\n                  //   const cell = table.getCell(rowIndex, cellIndex);\r\n                  //   const paragraph = cell.body.paragraphs.getFirst();\r\n                  //   paragraph.font.bold = true;\r\n                  //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                  // }\r\n                  table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                  for (let i = 1; i < colspan; i++) {\r\n                    if (cellIndex + i < maxCols) {\r\n                      table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                    }\r\n                  }\r\n\r\n                  if (rowspan > 1) {\r\n                    for (let i = 0; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellIndex += colspan;\r\n                });\r\n              });\r\n            } else {\r\n              const elementText = element.innerText.trim();\r\n              if (elementText) {\r\n                elementText.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        if (word.EditorValue === '' || word.IsApplied) {\r\n          selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n        } else {\r\n          let content = removeQuotes(word.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\nfunction showAddTagError(message) {\r\n  const errorDiv = document.getElementById('submition-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction transformDocumentName(value: string): string {\r\n  if (!value || value.trim() === '') {\r\n    return value; // Return the input value unchanged\r\n  }\r\n\r\n  const parts = value.split('_');\r\n  if (parts.length <= 1) {\r\n    return value; // Return the input value unchanged if no underscores are present\r\n  }\r\n\r\n  return parts.slice(1).join('_').replace(/%20/g, ' ').replace(/%25/g, '%');\r\n}\r\n\r\n\r\n\r\nexport function createMultiSelectDropdown(tag) {\r\n  const isDark = theme === 'Dark';\r\n  const btnClass = isDark ? 'btn-dark text-light border-0' : 'btn-light text-dark border';\r\n  const dropdownMenuClass = isDark ? 'bg-dark text-light border-light' : 'bg-white text-dark border';\r\n  const itemClass = isDark ? 'bg-dark text-light' : 'bg-white text-dark';\r\n  const cancelBtnClass = isDark ? 'btn-danger bg-danger-clr text-light' : 'btn-danger bg-danger-clr text-white';\r\n  const saveBtnClass = isDark ? 'btn-success bg-success-clr text-light' : 'btn-success bg-success-clr text-white';\r\n\r\n  const multiSelectHTML = `\r\n  <div class='p-3 w-100'>\r\n    <div class=\"mb-3\">\r\n      <label for=\"source-select\" class=\"form-label\"><span class=\"text-danger\">*</span> Select Sources</label>\r\n      <div class=\"dropdown w-100\">\r\n        <button \r\n          class=\"btn ${btnClass} w-100 text-start d-flex justify-content-between align-items-start dropdown-toggle dropdown-toggle-sources\" \r\n          type=\"button\" \r\n          id=\"sourceDropdown\" \r\n          data-bs-toggle=\"dropdown\" \r\n          aria-expanded=\"false\">\r\n          <span id=\"sourceDropdownLabel\" class='sourceDropdownLabel'></span>\r\n          <span class=\"dropdown-toggle-icon dropdown-toggle-icon-s\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu ${dropdownMenuClass} w-100 p-2\" aria-labelledby=\"sourceDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 10000;\">\r\n          <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"selectAll\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n              <label class=\"form-check-label w-100\" for=\"selectAll\">Select All</label>\r\n            </div>\r\n          </li>\r\n          ${sourceList\r\n      .map(\r\n        (source, index) => `\r\n              <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"source-${index}\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input source-checkbox\" type=\"checkbox\" value=\"${source.SourceName}\" id=\"source-${index}\">\r\n                  <label class=\"form-check-label w-100 text-prewrap\" for=\"source-${index}\">${source.SourceName}</label>\r\n                </div>\r\n              </li>\r\n            `\r\n      )\r\n      .join('')}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-src-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n      <button id=\"ok-src-btn\" class=\"btn btn-primary\">Save</button>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  const accordionBody = document.getElementById(`chatFooter`);\r\n  accordionBody.innerHTML = multiSelectHTML;\r\n\r\n  let selectedSources = [];\r\n\r\n  const selectAllCheckbox = document.getElementById(`selectAll`);\r\n  const individualCheckboxes = document.querySelectorAll(`.source-checkbox`);\r\n  const sourceDropdownLabel = document.getElementById(`sourceDropdownLabel`);\r\n\r\n  function updateLabel() {\r\n    const selectedSourceNames = selectedSources;\r\n    if (selectedSourceNames.length > 0) {\r\n      sourceDropdownLabel.innerText = selectedSourceNames.join(', ');\r\n    } else {\r\n      sourceDropdownLabel.innerText = ' ';\r\n    }\r\n  }\r\n\r\n  selectAllCheckbox.addEventListener(\"change\", function () {\r\n    const checkboxes = document.querySelectorAll(`.source-checkbox`);\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.checked = this.checked;\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n    });\r\n\r\n    updateLabel();\r\n  });\r\n\r\n  const selectAllItem = document.querySelector(`.dropdown-item[data-checkbox-id=\"selectAll\"]`);\r\n  selectAllItem.addEventListener(\"click\", function (event) {\r\n    event.stopPropagation();\r\n  });\r\n\r\n  individualCheckboxes.forEach((checkbox) => {\r\n    checkbox.addEventListener(\"change\", function () {\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n\r\n      const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n      selectAllCheckbox.checked = allChecked;\r\n\r\n      updateLabel();\r\n    });\r\n\r\n    const listItem = checkbox.closest(\"li\");\r\n    listItem.addEventListener(\"click\", function (event) {\r\n      event.stopPropagation();\r\n    });\r\n  });\r\n\r\n  if (tag.Sources && tag.Sources.length > 0) {\r\n    individualCheckboxes.forEach((checkbox) => {\r\n      if (tag.Sources.includes(checkbox.value)) {\r\n        checkbox.checked = true;\r\n        selectedSources.push(checkbox.value);\r\n      }\r\n    });\r\n\r\n    const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n    selectAllCheckbox.checked = allChecked;\r\n    updateLabel();\r\n  }\r\n\r\n  document.getElementById(`ok-src-btn`).addEventListener(\"click\", function () {\r\n    tag.Sources = [...selectedSources];\r\n    tag.SourceValue = sourceList\r\n      .filter(source => selectedSources.includes(source.SourceName))\r\n      .map(source => source.SourceValue);\r\n\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n\r\n  document.getElementById(`cancel-src-btn`).addEventListener(\"click\", function () {\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n}\r\n\r\n\r\nasync function loadPromptTemplates() {\r\n  try {\r\n    const data = await getAllPromptTemplates(jwt);\r\n    if (data.Status && data.Data) {\r\n      promptBuilderList = data.Data;\r\n    }\r\n    // Do something with the data\r\n  } catch (error) {\r\n    console.error('Error fetching prompt templates:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function logBookmarksInSelection() {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n\r\n    // Get bookmarks in the selection\r\n    let bookmarks = range.getBookmarks(); // Returns ClientResult<string[]>\r\n\r\n    await context.sync(); // Ensure bookmarks are retrieved\r\n    if (bookmarks.value.length > 0) {\r\n      selectedNames = []\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n      }\r\n      bookmarks.value.forEach((bookmarkName) => {\r\n        let processedName = bookmarkName.split(\"_Split_\")[0];\r\n        processedName = processedName.replace(/_/g, \" \");\r\n        selectedNames.push(processedName)\r\n        const container = document.getElementById('tags-in-selected-text');\r\n        if (container) {\r\n          renderSelectedTags(selectedNames, availableKeys)// Trigger function when selection changes\r\n        }\r\n      });\r\n    } else {\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-block');\r\n        badgeWrapper.classList.add('d-none');\r\n      }\r\n    }\r\n  });\r\n}\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","baseUrl","async","insertLineWithHeadingStyle","range","line","Word","run","style","text","startsWith","substring","trim","paragraph","insertParagraph","InsertLocation","before","regex","match","lastIndex","exec","index","insertText","end","content","bold","italic","underline","formattedRange","font","UnderlineType","single","none","context","sync","removeQuotes","value","copyText","tempTextArea","createElement","body","appendChild","select","execCommand","removeChild","switchToAddTag","querySelector","classList","remove","getElementById","add","updateEditorFinalTable","data","tables","parsedContent","JSON","parse","push","jsonToHtmlTable","error","console","tableIndex","jsonData","Array","isArray","headers","Set","rows","flattenObject","prefix","result","keys","forEach","newKey","map","item","entries","k","v","join","flattenedItem","table","header","row","chatfooter","tag","theme","Sources","renderSelectedTags","selectedNames","availableKeys","badgeWrapper","innerHTML","name","toLowerCase","lowerName","find","aiTag","mention","AIFlag","ID","DisplayName","badge","className","cursor","addEventListener","displayName","bookmarks","getSelection","getBookmarks","targetBookmarkName","bookmark","split","getBookmarkRangeOrNullObject","load","isNullObject","selectMatchingBookmarkFromSelection","appBody","generateCheckboxHistory","then","html","applyThemeClasses","isDark","isLight","safeApplyClass","selector","darkClasses","lightClasses","elements","querySelectorAll","darkClassList","lightClassList","elem","swicthThemeIcon","icon","loadHomepage","searchBoxClass","searchBox","suggestionList","updateSuggestions","searchTerm","replaceChildren","filteredMentions","filter","includes","nonAITags","aiTags","createSection","labelText","mentions","isAISection","themeClasses","itemClass","labelClass","label","textContent","listItem","onclick","catch","word","type","selection","newSelection","doc","DOMParser","parseFromString","EditorValue","bodyNodes","from","childNodes","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","element","tagName","maxCols","Math","max","reduce","sum","cell","parseInt","getAttribute","insertTable","after","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","innerText","colspan","rowspan","getCell","elementText","IsApplied","nextLineParagraph","replaceMention","ComponentKeyDataType","debounceTimeout","clearTimeout","setTimeout","isPendingResponse","addGenAITags","applyAITagFn","FilteredReportHeadAIHistoryList","fetchAIHistory","history","closeBtnClass","closeBar","chatBody","chatList","promptclass","chat","Prompt","Selected","Response","generateChatHistoryHtml","chatFooterHtml","initializeAIHistoryEvents","jwt","checkbox","isChecked","event","target","checked","_","otherIndex","otherCheckbox","responseContainer","payload","response","fetch","method","stringify","ok","json","updateAiHistory","ReportHeadAIHistoryList","historyList","unshift","finalResponse","FormattedResponse","UserValue","currentlySelected","some","currentTag","isTable","aiTagList","err","bookmarkName","Date","getTime","markers","paragraphs","start","items","getRange","expandTo","insertBookmark","log","afterBookmark","insertTagPrompt","textareaValue","sendPrompt","createMultiSelectDropdown","mentionDropdownFn","navTabs","sourceList","filteredGlossaryTerm","storedUrl","documentID","organizationName","initialised","promptBuilderList","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","capturedFormatting","emptyFormat","isNoFormatTextAvailable","clientId","userId","clientList","currentYear","getFullYear","login","sessionToken","sessionStorage","getItem","loadLoginPage","toggle","handleLogin","preventDefault","organization","username","password","toLocaleLowerCase","ClientName","Username","Password","loginUser","Status","ResponseStatus","Data","Token","setItem","showLoginError","message","errorDiv","display","fetchDocument","action","getReportById","logoheader","SourceTypeList","SourceValue","SourceName","transformDocumentName","ClientID","aiGroup","Group","Name","GroupKey","GroupKeyAll","InitialTable","getAllClients","warn","fetchClients","getAllPromptTemplates","loadPromptTemplates","removeMatchingContentControls","loadGlossary","fetchGlossary","formatOptionsDisplay","htmlBody","displayCapturedFormatting","removeFormattedText","removeOptionsConfirmation","clear","logout","glossaryBtn","contains","clearCapturedFormatting","Bold","Underline","Size","removeFormatBtn","captureFormatting","emptyFormatCheckbox","disabled","formatList","Italic","size","highlightColor","color","textRanges","tagId","getAiHistory","prompt","iconelement","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","ThreadID","AssistantID","Container","PromptType","VectorID","addAiHistory","searchResults","search","matchCase","matchWholeWord","tableInsertPositions","delete","applyglossary","bodyText","fetchGlossaryTemplate","GlossaryTemplate","sort","ClinicalTerm","processedTerms","filteredTerms","term","biggerTerm","foundRanges","Map","searchPromises","contentControls","has","set","control","contentControl","insertContentControl","title","appearance","ContentControlAppearance","boundingBox","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","loader","selectedWords","words","displayElement","groupedTerms","LayTerm","clinicalTerm","mainBox","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","selectedClient","sponsorOptions","client","isSelectedClient","selected","addtagbody","container","preview","templateText","fieldsList","templateSelect","applyBtn","resetBtn","previewDiv","fieldsContainer","previewContainer","templateError","replaceKeywordsManually","keywordMap","field","id","Label","keyword","HTMLInputElement","HTMLSelectElement","insertValue","RegExp","option","toString","templateId","getPromptTemplateById","Template","div","Type","input","PromptTemplateOptionList","opt","Text","Option","selectedIndex","promptTextarea","setupPromptBuilderUI","form","promptField","nameField","descriptionField","saveGloballyCheckbox","availableForAllCheckbox","sponsorDropdownButton","sponsorDropdownItems","updateDropdownLabel","selectedOptions","cb","parentElement","valid","selectedSponsors","isAvailableForAll","isSaveGlobally","aigroup","formData","Description","GroupKeyClient","AllClient","SaveGlobally","UserDefined","ComponentKeyDataTypeID","ComponentKeyDataAccessID","DocumentTypeID","SourceTypeID","ReportHeadGroupID","ReportHeadSourceID","cancelBtnGenAi","addGroupKey","showAddTagError","createTextGenTag","checkAndDisableSponsors","enableSponsors","stopPropagation","textareaId","DropdownId","highlightedIndex","mentionDropdown","updateHighlightedItem","totalItems","highlightedItem","scrollIntoView","behavior","block","cursorPosition","selectionStart","textBeforeCursor","slice","lastHashtag","lastIndexOf","query","filterMentions","editorValue","textareaRect","getBoundingClientRect","left","bottom","selectedItem","selectMention","matches","textarea","currentValue","textBefore","textAfter","lastHashPosition","updatedTextBefore","newCursorPosition","setSelectionRange","parts","multiSelectHTML","source","accordionBody","selectedSources","selectAllCheckbox","individualCheckboxes","sourceDropdownLabel","updateLabel","selectedSourceNames","allChecked","every","closest","Number","onReady","info","host","HostType","properties","customProperties","property","orgName","retrieveDocumentProperties","processedName","logBookmarksInSelection","URL"],"sourceRoot":""}