{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/taskpane.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div class=\\\"logo-header\\\" id=\\\"logo-header\\\"></div> <div class=\\\"header bg-dark mb-2\\\" id=\\\"header\\\"> </div> <main id=\\\"app-body\\\" class=\\\"d-block\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nimport { data } from \"./data\";\r\nlet jwt = '';\r\nlet documentID = ''\r\nlet aiTagList = [];\r\nlet initialised = true;\r\nlet availableKeys = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet imageList = [];\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      if (property) {\r\n        documentID = property.value;\r\n        login()\r\n      } else {\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  console.log(sessionToken)\r\n  if (sessionToken) {\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container mt-5\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  `;\r\n\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = document.getElementById('organization').value;\r\n  const username = document.getElementById('username').value;\r\n  const password = document.getElementById('password').value;\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n  try {\r\n    const response = await fetch('https://plsdevapp.azurewebsites.net/api/user/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        ClientName: organization,\r\n        Username: username,\r\n        Password: password\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      loadLoginPage()\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === true && data['Data']) {\r\n      if (data['Data'].ResponseStatus) {\r\n        jwt = data.Data.Token;\r\n        sessionStorage.setItem('token', jwt)\r\n\r\n        window.location.hash = '#/dashboard';\r\n\r\n      } else {\r\n        loadLoginPage()\r\n      }\r\n    } else {\r\n      loadLoginPage()\r\n    }\r\n\r\n\r\n    // Handle successful login (e.g., navigate to the next page or show a success message)\r\n\r\n  } catch (error) {\r\n    loadLoginPage()\r\n    console.error('Error during login:', error);\r\n    // Handle login error (e.g., show an error message)\r\n  }\r\n}\r\n\r\nfunction displayMenu() {\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument();\r\n\r\n}\r\n\r\nasync function fetchDocument() {\r\n  try {\r\n    const response = await fetch(`https://plsdevapp.azurewebsites.net/api/report/id/${documentID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n\r\n\r\n\r\n    const data = await response.json();\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML=`\r\n        <img  id=\"main-logo\" src=\"./assets/logo.png\" alt=\"\" height=\"60\" class=\"logo\">`\r\n    document.getElementById('header').innerHTML = `\r\n\r\n    <div class=\"d-flex justify-content-around\">\r\n    <button class=\"btn  btn-dark \" id=\"mention\">Suggestions</button>\r\n            <button class=\"btn  btn-dark \" id=\"aitag\">AI Text Panel</button>\r\n\r\n        <button class=\"btn  btn-dark \" id=\"glossary\">Glossary</button>\r\n</div>\r\n\r\n`\r\n    // <button class=\"btn  btn-dark me-2\" id=\"imagebtn\">Image</button>\r\n\r\n\r\n    document.getElementById('mention').addEventListener('click', displayMentions);\r\n    document.getElementById('glossary').addEventListener('click', fetchGlossary);\r\n\r\n    document.getElementById('aitag').addEventListener('click', displayAiTagList);\r\n    // document.getElementById('imagebtn').addEventListener('click', fetchGeneralImages);\r\n\r\n\r\n\r\n\r\n    // Extracting the relevant AI group from the response\r\n    dataList = data['Data'];\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n\r\n    // Call function to display the AI Tag List on the UI\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchAIHistory(tag) {\r\n  try {\r\n    const response = await fetch(`https://plsdevapp.azurewebsites.net/api/report/ai-history/${tag.ID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n\r\n    const data = await response.json();\r\n    tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n    tag.FilteredReportHeadAIHistoryList = [];\r\n    tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n      historyList.Response = removeQuotes(historyList.Response);\r\n      tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n    });\r\n    return tag.FilteredReportHeadAIHistoryList;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nasync function generateRadioButtons(tag: any, index: number): Promise<string> {\r\n  if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n    await fetchAIHistory(tag);\r\n  }\r\n\r\n  if (tag.FilteredReportHeadAIHistoryList.length > 0) {\r\n    // Generate the HTML\r\n    const html = tag.FilteredReportHeadAIHistoryList.map((chat: any, j: number) =>\r\n      `<div class=\"row chatbox\">\r\n        <div class=\"col-md-12 mt-2 p-2\">\r\n          <span class=\"ms-3\">\r\n            <i class=\"fa fa-copy text-secondary c-pointer\" title=\"Copy Response\" id=\"copyPrompt-${index}-${j}\"></i>\r\n          </span>\r\n          <span class=\"float-end w-75 me-3\">\r\n            <div class=\"form-control h-34 d-flex align-items-center dynamic-height user\">\r\n              ${chat.Prompt}\r\n            </div>\r\n          </span>\r\n        </div>\r\n        <div class=\"col-md-12 mt-2 p-2 d-flex align-items-center\">\r\n          <span class=\"radio-select\">\r\n            <input class=\"form-check-input c-pointer\" type=\"radio\" name=\"flexRadioDefault-${index}\"\r\n              id=\"flexRadioDefault1-${index}-${j}\" ${chat.Selected === 1 ? 'checked' : ''}>\r\n          </span>\r\n          <span class=\"ms-2 w-75\">\r\n            <div class=\"form-control h-34 d-flex align-items-center dynamic-height ai-reply ${chat.Selected === 1 ? 'ai-selected-reply' : 'bg-light'}\" id='selected-response-${index}${j}'>\r\n              ${chat.Response}\r\n            </div>\r\n          </span>\r\n          <span class=\"ms-2\">\r\n            <i class=\"fa fa-copy text-secondary c-pointer\" title=\"Copy Response\" id=\"copyResponse-${index}-${j}\"></i>\r\n          </span>\r\n        </div>\r\n\r\n\r\n      </div>`\r\n    ).join('');\r\n\r\n    // Attach event listeners after the HTML is inserted\r\n    setTimeout(() => {\r\n      tag.FilteredReportHeadAIHistoryList.forEach((chat: any, j: number) => {\r\n        document.getElementById(`copyPrompt-${index}-${j}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n        document.getElementById(`copyResponse-${index}-${j}`)?.addEventListener('click', () => copyText(chat.Response));\r\n        document.getElementById(`flexRadioDefault1-${index}-${j}`)?.addEventListener('change', () => onRadioChange(tag, index, j));\r\n\r\n      });\r\n    }, 0);\r\n\r\n    return html;\r\n  } else {\r\n    return '<div>No AI history available.</div>';\r\n  }\r\n}\r\n\r\n\r\nfunction accordianContent(headerId, collapseId, tag, radioButtonsHTML, i) {\r\n  const body = `\r\n   <h2 class=\"accordion-header\" id=\"${headerId}\">\r\n  <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\"\r\n    data-bs-target=\"#${collapseId}\" aria-expanded=\"false\" aria-controls=\"${collapseId}\">\r\n    ${tag.DisplayName}\r\n  </button>\r\n</h2>\r\n<div id=\"${collapseId}\" class=\"accordion-collapse collapse\" aria-labelledby=\"${headerId}\">\r\n  <div class=\"accordion-body chatbox\" id=\"selected-response-parent-${i}\">\r\n    ${radioButtonsHTML}\r\n  </div>\r\n\r\n  <div class=\"col-md-12 d-flex align-items-center justify-content-end chatbox p-3\">\r\n    <textarea class=\"form-control\" rows=\"3\" id=\"chatbox-${i}\" placeholder=\"Type here\"></textarea>\r\n    <div class=\"d-flex align-self-end\">\r\n      <button type=\"submit\" class=\"btn btn-primary ms-2 text-white\" id=\"sendPrompt-${i}\">\r\n        <i class=\"fa fa-paper-plane text-white\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n  `\r\n\r\n  return body\r\n}\r\n\r\n\r\nasync function sendPrompt(tag, prompt, index) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n    const iconelement = document.getElementById(`sendPrompt-${index}`)\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID:\r\n        tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      Selected: 0,\r\n      ID: 0\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('https://plsdevapp.azurewebsites.net/api/report/ai-history/add', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${jwt}`\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok.');\r\n      }\r\n      const data = await response.json();\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n\r\n        tag.ReportHeadAIHistoryList = JSON.parse(\r\n          JSON.stringify(data['Data'])\r\n        );\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n        // tag.ReportHeadAIHistoryList.reverse();\r\n        tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n\r\n        const collapseId = `flush-collapseOne-${index}`;\r\n        const headerId = `flush-headingOne-${index}`;\r\n\r\n        const accordianBox = document.getElementById(`accordion-item-${index}`); // Replace 'yourUniqueId' with your desired ID\r\n\r\n\r\n        const radioButtonsHTML = await generateRadioButtons(tag, index);\r\n\r\n        accordianBox.innerHTML = accordianContent(headerId, collapseId, tag, radioButtonsHTML, index);\r\n\r\n        const iconelement = document.getElementById(`sendPrompt-${index}`)\r\n        iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`\r\n        isTagUpdating = false;\r\n      } else {\r\n        const iconelement = document.getElementById(`sendPrompt-${index}`)\r\n        iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`\r\n        isTagUpdating = false;\r\n      }\r\n\r\n      // alert('Glossary data loaded successfully.');\r\n    } catch (error) {\r\n      const iconelement = document.getElementById(`sendPrompt-${index}`)\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`\r\n      isTagUpdating = false\r\n      console.error('Error sending ai prompt:', error);\r\n      // Optionally show an error message to the user\r\n      // alert('Error fetching glossary data.');\r\n    }\r\n\r\n\r\n  } else {\r\n    console.error('No empty prompt allowed')\r\n  }\r\n}\r\n\r\n// Your existing copyText function\r\nfunction copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n\r\n}\r\n\r\n\r\nasync function displayAiTagList() {\r\n  if (isGlossaryActive) {\r\n    await clearGlossary()\r\n  }\r\n  const container = document.getElementById('app-body');\r\n  container.innerHTML = `\r\n  <div class=\"d-flex justify-content-end p-1\">\r\n     <button class=\"btn btn-primary btn-sm c-pointer text-white me-2 mb-2\" id=\"applyAITag\">\r\n        <i class=\"fa fa-robot text-light\"></i>\r\n        Apply\r\n    </button>\r\n    </div>\r\n\r\n    <div class=\"card-container\"  id=\"card-container\">\r\n    </div>\r\n  `; // Clear any previous content\r\n  const Cardcontainer = document.getElementById('card-container');\r\n    document.getElementById('applyAITag').addEventListener('click', applyAITagFn);\r\n\r\n\r\n  for (let i = 0; i < aiTagList.length; i++) {\r\n    const tag = aiTagList[i];\r\n    const accordionItem = document.createElement('div');\r\n    accordionItem.classList.add('accordion-item');\r\n    accordionItem.id = `accordion-item-${i}`; // Replace 'yourUniqueId' with your desired ID\r\n\r\n    const headerId = `flush-headingOne-${i}`;\r\n    const collapseId = `flush-collapseOne-${i}`;\r\n\r\n    const radioButtonsHTML = await generateRadioButtons(tag, i);\r\n\r\n    accordionItem.innerHTML = accordianContent(headerId, collapseId, tag, radioButtonsHTML, i);\r\n\r\n    Cardcontainer.appendChild(accordionItem);\r\n    document.getElementById(`sendPrompt-${i}`)?.addEventListener('click', () => {\r\n      const textareaValue = (document.getElementById(`chatbox-${i}`) as HTMLTextAreaElement).value;\r\n\r\n      sendPrompt(tag, textareaValue, i)\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Add event listeners after rendering\r\n  addAccordionListeners();\r\n  addCopyListeners();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nasync function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n      context.load(body, 'text');\r\n      await context.sync();\r\n\r\n      // Iterate over the aiTagList to search and replace\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        // Clean up the EditorValue by removing quotes\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        // Search for all instances of the tag.DisplayName enclosed with `#`\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n\r\n        // Load the search results to ensure they are available for further operations\r\n        context.load(searchResults, 'items');\r\n\r\n        await context.sync(); // Synchronize to fetch the search results\r\n\r\n        // Log the number of search results for debugging\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n\r\n        // Replace each found instance with tag.EditorValue\r\n        searchResults.items.forEach((item: any) => {\r\n          // Ensure the EditorValue is not empty before replacing\r\n          if (tag.EditorValue !== \"\") {\r\n            item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n          }\r\n        });\r\n\r\n        // Additional sync after each replacement\r\n        await context.sync();\r\n      }\r\n\r\n      // Final sync to apply all changes\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function onRadioChange(tag, tagIndex, chatIndex) {\r\n  if (!isTagUpdating) {\r\n    isTagUpdating = true;\r\n    const iconelement = document.getElementById(`sendPrompt-${tagIndex}`)\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`\r\n    const chat = tag.FilteredReportHeadAIHistoryList[chatIndex];\r\n    let payload = JSON.parse(JSON.stringify(chat));\r\n    payload.Container = dataList.Container;\r\n    payload.Selected = 1;\r\n\r\n    try {\r\n      const response = await fetch('https://plsdevapp.azurewebsites.net/api/report/ai-history/update', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${jwt}`\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok.');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data['Data']) {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n\r\n        // Use querySelectorAll to remove 'ai-selected-reply' from all elements\r\n        const selectedParent = document.getElementById(`selected-response-parent-${tagIndex}`)\r\n        const allSelectedDivs = selectedParent.querySelectorAll('.ai-selected-reply');\r\n        allSelectedDivs.forEach(div => {\r\n          div.classList.remove('ai-selected-reply');\r\n          div.classList.add('bg-light');\r\n        });\r\n\r\n        const selectElement = document.getElementById(`selected-response-${tagIndex}${chatIndex}`);\r\n        if (selectElement) {\r\n          selectElement.classList.remove('bg-light');\r\n          selectElement.classList.add('ai-selected-reply');\r\n        }\r\n\r\n\r\n        tag.UserValue = chat.Response;\r\n        tag.EditorValue = chat.Response;\r\n        tag.text = chat.Response;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error updating AI data:', error);\r\n    } finally {\r\n      const iconelement = document.getElementById(`sendPrompt-${tagIndex}`)\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`\r\n      isTagUpdating = false;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction selectResponse(tagIndex, chatIndex) {\r\n  // Handle the response selection logic here\r\n  console.log(`Response selected for tagIndex ${tagIndex}, chatIndex ${chatIndex}`);\r\n}\r\n\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n\r\n    if (layTerms.length === 0) {\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n      try {\r\n        const response = await fetch('https://plsdevapp.azurewebsites.net/api/glossary-template/id/3', {\r\n          method: 'GET', // or 'POST', depending on your API\r\n          headers: {\r\n            'Authorization': `Bearer ${jwt}`\r\n          }\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        layTerms = data.Data.GlossaryTemplateData;\r\n        glossaryName = data.Data.Name\r\n        loadGlossary()\r\n        // alert('Glossary data loaded successfully.');\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n        // Optionally show an error message to the user\r\n        // alert('Error fetching glossary data.');\r\n      }\r\n\r\n    } else {\r\n      loadGlossary()\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n\r\n      const searchPromises = layTerms.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: true, matchWholeWord: true });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n      await context.sync();\r\n\r\n\r\n\r\n      searchPromises.forEach(searchResults => {\r\n        searchResults.items.forEach(item => {\r\n          item.font.highlightColor = \"yellow\";\r\n        });\r\n      });\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      \r\n`\r\n\r\n\r\n\r\n\r\n      // document.getElementById('loader').style.display='none';\r\n      // document.getElementById('Clear').style.display='block';\r\n\r\n      // Set the flag when glossary is marked\r\n\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', clearGlossary);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: true });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        searchPromises.forEach(searchResults => {\r\n          searchResults.items.forEach(item => {\r\n            selectedWords.push(item.text);\r\n          });\r\n        });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm === word) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n  }\r\n}\r\n\r\n\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n\r\n      // Load the selection's text\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      // Check if the selected text contains the clinicalTerm\r\n      if (selection.text.includes(clinicalTerm)) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: true });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        searchResults.items.forEach(item => {\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Remove the highlight color (set to white or no highlight)\r\n          item.font.highlightColor = 'white';\r\n        });\r\n        await context.sync();\r\n\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and removed highlight in the document.`);\r\n      } else {\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function clearGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n    \r\n              <div class=\"loader\" id=\"loader\"></div>\r\n    \r\n            <div id=\"highlighted-text\"></div>`\r\n      const body = context.document.body;\r\n\r\n      const searchPromises = layTerms.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: true });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      searchPromises.forEach(searchResults => {\r\n        searchResults.items.forEach(item => {\r\n          item.font.highlightColor = 'white'; // Reset highlight color\r\n        });\r\n      });\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n`\r\n      await context.sync();\r\n      isGlossaryActive = false\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n    });\r\n\r\n\r\n    console.log('Glossary cleared successfully');\r\n  } catch (error) {\r\n    console.error('Error clearing glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await clearGlossary();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container mt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Search Suggestions</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"form-group\">\r\n              <input type=\"text\" id=\"search-box\" class=\"form-control\" placeholder=\"Search Suggestions...\" autocomplete=\"off\" />\r\n            </div>\r\n            <ul id=\"suggestion-list\" class=\"list-group mt-2\"></ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n\r\n    // Function to filter and display suggestions\r\n    function updateSuggestions() {\r\n      const searchTerm = searchBox.value.toLowerCase();\r\n      suggestionList.innerHTML = '';\r\n\r\n      // Filter mention list based on search term\r\n      const filteredMentions = availableKeys.filter(mention =>\r\n        mention.DisplayName.toLowerCase().includes(searchTerm)\r\n      );\r\n\r\n      // Render filtered suggestions\r\n      filteredMentions.forEach(mention => {\r\n        const listItem = document.createElement('li');\r\n        listItem.className = 'list-group-item list-group-item-action';\r\n        listItem.textContent = mention.DisplayName;\r\n        listItem.onclick = () => {\r\n          // Replace # with the selected value (adjust as needed)\r\n          replaceMention(mention.EditorValue, mention.ComponentKeyDataType);\r\n          // Clear suggestions after selection\r\n        };\r\n        suggestionList.appendChild(listItem);\r\n      });\r\n    }\r\n\r\n    // Add input event listener to the search box\r\n    searchBox.addEventListener('input', updateSuggestions);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: string, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word, 'text/html');\r\n        const tableElement = doc.querySelector('table');\r\n\r\n        if (!tableElement) {\r\n          throw new Error('No table found in the provided HTML.');\r\n        }\r\n\r\n        const rows = Array.from(tableElement.querySelectorAll('tr'));\r\n\r\n        if (rows.length === 0) {\r\n          throw new Error('The table does not contain any rows.');\r\n        }\r\n\r\n        const maxCols = Math.max(...rows.map(row => {\r\n          return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n            return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n          }, 0);\r\n        }));\r\n\r\n        const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n        await context.sync();\r\n\r\n        if (!paragraph) {\r\n          throw new Error('Failed to insert the paragraph.');\r\n        }\r\n\r\n        const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n        await context.sync();\r\n\r\n        if (!table) {\r\n          throw new Error('Failed to insert the table.');\r\n        }\r\n\r\n        const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n        rows.forEach((row, rowIndex) => {\r\n          const cells = Array.from(row.querySelectorAll('td, th'));\r\n          let cellIndex = 0;\r\n\r\n          cells.forEach((cell) => {\r\n            while (rowspanTracker[cellIndex] > 0) {\r\n              rowspanTracker[cellIndex]--;\r\n              cellIndex++;\r\n            }\r\n\r\n            const cellText = Array.from(cell.childNodes)\r\n              .map(node => {\r\n                if (node.nodeType === Node.TEXT_NODE) {\r\n                  return node.textContent?.trim() || '';\r\n                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                  return (node as HTMLElement).innerText.trim();\r\n                }\r\n                return '';\r\n              })\r\n              .filter(text => text.length > 0)\r\n              .join(' ');\r\n\r\n            const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n            const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n\r\n            // Ensure cellIndex is within bounds\r\n            if (cellIndex >= maxCols) {\r\n              // Adjust cellIndex to fit within table dimensions\r\n              cellIndex = maxCols - 1;\r\n            }\r\n\r\n            // Set cell value\r\n            try {\r\n              table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n              // Clear cells that span columns\r\n              for (let i = 1; i < colspan; i++) {\r\n                if (cellIndex + i < maxCols) {\r\n                  table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                }\r\n              }\r\n\r\n              // Update rowspanTracker\r\n              if (rowspan > 1) {\r\n                for (let i = 0; i < colspan; i++) {\r\n                  if (cellIndex + i < maxCols) {\r\n                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Advance cellIndex by colspan\r\n              cellIndex += colspan;\r\n              if (cellIndex >= maxCols) {\r\n                // Adjust cellIndex if it exceeds the table width\r\n                cellIndex = maxCols - 1;\r\n              }\r\n            } catch (cellError) {\r\n              console.error('Error setting cell value:', cellError);\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        selection.insertParagraph(word, Word.InsertLocation.before);\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\n// async function fetchGeneralImages() {\r\n//   if (imageList.length === 0) {\r\n//     try {\r\n//       const response = await fetch('https://plsdevapp.azurewebsites.net/api/image/general', {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           'Authorization': `Bearer ${jwt}`\r\n//         },\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Network response was not ok.');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       imageList = data['Data'].Image;\r\n//       imageDisplay();\r\n//     } catch (error) {\r\n//       console.error('Error during login:', error);\r\n//       // Handle login error (e.g., show an error message)\r\n//     }\r\n//   } else {\r\n//     imageDisplay()\r\n//   }\r\n\r\n\r\n// // }\r\n\r\n// function imageDisplay() {\r\n//   document.getElementById('app-body').innerHTML = `\r\n//       <div class=\"container mt-3\">\r\n//       <div class=\"card\">\r\n//         <div class=\"card-header\">\r\n//           <h5 class=\"card-title\">Search Images</h5>\r\n//         </div>\r\n//         <div class=\"card-body\">\r\n//           <div class=\"form-group\">\r\n//             <input type=\"text\" id=\"search-box\" class=\"form-control\" placeholder=\"Search Images...\" autocomplete=\"off\" />\r\n//           </div>\r\n//           <ul id=\"image-list\" class=\"list-group mt-2\"></ul>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   `\r\n\r\n//   const searchBox = document.getElementById('search-box');\r\n//   const imageBox = document.getElementById('image-list');\r\n\r\n//   // Function to filter and display suggestions\r\n//   function updateSuggestions() {\r\n//     const searchTerm = searchBox.value.toLowerCase();\r\n//     imageBox.innerHTML = '';\r\n//     // Filter mention list based on search term\r\n//     const filteredImages = imageList.filter(image =>\r\n//       image.ImageName.toLowerCase().includes(searchTerm)\r\n//     );\r\n\r\n//     // Render filtered suggestions\r\n//     filteredImages.forEach(images => {\r\n//       const listItem = document.createElement('li');\r\n//       listItem.className = 'list-group-item list-group-item-action';\r\n//       listItem.textContent = images.ImageName;\r\n//       listItem.onclick = () => {\r\n//         insertImageIntoWord(images.ImageData)\r\n//         // Replace # with the selected value (adjust as needed)\r\n//         // searchBox.value = '';\r\n//         // suggestionList.innerHTML = '';\r\n//         // replaceMention(images.EditorValue, images.ComponentKeyDataType)\r\n//         // Clear suggestions after selection\r\n//       };\r\n//       imageBox.appendChild(listItem);\r\n//     });\r\n//   }\r\n\r\n//   // Add input event listener to the search box\r\n//   searchBox.addEventListener('input', updateSuggestions);\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// async function insertImageIntoWord(base64Image) {\r\n//   await Word.run(async (context) => {\r\n//     try {\r\n//       const selection = context.document.getSelection();\r\n//       await context.sync();\r\n//       selection.insertInlinePictureFromBase64(base64Image, Word.InsertLocation.before);\r\n//       await context.sync();\r\n//     } catch (err) {\r\n//       console.log(err)\r\n//     }\r\n//   });\r\n// }"],"names":["___HTML_LOADER_IMPORT_0___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","jwt","documentID","aiTagList","initialised","availableKeys","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","loadLoginPage","getElementById","innerHTML","addEventListener","handleLogin","async","event","preventDefault","organization","value","username","password","response","fetch","method","headers","body","JSON","stringify","ClientName","Username","Password","ok","data","json","Status","ResponseStatus","Data","Token","sessionStorage","setItem","error","console","generateRadioButtons","tag","index","FilteredReportHeadAIHistoryList","ID","ReportHeadAIHistoryList","forEach","historyList","Response","removeQuotes","unshift","fetchAIHistory","html","map","chat","j","Prompt","Selected","join","setTimeout","copyText","tagIndex","chatIndex","payload","parse","Container","querySelectorAll","div","classList","remove","add","selectElement","UserValue","EditorValue","text","onRadioChange","accordianContent","headerId","collapseId","radioButtonsHTML","DisplayName","sendPrompt","prompt","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","PromptType","accordianBox","tempTextArea","createElement","appendChild","select","execCommand","removeChild","displayAiTagList","clearGlossary","Cardcontainer","applyAITagFn","accordionItem","id","textareaValue","button","collapseElement","nextElementSibling","toggle","icon","closest","querySelector","textContent","Word","run","context","load","sync","searchResults","search","matchCase","matchWholeWord","log","items","item","insertText","InsertLocation","err","fetchGlossary","GlossaryTemplateData","Name","loadGlossary","applyglossary","searchPromises","term","ClinicalTerm","font","highlightColor","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","selection","getSelection","selectedWords","push","words","displayElement","groupedTerms","word","includes","LayTerm","keys","clinicalTerm","mainBox","className","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","displayMentions","htmlBody","searchBox","suggestionList","updateSuggestions","searchTerm","toLowerCase","filter","mention","listItem","onclick","type","tableElement","DOMParser","parseFromString","rows","Array","from","maxCols","Math","max","row","reduce","sum","cell","parseInt","getAttribute","paragraph","insertParagraph","before","table","insertTable","after","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","childNodes","node","nodeType","Node","TEXT_NODE","trim","ELEMENT_NODE","innerText","colspan","rowspan","getCell","cellError","replaceMention","ComponentKeyDataType","aiGroup","Group","find","element","GroupKey","GroupKeyAll","fetchDocument","onReady","info","host","HostType","style","display","properties","customProperties","property","sessionToken","getItem","login","retrieveDocumentProperties","URL"],"sourceRoot":""}