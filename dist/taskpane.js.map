{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/index.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/data.ts","webpack://office-addin-taskpane/./src/taskpane/api.ts","webpack://office-addin-taskpane/./src/taskpane/functions.ts","webpack://office-addin-taskpane/./src/taskpane/components/home.ts","webpack://office-addin-taskpane/./src/taskpane/components/bodyelements.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./css/bootstrap3.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Link addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div id=\\\"header-nav\\\"> <div class=\\\"logo-header d-flex w-100 justify-content-between align-items-center bg-light\\\" id=\\\"logo-header\\\"> </div> </div> <main id=\\\"app-body\\\" class=\\\"d-block mh-34\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> <div id=\\\"footer\\\" class=\\\"py-2 text-center footer\\\"> </div> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const dataUrl='https://plsdevapp.azurewebsites.net'\r\nconst storeUrl='https://linkwordplugin-aphgcwcgbfdqeccs.eastus-01.azurewebsites.net'\r\nconst versionLink='2.0.0'\r\nexport {dataUrl,storeUrl,versionLink};","import { dataUrl } from \"./data\";\r\n\r\n// api.ts\r\nconst baseUrl = dataUrl // Set your actual base URL\r\n\r\nexport async function loginUser(organization: string, username: string, password: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/user/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      ClientName: organization,\r\n      Username: username,\r\n      Password: password\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n// api.ts\r\n\r\nexport async function getReportById(documentID: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/id/${documentID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getAllClients(userId: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/client/all/${userId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n\r\n\r\n  export async function getAiHistory(tagId: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/${tagId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n  export async function updateGroupKey(tag: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/head/groupkey`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(tag)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function addAiHistory(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function updateAiHistory(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/update`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n  export async function fetchGlossaryTemplate(clientId: string, bodyText: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/glossary-template/client-id/${clientId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(bodyText)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function addGroupKey(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/group-key/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getAllPromptTemplates(jwt): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/prompt-template/all`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getPromptTemplateById(id: string,jwt): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/prompt-template/${id}/data`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  ","import { generateCheckboxHistory } from \"./components/home\";\r\nimport { theme } from \"./taskpane\";\r\n\r\nexport function insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\nexport function removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\nexport async function insertSingleBookmark(text: any, DisplayName: any) {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n    // Replace spaces with underscores in DisplayName\r\n    let cleanDisplayName = DisplayName.replace(/\\s+/g, \"_\");\r\n\r\n    let uniqueStr = new Date().getTime();\r\n    let splitString = 'Split';\r\n    let bookmarkName = `${cleanDisplayName}_${splitString}_${uniqueStr}`;\r\n\r\n    // Insert text and get the range of inserted content\r\n    let insertedTextRange = range.insertText(text, Word.InsertLocation.replace);\r\n\r\n    await context.sync(); // Ensure text is inserted\r\n\r\n    // Expand the range to cover the newly inserted text and apply bookmark\r\n    insertedTextRange.insertBookmark(bookmarkName);\r\n\r\n    await context.sync(); // Ensure bookmark is inserted\r\n    console.log(`Single bookmark added: ${bookmarkName}`);\r\n  });\r\n}\r\n\r\n\r\nexport function copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n\r\n}\r\n\r\n\r\nexport function switchToPromptBuilder() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('prompt-tab').classList.add('active');\r\n  document.getElementById('add-prompt-template').classList.add('show', 'active');\r\n}\r\n\r\n\r\nexport function switchToAddTag() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('tag-tab').classList.add('active');\r\n  document.getElementById('add-tag-body').classList.add('show', 'active');\r\n}\r\n\r\nexport function updateEditorFinalTable(data) {\r\n  const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n  let match;\r\n  let tables = [];\r\n\r\n  while ((match = regex.exec(data)) !== null) {\r\n    try {\r\n      const parsedContent = JSON.parse(match[1]);\r\n      tables.push(jsonToHtmlTable(parsedContent));\r\n    } catch (error) {\r\n      console.error(\"Failed to parse JSON:\", error, match[1]);\r\n    }\r\n  }\r\n\r\n  let tableIndex = 0;\r\n  return data.replace(regex, () => tables[tableIndex++] || \"\");\r\n}\r\n\r\nfunction jsonToHtmlTable(jsonData) {\r\n  if (!jsonData || (Array.isArray(jsonData) && jsonData.length === 0)) {\r\n    return '<p>No data available</p>';\r\n  }\r\n\r\n  let headers = new Set();\r\n  let rows = [];\r\n\r\n  function flattenObject(obj, prefix = \"\", result = {}) {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key];\r\n      const newKey = prefix ? `${prefix} > ${key}` : key;\r\n\r\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n        flattenObject(value, newKey, result);\r\n      } else if (Array.isArray(value)) {\r\n        result[newKey] = value.map(item => {\r\n          return typeof item === 'object'\r\n            ? Object.entries(item).map(([k, v]) => `<strong>${k}:</strong> ${v}`).join('<br>')\r\n            : item;\r\n        }).join('<br>');\r\n      } else {\r\n        result[newKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  if (!Array.isArray(jsonData)) {\r\n    jsonData = Object.entries(jsonData).map(([key, value]) => ({ [key]: value }));\r\n  }\r\n\r\n  jsonData.forEach(item => {\r\n    let flattenedItem = flattenObject(item);\r\n    Object.keys(flattenedItem).forEach(key => headers.add(key));\r\n    rows.push(flattenedItem);\r\n  });\r\n\r\n  let table = '<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">';\r\n  table += '<tr>' + [...headers].map(header => `<th>${header}</th>`).join('') + '</tr>';\r\n  rows.forEach(row => {\r\n    table += '<tr>' + [...headers].map(header => `<td>${row[header]}</td>`).join('') + '</tr>';\r\n  });\r\n\r\n  table += '</table>';\r\n  return table;\r\n}\r\n\r\n\r\nexport async function insertTagPrompt(tag: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (tag.EditorValue === '') {\r\n        selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n      } else {\r\n        if (tag.ComponentKeyDataType === 'TABLE') {\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n\r\n          const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n          for (const node of bodyNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n              const textContent = node.textContent?.trim();\r\n              if (textContent) {\r\n                textContent.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as HTMLElement;\r\n\r\n              if (element.tagName.toLowerCase() === 'table') {\r\n                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                if (rows.length === 0) {\r\n                  selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                  continue;\r\n                }\r\n\r\n                const maxCols = Math.max(...rows.map(row => {\r\n                  return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                  }, 0);\r\n                }));\r\n\r\n                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                await context.sync();\r\n\r\n                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n                await context.sync();\r\n\r\n                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                rows.forEach((row, rowIndex) => {\r\n                  const cells = Array.from(row.querySelectorAll('td, th'));\r\n                  let cellIndex = 0;\r\n\r\n                  cells.forEach((cell) => {\r\n                    while (rowspanTracker[cellIndex] > 0) {\r\n                      rowspanTracker[cellIndex]--;\r\n                      cellIndex++;\r\n                    }\r\n\r\n                    const cellText = Array.from(cell.childNodes)\r\n                      .map(node => {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                          return node.textContent?.trim() || '';\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                          return (node as HTMLElement).innerText.trim();\r\n                        }\r\n                        return '';\r\n                      })\r\n                      .filter(text => text.length > 0)\r\n                      .join(' ');\r\n\r\n                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                    // if (rowIndex === 0) {\r\n                    //   const cell = table.getCell(rowIndex, cellIndex);\r\n                    //   const paragraph = cell.body.paragraphs.getFirst();\r\n                    //   paragraph.font.bold = true;\r\n                    //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                    // }\r\n                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                    for (let i = 1; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                      }\r\n                    }\r\n\r\n                    if (rowspan > 1) {\r\n                      for (let i = 0; i < colspan; i++) {\r\n                        if (cellIndex + i < maxCols) {\r\n                          rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    cellIndex += colspan;\r\n                  });\r\n                });\r\n              } else {\r\n                const elementText = element.innerText.trim();\r\n                if (elementText) {\r\n                  elementText.split('\\n').forEach(line => {\r\n                    if (line.trim()) {\r\n                      insertLineWithHeadingStyle(selection, line);\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          let content = removeQuotes(tag.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nexport function generateChatHistoryHtml(chatList: any[]): string {\r\n      const promptclass= theme==='Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  \r\n  return chatList.map((chat, index) =>\r\n    `<div class=\"row chat-entry m-0 p-0\">\r\n            <div class=\"col-md-12 mt-2 p-2\">\r\n                <span class=\"float-end me-1\">\r\n                    <i class=\"fa fa-copy text-secondary c-pointer\" title=\"Copy Prompt\" id=\"copyPrompt-${index}\"></i>\r\n                </span>\r\n                <span class=\"float-end w-75 me-2\">\r\n                    <div class=\"form-control h-34 d-flex align-items-center dynamic-height prompt-text ${promptclass}\">\r\n                        ${chat.Prompt}\r\n                    </div>\r\n                </span>\r\n            </div>\r\n            <div class=\"col-md-12 mb-2 p-2 d-flex\">\r\n                <span class=\"d-flex align-items-baseline w-100\">\r\n                    <div class=\"flex-grow-1 c-pointer ai-response-container px-2 pe-3 pt-3 ai-selected-response\" id=\"responseContainer-${index}\">\r\n                        <input\r\n                            class=\"form-check-input c-pointer me-2 response-checkbox\"\r\n                            type=\"checkbox\"\r\n                            id=\"checkbox-${index}\"\r\n                            ${chat.Selected === 1 ? 'checked' : ''}>\r\n                        <span id=\"responseText-${index}\">${chat.Response}</span>\r\n                        <i class=\"fa fa-copy text-secondary c-pointer ms-2\"\r\n                           title=\"Copy Response\"\r\n                           id=\"copyResponse-${index}\"></i>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        </div>`\r\n  ).join('');\r\n}\r\n\r\n\r\nexport function chatfooter(tag: any) {\r\n  const promptclass= theme==='Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n  return ` <textarea class=\"form-control ${promptclass}\"\r\n                      rows=\"5\"\r\n                      id=\"chatInput\"\r\n                      ></textarea>\r\n            <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n            <div class=\"d-flex flex-column align-self-end me-3\">\r\n              <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insertTagButton\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\"></i>\r\n              </button>\r\n              <button class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\" id=\"changeSourceButton\">\r\n              ${tooltipButton}\r\n                <i class=\"fa fa-file-lines text-white\"></i>\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\" id=\"sendPromptButton\">\r\n                <span class=\"tooltiptext\">Send</span>\r\n                <i class=\"fa fa-paper-plane text-white\"></i>\r\n              </button>\r\n            </div>`\r\n}\r\n\r\nexport function renderSelectedTags(selectedNames, availableKeys) {\r\n  const badgeWrapper = document.getElementById('tag-badge-wrapper');\r\n  badgeWrapper.innerHTML = '';\r\n\r\n  // Filter out duplicates (case-insensitive)\r\n  const uniqueNames = [...new Set(\r\n    selectedNames.map(name => name.toLowerCase())\r\n  )].map(lowerName => \r\n    selectedNames.find(name => name.toLowerCase() === lowerName)\r\n  );\r\n\r\n  uniqueNames.forEach(name => {\r\n    const badge = document.createElement('span');\r\n    badge.className = 'badge rounded-pill border bg-white text-dark px-3 py-2 shadow-sm d-flex align-items-center badge-clickable';\r\n    badge.style.cursor = 'pointer';\r\n    badge.innerHTML = `${name} <i class=\"fa-solid fa-robot ms-2 text-muted\" aria-label=\"AI Suggested\"></i>`;\r\n\r\n    badge.addEventListener('click', async () => {\r\n      await selectMatchingBookmarkFromSelection(name);\r\n    \r\n      const aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && mention.DisplayName.toLowerCase() === name.toLowerCase()\r\n      );\r\n    \r\n      if (aiTag) {\r\n        const appBody = document.getElementById('app-body');\r\n        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n    \r\n        generateCheckboxHistory(aiTag).then(html => {\r\n          appBody.innerHTML = html;\r\n        });\r\n      }\r\n    });\r\n    \r\n\r\n    badgeWrapper.appendChild(badge);\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function applyThemeClasses(theme) {\r\n  const isDark = theme === 'Dark';\r\n  const isLight = theme === 'Light';\r\n\r\n  const safeApplyClass = (selector, darkClasses, lightClasses) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    const darkClassList = darkClasses.split(' ');\r\n    const lightClassList = lightClasses.split(' ');\r\n\r\n    elements.forEach(elem => {\r\n      if (!elem) return;\r\n      // Remove all related theme classes\r\n      elem.classList.remove(...darkClassList);\r\n      elem.classList.remove(...lightClassList);\r\n      // Add only the relevant set\r\n      if (isDark) elem.classList.add(...darkClassList);\r\n      if (isLight) elem.classList.add(...lightClassList);\r\n    });\r\n  };\r\n\r\n  // Now use it for different elements\r\n  safeApplyClass('#app-body', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('#search-box', 'bg-secondary text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-menu', 'bg-dark text-light border-light', 'bg-white text-dark border');\r\n  safeApplyClass('.list-group-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('.dropdown-toggle', 'bg-dark text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  // container for the suggestion list\r\n  safeApplyClass(\r\n    '.list-group-item-action',\r\n    'bg-dark text-light list-hover-dark',\r\n    'bg-light text-dark list-hover-light'\r\n  );\r\n\r\nsafeApplyClass('#close-ai-window', 'fa-solid fa-circle-xmark bg-dark text-light', 'fa-solid fa-circle-xmark bg-light text-dark');\r\nsafeApplyClass('#chatInput', 'bg-secondary text-light', 'bg-white text-dark');\r\nsafeApplyClass('.prompt-text', 'bg-secondary text-light', 'bg-white text-dark');\r\n\r\n\r\n}\r\n\r\nexport function swicthThemeIcon(){\r\n  const themeToggle = document.getElementById('theme-toggle');\r\n  const icon = themeToggle.querySelector('i');\r\n\r\n  if (theme === 'Dark') {\r\n    icon.classList.remove('fa-moon');\r\n    icon.classList.add('fa-sun');\r\n  } else if (theme === 'Light') {\r\n    icon.classList.remove('fa-sun');\r\n    icon.classList.add('fa-moon');\r\n  }\r\n}\r\n\r\nasync function selectMatchingBookmarkFromSelection(displayName) {\r\n  return Word.run(async (context) => {\r\n    const selection = context.document.getSelection();\r\n    const bookmarks = selection.getBookmarks(); // ClientResult<string[]>\r\n    await context.sync();\r\n\r\n    const targetBookmarkName = bookmarks.value.find(bookmark => {\r\n      const cleanName = bookmark.split('_Split_')[0].replace(/_/g, ' ');\r\n      return cleanName.toLowerCase() === displayName.toLowerCase();\r\n    });\r\n\r\n    if (targetBookmarkName) {\r\n      const range = context.document.getBookmarkRangeOrNullObject(targetBookmarkName);\r\n      range.load('isNullObject');\r\n      await context.sync();\r\n\r\n      if (!range.isNullObject) {\r\n        range.select(); // Select the entire bookmark\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { getPromptTemplateById, updateGroupKey, updateAiHistory } from \"../api\";\r\nimport { chatfooter, copyText, generateChatHistoryHtml, insertLineWithHeadingStyle, insertSingleBookmark, removeQuotes, switchToAddTag, updateEditorFinalTable } from \"../functions\";\r\nimport { addGenAITags, applyAITagFn, availableKeys, createMultiSelectDropdown, fetchAIHistory, isPendingResponse, jwt, mentionDropdownFn, selectedNames, sendPrompt, theme } from \"../taskpane\";\r\n\r\nlet preview = '';\r\n\r\n\r\nexport function loadHomepage(availableKeys) {\r\n    const searchBoxClass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-3\">\r\n        <div class=\"d-flex justify-content-end px-2\">\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Action\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"add-btn-tag\">\r\n                            <i class=\"fa fa-plus me-2\" aria-hidden=\"true\"></i> Add\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"apply-btn-tag\">\r\n                            <i class=\"fa-solid fa-circle-check me-2\"></i> Apply\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group px-2 pt-2\">\r\n            <input type=\"text\" id=\"search-box\" class=\"form-control ${searchBoxClass}\" placeholder=\"Search Tags...\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <ul id=\"suggestion-list\" class=\"list-group mt-2 px-2\"></ul>\r\n        \r\n        <div id=\"tags-in-selected-text\" class=\"mt-2 px-2 selected-text-box d-none\">\r\n            <label class=\"form-label mb-2 fw-bold\">Tags in Selected Text</label>\r\n            <div class=\"d-flex flex-wrap gap-2\" id=\"tag-badge-wrapper\"></div>\r\n        </div>\r\n    </div>`;\r\n\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n\r\n    function updateSuggestions() {\r\n        const searchTerm = searchBox.value.trim().toLowerCase();\r\n        suggestionList.replaceChildren(); // Clear previous results\r\n        if (searchTerm === '') {\r\n            suggestionList.innerHTML = ''\r\n            return;\r\n        }\r\n\r\n        const filteredMentions = availableKeys.filter(mention =>\r\n            mention.DisplayName.toLowerCase().includes(searchTerm)\r\n        );\r\n\r\n        const nonAITags = filteredMentions.filter(m => m.AIFlag === 0);\r\n        const aiTags = filteredMentions.filter(m => m.AIFlag === 1);\r\n\r\n        const createSection = (labelText, mentions, isAISection = false) => {\r\n            if (mentions.length === 0) return;\r\n\r\n            // Define the theme classes based on the current theme\r\n            const themeClasses = theme === 'Dark'\r\n                ? { itemClass: 'bg-dark text-light list-hover-dark', labelClass: 'bg-dark text-light' }\r\n                : { itemClass: 'bg-light text-dark list-hover-light', labelClass: 'bg-light text-dark' };\r\n\r\n\r\n            // Create the section label\r\n            const label = document.createElement('li');\r\n            label.className = `list-group-item fw-bold text-secondary ${themeClasses.labelClass}`;\r\n            label.textContent = labelText;\r\n            suggestionList.appendChild(label);\r\n\r\n            // Loop through mentions and create the list items\r\n            mentions.forEach(mention => {\r\n                const listItem = document.createElement('li');\r\n                listItem.className = `list-group-item list-group-item-action ${themeClasses.itemClass}`; // Apply the theme classes\r\n\r\n                // Create the icon for AI or non-AI tags\r\n                const icon = isAISection\r\n                    ? `<i class=\"fa-solid fa-robot text-muted me-2\"></i>`\r\n                    : `<i class=\"fa-solid fa-layer-group text-muted me-2\"></i>`;\r\n\r\n                listItem.innerHTML = `${icon} ${mention.DisplayName}`;\r\n\r\n                listItem.onclick = () => {\r\n                    if (isAISection) {\r\n                        const appBody = document.getElementById('app-body');\r\n                        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n                        generateCheckboxHistory(mention).catch(error => {\r\n                            appBody.innerHTML = '<div class=\"text-danger p-2\">Error loading data</div>';\r\n                        }).then(html => {\r\n                            appBody.innerHTML = html;\r\n                        });\r\n                    } else {\r\n                        replaceMention(mention, mention.ComponentKeyDataType);\r\n                        suggestionList.replaceChildren();\r\n                    }\r\n                };\r\n\r\n                suggestionList.appendChild(listItem);\r\n            });\r\n        };\r\n\r\n        // Call the function for each section\r\n        createSection('Properties', nonAITags, false);\r\n        createSection('AI Tags', aiTags, true);\r\n\r\n    }\r\n\r\n    // Add input event listener to the search box\r\n    let debounceTimeout;\r\n    searchBox.addEventListener('input', () => {\r\n        clearTimeout(debounceTimeout);\r\n        debounceTimeout = setTimeout(updateSuggestions, 300); // Delay input handling by 300ms\r\n    });\r\n\r\n    document.getElementById('add-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            addGenAITags();\r\n        }\r\n    });\r\n\r\n    document.getElementById('apply-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            applyAITagFn();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n    return Word.run(async (context) => {\r\n      try {\r\n        const selection = context.document.getSelection();\r\n        await context.sync();\r\n  \r\n        if (!selection) {\r\n          throw new Error('Selection is invalid or not found.');\r\n        }\r\n  \r\n        let newSelection = selection;\r\n  \r\n        if (type === 'TABLE') {\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n          const bodyNodes = Array.from(doc.body.childNodes);\r\n  \r\n          await context.sync();\r\n  \r\n          for (const node of bodyNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n              const textContent = node.textContent?.trim();\r\n              if (textContent) {\r\n                textContent.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as HTMLElement;\r\n  \r\n              if (element.tagName.toLowerCase() === 'table') {\r\n                const rows = Array.from(element.querySelectorAll('tr'));\r\n  \r\n                if (rows.length === 0) {\r\n                  selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                  continue;\r\n                }\r\n  \r\n                const maxCols = Math.max(...rows.map(row => {\r\n                  return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                  }, 0);\r\n                }));\r\n  \r\n                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                await context.sync();\r\n  \r\n                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n  \r\n                await context.sync();\r\n  \r\n                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n  \r\n                rows.forEach((row, rowIndex) => {\r\n                  const cells = Array.from(row.querySelectorAll('td, th'));\r\n                  let cellIndex = 0;\r\n  \r\n                  cells.forEach((cell) => {\r\n                    while (rowspanTracker[cellIndex] > 0) {\r\n                      rowspanTracker[cellIndex]--;\r\n                      cellIndex++;\r\n                    }\r\n  \r\n                    const cellText = Array.from(cell.childNodes)\r\n                      .map(node => {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                          return node.textContent?.trim() || '';\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                          return (node as HTMLElement).innerText.trim();\r\n                        }\r\n                        return '';\r\n                      })\r\n                      .filter(text => text.length > 0)\r\n                      .join(' ');\r\n  \r\n                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n  \r\n                    for (let i = 1; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                      }\r\n                    }\r\n  \r\n                    if (rowspan > 1) {\r\n                      for (let i = 0; i < colspan; i++) {\r\n                        if (cellIndex + i < maxCols) {\r\n                          rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                        }\r\n                      }\r\n                    }\r\n  \r\n                    cellIndex += colspan;\r\n                  });\r\n                });\r\n  \r\n                newSelection = table.getCell(0, 0); // Set the cursor to the start of the table\r\n              } else {\r\n                const elementText = element.innerText.trim();\r\n                if (elementText) {\r\n                  elementText.split('\\n').forEach(line => {\r\n                    if (line.trim()) {\r\n                      insertLineWithHeadingStyle(selection, line);\r\n                    }\r\n                  });\r\n                }\r\n                newSelection = selection; // If it's not a table, just use the existing selection.\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          if (word.EditorValue === '' || word.IsApplied) {\r\n            selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n          } else {\r\n            let content = removeQuotes(word.EditorValue);\r\n            let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n            lines.forEach(line => {\r\n              selection.insertParagraph(line, Word.InsertLocation.before);\r\n            });\r\n          }\r\n          newSelection = selection; // After inserting the text, set selection to it.\r\n        }\r\n  \r\n        // Move the cursor to the next line after content insertion\r\n        const nextLineParagraph = selection.insertParagraph(\"\", Word.InsertLocation.after);\r\n        await context.sync();\r\n  \r\n        // Set the new cursor position after content\r\n        newSelection = nextLineParagraph;\r\n        selection.select(); // Select the new paragraph where the cursor will be\r\n        await context.sync();\r\n  \r\n      } catch (error) {\r\n        console.error('Detailed error:', error);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\nexport async function openAITag(tag) {\r\n    tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n    });\r\n\r\n\r\n}\r\n\r\nexport async function generateCheckboxHistory(tag) {\r\n    if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n        await fetchAIHistory(tag);\r\n    }\r\n\r\n    const history = tag.FilteredReportHeadAIHistoryList;\r\n\r\n    if (history.length === 0) {\r\n        return '<div>No AI history available.</div>';\r\n    }\r\n\r\n    // Check current theme\r\n    const isDark = theme === 'Dark';\r\n    const closeBtnClass = isDark\r\n        ? 'fa-solid fa-circle-xmark bg-dark text-light'\r\n        : 'fa-solid fa-circle-xmark bg-light text-dark';\r\n\r\n    const closeBar = `\r\n        <div class=\"d-flex justify-content-between align-items-center px-2 pt-3\">\r\n            <div class=\"d-flex align-items-center ms-3\">\r\n                <i class=\"fa fa-robot text-muted me-2\"></i>\r\n                <span class=\"fw-bold\">${tag.DisplayName}</span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-center align-items-center me-3 c-pointer\" id=\"close-btn-tag\">\r\n                <i class=\"${closeBtnClass}\" id=\"close-ai-window\"></i>\r\n            </div>\r\n        </div>\r\n        <hr class=\"mt-2 mb-1 mx-3\">\r\n    `;\r\n\r\n    const chatBody = `\r\n        <div class=\"chat-body\">\r\n            ${generateChatHistoryHtml(history)}\r\n        </div>\r\n    `;\r\n\r\n    const chatFooterHtml = `\r\n        <div class=\"d-flex align-items-end justify-content-end chatbox p-2\" id=\"chatFooter\">\r\n            ${chatfooter(tag)}\r\n        </div>\r\n    `;\r\n\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);  // Make sure jwt and availableKeys are in scope\r\n\r\n    return `${closeBar}${chatBody}${chatFooterHtml}`;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function setupPromptBuilderUI(container, promptBuilderList) {\r\n\r\n    // Static template and field definitions\r\n    let preview = '';\r\n    let templateText = '';\r\n\r\n    // Field configs (can be extended)\r\n    let fieldsList = [];\r\n\r\n    // Create the form container\r\n    // Create the form container\r\n    container.innerHTML = `\r\n  <div class=\"form-group mb-3 p-3 pt-0\">\r\n    <label class='form-label'><span class=\"text-danger\">*</span> Prompt Builder Template</label>\r\n    <select id=\"promptBuilderTemplate\" class=\"form-control\">\r\n      <option value=\"\" disabled selected>Select a template</option>\r\n    </select>\r\n    <div id=\"templateError\" class=\"invalid-feedback d-none\">Type is required.</div>\r\n  </div>\r\n\r\n  <div id=\"fieldsContainer\"></div>\r\n\r\n  <div class=\"form-group mb-3 p-3 pt-0\" id=\"previewContainer\" style=\"display: none;\">\r\n    <label class=\"mb-2\">Preview</label>\r\n    <div id=\"preview\" class=\"form-control\"></div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between px-3 align-items-center mt-3\">\r\n    <span id=\"resetBtn\" class=\"text-primary fw-bold\" style=\"cursor: pointer;\">Reset</span>\r\n    <button id=\"applyBtn\" class=\"btn btn-primary text-white\" disabled>Apply Prompt</button>\r\n  </div>\r\n`;\r\n\r\n    // Element references\r\n    const templateSelect = container.querySelector('#promptBuilderTemplate') as HTMLSelectElement;\r\n    const applyBtn = container.querySelector('#applyBtn') as HTMLButtonElement;\r\n    const resetBtn = container.querySelector('#resetBtn') as HTMLSpanElement;\r\n    const previewDiv = container.querySelector('#preview') as HTMLDivElement;\r\n    const fieldsContainer = container.querySelector('#fieldsContainer') as HTMLDivElement;\r\n    const previewContainer = container.querySelector('#previewContainer') as HTMLDivElement;\r\n    const templateError = container.querySelector('#templateError') as HTMLDivElement;\r\n\r\n    // Populate template dropdown\r\n    promptBuilderList.forEach((item) => {\r\n        const option = document.createElement('option');\r\n        option.value = item.ID.toString();\r\n        option.textContent = item.Name;\r\n        templateSelect.appendChild(option);\r\n    });\r\n\r\n    templateSelect.addEventListener('change', async () => {\r\n        const templateId = templateSelect.value;\r\n        const jwt = sessionStorage.getItem('token') || '';\r\n\r\n        const data = await getPromptTemplateById(templateId, jwt);\r\n        if (data.Status && data.Data) {\r\n            fieldsList = data.Data;\r\n            preview = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n\r\n            templateText = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n        }\r\n        if (!templateId) {\r\n            templateError.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        templateError.classList.add('d-none');\r\n\r\n        renderFields();\r\n        updatePreview();\r\n    });\r\n\r\n    function renderFields() {\r\n        fieldsContainer.innerHTML = '';\r\n\r\n        fieldsList.forEach((field) => {\r\n            const div = document.createElement('div');\r\n            div.className = 'form-group mb-3 p-3 pt-0';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = field.Label;\r\n            div.appendChild(label);\r\n\r\n            if (field.Type === 1) {\r\n                const input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.className = 'form-control';\r\n                input.id = field.Label;\r\n                input.addEventListener('input', replaceKeywordsManually);\r\n                div.appendChild(input);\r\n            } else if (field.Type === 2) {\r\n                const select = document.createElement('select');\r\n                select.className = 'form-control';\r\n                select.id = field.Label;\r\n                field.PromptTemplateOptionList.forEach((opt: any) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = opt.Text;\r\n                    option.textContent = opt.Option;\r\n                    select.appendChild(option);\r\n                });\r\n                select.addEventListener('change', replaceKeywordsManually);\r\n                div.appendChild(select);\r\n            }\r\n\r\n            fieldsContainer.appendChild(div);\r\n        });\r\n    }\r\n\r\n    function replaceKeywordsManually() {\r\n        const keywordMap: { [key: string]: string } = {};\r\n\r\n        fieldsList.forEach((field) => {\r\n            const id = field.Label;\r\n            const keyword = `#${id}#`;\r\n\r\n            let value = '';\r\n            const element = document.getElementById(id) as HTMLInputElement | HTMLSelectElement;\r\n\r\n            if (element) {\r\n                value = (element instanceof HTMLInputElement || element instanceof HTMLSelectElement)\r\n                    ? element.value\r\n                    : '';\r\n            }\r\n\r\n            keywordMap[keyword] = value ? value : keyword;\r\n        });\r\n\r\n        let insertValue = templateText;\r\n        for (const [keyword, value] of Object.entries(keywordMap)) {\r\n            insertValue = insertValue.replace(new RegExp(keyword, 'g'), value);\r\n        }\r\n\r\n        preview = insertValue;\r\n        previewDiv.textContent = preview;\r\n        previewContainer.style.display = preview ? 'block' : 'none';\r\n        applyBtn.disabled = preview === '';\r\n    }\r\n\r\n    function updatePreview() {\r\n        replaceKeywordsManually();\r\n    }\r\n\r\n    function resetForm() {\r\n        // Reset only the dynamic field values\r\n        fieldsList.forEach((field) => {\r\n            const element = document.getElementById(field.Label) as HTMLInputElement | HTMLSelectElement;\r\n            if (element) {\r\n                if (element instanceof HTMLInputElement) {\r\n                    element.value = '';\r\n                } else if (element instanceof HTMLSelectElement) {\r\n                    element.selectedIndex = 0; // optional: reset to first option\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clear preview\r\n        previewDiv.textContent = templateText;\r\n        preview = templateText;\r\n    }\r\n\r\n\r\n    function applyPrompt() {\r\n        if (!preview) return;\r\n\r\n        const promptTextarea = document.getElementById('prompt') as HTMLTextAreaElement;\r\n        if (promptTextarea) {\r\n            promptTextarea.value = preview;\r\n            switchToAddTag()\r\n        }\r\n\r\n    }\r\n\r\n    resetBtn.addEventListener('click', resetForm);\r\n    applyBtn.addEventListener('click', applyPrompt);\r\n}\r\n\r\n\r\nasync function insertTagPrompt(tag: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n            const cleanDisplayName = tag.DisplayName.replace(/\\s+/g, \"_\");\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.EditorValue === '') {\r\n                selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n            } else {\r\n                if (tag.ComponentKeyDataType === 'TABLE') {\r\n                    const parser = new DOMParser();\r\n                    const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n                    const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                    for (const node of bodyNodes) {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                            const textContent = node.textContent?.trim();\r\n                            if (textContent) {\r\n                                textContent.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                            const element = node as HTMLElement;\r\n\r\n                            if (element.tagName.toLowerCase() === 'table') {\r\n                                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                                if (rows.length === 0) {\r\n                                    selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                    continue;\r\n                                }\r\n\r\n                                const maxCols = Math.max(...rows.map(row => {\r\n                                    return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                    }, 0);\r\n                                }));\r\n\r\n                                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                                await context.sync();\r\n\r\n                                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                                table.style = \"Grid Table 4 - Accent 1\";\r\n                                await context.sync();\r\n\r\n                                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                                rows.forEach((row, rowIndex) => {\r\n                                    const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                    let cellIndex = 0;\r\n\r\n                                    cells.forEach((cell) => {\r\n                                        while (rowspanTracker[cellIndex] > 0) {\r\n                                            rowspanTracker[cellIndex]--;\r\n                                            cellIndex++;\r\n                                        }\r\n\r\n                                        const cellText = Array.from(cell.childNodes)\r\n                                            .map(node => {\r\n                                                if (node.nodeType === Node.TEXT_NODE) {\r\n                                                    return node.textContent?.trim() || '';\r\n                                                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                    return (node as HTMLElement).innerText.trim();\r\n                                                }\r\n                                                return '';\r\n                                            })\r\n                                            .filter(text => text.length > 0)\r\n                                            .join(' ');\r\n\r\n                                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                        for (let i = 1; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                            }\r\n                                        }\r\n\r\n                                        if (rowspan > 1) {\r\n                                            for (let i = 0; i < colspan; i++) {\r\n                                                if (cellIndex + i < maxCols) {\r\n                                                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        cellIndex += colspan;\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                const elementText = element.innerText.trim();\r\n                                if (elementText) {\r\n                                    elementText.split('\\n').forEach(line => {\r\n                                        if (line.trim()) {\r\n                                            insertLineWithHeadingStyle(selection, line);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let content = removeQuotes(tag.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/);\r\n                    lines.forEach(line => {\r\n                        selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n                const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                bookmarkRange.insertBookmark(bookmarkName);\r\n                console.log(`Bookmark added: ${bookmarkName}`);\r\n                const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n                await context.sync();\r\n\r\n                // Move the cursor to this paragraph (now it's outside the bookmark)\r\n                afterBookmark.select();\r\n            }\r\n\r\n            if (start) start.insertText('', Word.InsertLocation.replace);\r\n            if (end) end.insertText('', Word.InsertLocation.replace);\r\n\r\n            await context.sync();\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport function initializeAIHistoryEvents(tag: any, jwt: string, availableKeys: any) {\r\n    setTimeout(() => {\r\n        tag.FilteredReportHeadAIHistoryList.forEach((chat: any, index: number) => {\r\n            // Copy buttons\r\n            document.getElementById(`copyPrompt-${index}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n            document.getElementById(`copyResponse-${index}`)?.addEventListener('click', () => copyText(chat.Response));\r\n\r\n            // Close button\r\n            document.getElementById(`close-btn-tag`)?.addEventListener('click', () => loadHomepage(availableKeys));\r\n\r\n            // Checkbox logic\r\n            const checkbox = document.getElementById(`checkbox-${index}`) as HTMLInputElement;\r\n            if (checkbox) {\r\n                checkbox.addEventListener('change', async (event: Event) => {\r\n                    const isChecked = (event.target as HTMLInputElement).checked;\r\n\r\n                    // Reset all\r\n                    tag.FilteredReportHeadAIHistoryList.forEach((_: any, otherIndex: number) => {\r\n                        const otherCheckbox = document.getElementById(`checkbox-${otherIndex}`) as HTMLInputElement;\r\n                        const responseContainer = document.getElementById(`responseContainer-${otherIndex}`);\r\n                        if (otherCheckbox) otherCheckbox.checked = false;\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.remove('ai-selected-response');\r\n                            responseContainer.classList.add('bg-light');\r\n                        }\r\n                        tag.FilteredReportHeadAIHistoryList[otherIndex].Selected = 0;\r\n                    });\r\n\r\n                    // Set selected\r\n                    if (isChecked) {\r\n                        checkbox.checked = true;\r\n                        const responseContainer = document.getElementById(`responseContainer-${index}`);\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.add('ai-selected-response');\r\n                            responseContainer.classList.remove('bg-light');\r\n                        }\r\n                        chat.Selected = 1;\r\n                    } else {\r\n                        chat.Selected = 0;\r\n                    }\r\n\r\n                    try {\r\n                        const data = await updateAiHistory(chat, jwt);\r\n                        if (data['Data']) {\r\n                            tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n                            tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n                            tag.ReportHeadAIHistoryList.forEach((historyList: any) => {\r\n                                historyList.Response = removeQuotes(historyList.Response);\r\n                                tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n                            });\r\n\r\n                            const finalResponse = chat.FormattedResponse\r\n                                ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                : chat.Response;\r\n\r\n                            tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n                            tag.UserValue = finalResponse;\r\n                            tag.EditorValue = finalResponse;\r\n                            tag.text = finalResponse;\r\n\r\n                            const currentlySelected = tag.FilteredReportHeadAIHistoryList.some((item: any) => item.Selected === 1);\r\n                            tag.IsApplied = !currentlySelected;\r\n                        }\r\n                    } catch (err) {\r\n                        console.error('Failed to update AI history:', err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Button: Insert Tag\r\n        document.getElementById(`insertTagButton`)?.addEventListener('click', () => {\r\n            if (!tag.IsApplied) {\r\n                insertTagPrompt(tag);\r\n            }\r\n        });\r\n\r\n        // Button: Send Prompt\r\n        document.getElementById(`sendPromptButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            sendPrompt(tag, textareaValue);\r\n        });\r\n\r\n        // Button: Change Source\r\n        document.getElementById(`changeSourceButton`)?.addEventListener('click', () => {\r\n            createMultiSelectDropdown(tag);\r\n        });\r\n\r\n        // Mention dropdown\r\n        mentionDropdownFn(`chatInput`, `mention-dropdown`, 'edit');\r\n    }, 0);\r\n}\r\n","import { theme } from \"../taskpane\";\r\n\r\nfunction addtagbody(sponsorOptions) {\r\n  const body = `<div class=\"modal-dialog\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-body p-3 pt-0\">\r\n      <form id=\"genai-form\" autocomplete=\"off\" novalidate>\r\n        <!-- Name Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"name\" class=\"form-label\"><span class=\"text-danger\">*</span> Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" required>\r\n          <div class=\"invalid-feedback\">Name is required.</div>\r\n          <div id=\"submition-error\" class=\"invalid-feedback\" style=\"display: none;\"></div>\r\n\r\n        </div>\r\n\r\n        <!-- Description Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" rows=\"6\"></textarea>\r\n        </div>\r\n\r\n        <!-- Prompt Field -->\r\n        <div class=\"mb-3 prompt-box\">\r\n          <label for=\"prompt\" class=\"form-label\"><span class=\"text-danger\">*</span> Prompt \r\n            <small class=\"text-secondary\">(Note: Use # tag for content suggestions)</small>\r\n          </label>\r\n          <textarea class=\"form-control\" id=\"prompt\" rows=\"6\"  required></textarea>\r\n          <div class=\"invalid-feedback\">Prompt is required.</div>\r\n          <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n        </div>\r\n\r\n        <!-- Save Globally Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"saveGlobally\">\r\n          <label class=\"form-check-label\" for=\"saveGlobally\">Save Globally</label>\r\n        </div>\r\n\r\n        <!-- Available to All Sponsors Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"isAvailableForAll\" disabled>\r\n          <label class=\"form-check-label\" for=\"isAvailableForAll\">Available to All Sponsors</label>\r\n        </div>\r\n\r\n        <!-- Sponsor Dropdown -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"sponsor\" class=\"form-label\"><span class=\"text-danger\">*</span> Sponsor</label>\r\n          <div class=\"dropdown w-100\">\r\n            <button \r\n              class=\"btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle\" \r\n              type=\"button\" \r\n              id=\"sponsorDropdown\" \r\n              data-bs-toggle=\"dropdown\" \r\n              aria-expanded=\"false\" \r\n              disabled>\r\n              <span id=\"sponsorDropdownLabel\">Select Sponsors</span>\r\n              <span class=\"dropdown-toggle-icon\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu w-100 p-2\" aria-labelledby=\"sponsorDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\r\n              <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n                  <label class=\"form-check-label\" for=\"selectAll\">Select All</label>\r\n                </div>\r\n              </li>\r\n              ${sponsorOptions}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-btn-gen-ai\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"text-gen-save\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n  return body\r\n}\r\n\r\nfunction logoheader(storedUrl) {\r\n  const themeicon=theme==='Dark'?'fa-sun':'fa-moon'\r\n  const body = `\r\n    <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n    <div class=\"icon-nav me-3\">\r\n      <i class=\"fa fa-home c-pointer me-3\" title=\"Home\" id=\"home\"></i>\r\n      <div class=\"dropdown d-inline\">\r\n        <i class=\"fa fa-tools c-pointer me-3\" id=\"settingsDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" title=\"Settings\"></i>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"settingsDropdown\">\r\n          <li>\r\n            <a class=\"dropdown-item\" href=\"#\" id=\"define-formatting\">\r\n              <i class=\"fa fa-sliders-h me-2\" aria-hidden=\"true\"></i> Define Formatting\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"glossary\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-book me-2\" aria-hidden=\"true\"></i> Apply Glossary\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"removeFormatting\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-eraser me-2\" aria-hidden=\"true\"></i> Remove Formatting\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Theme Toggle Icon -->\r\n      <span id=\"theme-toggle\"><i class=\"fa ${themeicon} c-pointer me-3\" title=\"Toggle Theme\"></i></span>\r\n\r\n      <i class=\"fa fa-sign-out c-pointer me-3\" id=\"logout\" title=\"Logout\"></i>\r\n    </div>    \r\n  `\r\n  return body;\r\n}\r\n\r\nconst navTabs = `<ul class=\"nav nav-tabs\" id=\"tabList\" role=\"tablist\">\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link active\" id=\"tag-tab\" data-bs-toggle=\"tab\" href=\"#tag\" role=\"tab\">Tag</a>\r\n  </li>\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link\" id=\"prompt-tab\" data-bs-toggle=\"tab\" href=\"#prompt\" role=\"tab\">Prompt builder</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content p-3 border border-top-0\">\r\n  <div class=\"tab-pane fade show active\" id=\"add-tag-body\" role=\"tabpanel\" aria-labelledby=\"tag-tab\">\r\n  </div>\r\n  <div class=\"tab-pane fade\" id=\"add-prompt-template\" role=\"tabpanel\" aria-labelledby=\"prompt-tab\">\r\n  </div>\r\n</div>\r\n`\r\n\r\n\r\n\r\nconst promptbuilderbody = `<div>hi</div>`\r\n\r\n\r\nexport { navTabs, addtagbody, promptbuilderbody, logoheader };","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\nimport { dataUrl, storeUrl, versionLink } from \"./data\";\r\nimport { generateCheckboxHistory, initializeAIHistoryEvents, loadHomepage, setupPromptBuilderUI } from \"./components/home\";\r\nimport { applyThemeClasses, chatfooter, copyText, insertTagPrompt, renderSelectedTags, swicthThemeIcon, switchToAddTag, switchToPromptBuilder, updateEditorFinalTable } from \"./functions\";\r\nimport { addtagbody, logoheader, navTabs, promptbuilderbody } from \"./components/bodyelements\";\r\nimport { addAiHistory, addGroupKey, fetchGlossaryTemplate, getAiHistory, getAllClients, getAllPromptTemplates, getReportById, loginUser, updateAiHistory, updateGroupKey } from \"./api\";\r\nexport let jwt = '';\r\nlet storedUrl = storeUrl\r\nlet documentID = ''\r\nlet organizationName = ''\r\nlet aiTagList = [];\r\nlet initialised = true;\r\nexport let availableKeys = [];\r\nlet promptBuilderList = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\nlet capturedFormatting: any = {};\r\nlet emptyFormat: boolean = false;\r\nlet isNoFormatTextAvailable: boolean = false;\r\nlet clientId = '0';\r\nlet userId = 0;\r\nlet clientList = [];\r\nlet version = versionLink;\r\nlet currentYear = new Date().getFullYear();\r\nlet sourceList;\r\nlet filteredGlossaryTerm;\r\nexport let selectedNames = [];\r\nexport let isPendingResponse = false;\r\nexport let theme = 'Light';\r\n\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"footer\").innerText = `© ${currentYear} - TrialAssure LINK AI Assistant ${version}`\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      () => {\r\n        logBookmarksInSelection();\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      const orgName = properties.items.find(prop => prop.key === 'Organization');\r\n      if (property && orgName) {\r\n        documentID = property.value;\r\n        organizationName = orgName.value;\r\n        login()\r\n      } else {\r\n        document.getElementById('app-body').innerHTML = `\r\n        <p class=\"px-3 text-center\">Export a document from the LINK AI application to use this functionality.</p>`\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  console.log(sessionToken)\r\n  if (sessionToken) {\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n  document.getElementById('logo-header').innerHTML = `\r\n  <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n  <div class=\"icon-nav me-3\">\r\n    <span id=\"theme-toggle\"><i class=\"fa fa-moon c-pointer me-3\"  title=\"Toggle Theme\"></i><span>\r\n  </div>\r\n`;\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-2\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary bg-primary-clr\">Login</button>\r\n        </div>\r\n      <div id=\"login-error\" class=\"mt-3 text-danger\" style=\"display: none;\"></div>\r\n\r\n      </form>\r\n    </div>\r\n  `;\r\n  document.getElementById('theme-toggle').addEventListener('click', () => {\r\n    theme = theme === 'Light' ? 'Dark' : 'Light';\r\n    applyThemeClasses(theme)\r\n    \r\n    document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n    document.body.classList.toggle('light-theme', theme === 'Light');\r\n    swicthThemeIcon()\r\n  }\r\n  );\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = (document.getElementById('organization') as HTMLInputElement).value;\r\n  const username = (document.getElementById('username') as HTMLInputElement).value;\r\n  const password = (document.getElementById('password') as HTMLInputElement).value;\r\n  if (organization.toLowerCase().trim() === organizationName.toLocaleLowerCase().trim()) {\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n    try {\r\n      const data = await loginUser(organization, username, password);\r\n      if (data.Status === true && data['Data']) {\r\n        if (data['Data'].ResponseStatus) {\r\n          jwt = data.Data.Token;\r\n          sessionStorage.setItem('token', jwt)\r\n          sessionStorage.setItem('userId', data.Data.ID);\r\n          window.location.hash = '#/dashboard';\r\n\r\n        } else {\r\n          showLoginError(\"An error occurred during login. Please try again.\")\r\n        }\r\n      } else {\r\n        showLoginError(\"An error occurred during login. Please try again.\")\r\n      }\r\n    } catch (error) {\r\n      showLoginError(\"An error occurred during login. Please try again.\")\r\n      console.error('Error during login:', error);\r\n      // Handle login error (e.g., show an error message)\r\n    }\r\n  } else {\r\n    showLoginError(\"The organization specified is not associated with this document\")\r\n  }\r\n}\r\n\r\nfunction showLoginError(message) {\r\n  loadLoginPage();  // Reload the form UI\r\n  const errorDiv = document.getElementById('login-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction displayMenu() {\r\n  userId = Number(sessionStorage.getItem('userId'))\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument('Init');\r\n\r\n}\r\n\r\nasync function fetchDocument(action) {\r\n  try {\r\n\r\n    const data = await getReportById(documentID, jwt);\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML = logoheader(storedUrl);\r\n\r\n    dataList = data['Data'];\r\n    sourceList = dataList.SourceTypeList.filter(\r\n      (item) => item.SourceValue !== ''\r\n        && item.AIFlag === 1\r\n    ) // Filter items with an extension\r\n      .map((item) => ({\r\n        ...item, // Spread the existing properties\r\n        SourceName: transformDocumentName(item.SourceValue)\r\n      }));\r\n    clientId = dataList.ClientID;\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n    availableKeys.forEach((key) => {\r\n      if (key.AIFlag === 1) {\r\n        const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n        let match;\r\n        if ((match = regex.exec(key.EditorValue) !== null)) {\r\n          {\r\n            key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n            key.UserValue = key.EditorValue;\r\n            key.InitialTable = true;\r\n            key.ComponentKeyDataType = 'TABLE';\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    aiTagList.forEach((key, i) => {\r\n      const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n      let match;\r\n      if ((match = regex.exec(key.EditorValue) !== null)) {\r\n        {\r\n          key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n          key.UserValue = key.EditorValue;\r\n          key.InitialTable = true;\r\n          key.ComponentKeyDataType = 'TABLE';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    );\r\n    fetchClients();\r\n    loadPromptTemplates();\r\n    loadHomepage(availableKeys);\r\n    document.getElementById('home').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        loadHomepage(availableKeys);\r\n      }\r\n    });\r\n\r\n    document.getElementById('glossary').addEventListener('click', () => {\r\n      if (emptyFormat) {\r\n        fetchGlossary();\r\n      }\r\n    });\r\n\r\n    document.getElementById('define-formatting').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        formatOptionsDisplay()\r\n      }\r\n    }\r\n    );\r\n\r\n\r\n    document.getElementById('removeFormatting').addEventListener('click', () => {\r\n      if (Object.keys(capturedFormatting).length > 0) {\r\n        removeOptionsConfirmation();\r\n      }\r\n    });\r\n\r\n\r\n    document.getElementById('theme-toggle').addEventListener('click', () => {\r\n      theme = theme === 'Light' ? 'Dark' : 'Light';\r\n      applyThemeClasses(theme)\r\n      \r\n      document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n      document.body.classList.toggle('light-theme', theme === 'Light');\r\n      swicthThemeIcon()\r\n    }\r\n    );\r\n\r\n    document.getElementById('logout').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        logout()\r\n      }\r\n    }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchClients() {\r\n  try {\r\n    const userId = sessionStorage.getItem('userId') || '';\r\n\r\n\r\n    const data = await getAllClients(userId, jwt);\r\n\r\n    if (data.Status && data.Data) {\r\n      clientList = data['Data'];\r\n    } else {\r\n      console.warn(\"Failed to load clients or no clients found.\");\r\n    }\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function formatOptionsDisplay() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n               <!-- Buttons for Capture and Empty Format -->\r\n            <div class=\"d-flex justify-content-end\">\r\n              <button id=\"capture-format-btn\" class=\"btn btn-primary bg-primary-clr\"><i class=\"fa fa-border-style me-1\"></i>  Capture Format</button>\r\n            </div>\r\n            <!-- <h5 class=\"card-title\">Formatting Options</h5> -->\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div class=\"formating-checkbox\">\r\n               <input type=\"checkbox\" id=\"empty-format-checkbox\" class=\"form-check-input\">\r\n              <label for=\"empty-format-checkbox\" class=\"form-check-label empty-format-checkbox-label\" style=\"flex: 1;\">\r\n                   Skip ignoring and removing format-based text\r\n              </label>\r\n            </div>\r\n\r\n            <!-- Section to display captured formatting -->\r\n            <div id=\"format-details\">\r\n              <h5 class=\"my-3\">Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled\"></ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    if (Object.keys(capturedFormatting).length === 0) {\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // The object is not empty\r\n    }\r\n\r\n    const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n    if (!glossaryBtn.classList.contains('disabled-link')) {\r\n      glossaryBtn.classList.add('disabled-link');\r\n    }\r\n\r\n    if (emptyFormat) {\r\n      clearCapturedFormatting();\r\n    }\r\n    else {\r\n      if (capturedFormatting.Bold === null || capturedFormatting.Bold === undefined ||\r\n        capturedFormatting.Underline === 'Mixed' || capturedFormatting.Underline === undefined ||\r\n        capturedFormatting.Size === null || capturedFormatting.Size === undefined ||\r\n        capturedFormatting[\"Font Name\"] === null || capturedFormatting[\"Font Name\"] === undefined ||\r\n        capturedFormatting[\"Background Color\"] === '' || capturedFormatting[\"Background Color\"] === undefined ||\r\n        capturedFormatting[\"Text Color\"] === '' || capturedFormatting[\"Text Color\"] === undefined) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n\r\n\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    }\r\n    // Event listeners for the buttons\r\n\r\n    document.getElementById(\"capture-format-btn\").addEventListener(\"click\", captureFormatting);\r\n\r\n    const emptyFormatCheckbox = document.getElementById(\"empty-format-checkbox\") as HTMLInputElement;\r\n    if (isNoFormatTextAvailable) {\r\n      emptyFormatCheckbox.checked = true;\r\n      clearCapturedFormatting();\r\n    }\r\n\r\n    emptyFormatCheckbox.addEventListener(\"change\", () => {\r\n      if (emptyFormatCheckbox.checked) {\r\n        isNoFormatTextAvailable = true;\r\n        clearCapturedFormatting();\r\n      } else {\r\n        const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n        CaptureBtn.disabled = false;\r\n        isNoFormatTextAvailable = false;\r\n        emptyFormat = false;\r\n        const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n        if (!glossaryBtn.classList.contains('disabled-link')) {\r\n          glossaryBtn.classList.add('disabled-link');\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayCapturedFormatting() {\r\n  emptyFormat = false;\r\n  const formatList = document.getElementById(\"format-list\");\r\n  formatList.innerHTML = \"\"; // Clear the list before adding new items\r\n\r\n  for (const [key, value] of Object.entries(capturedFormatting)) {\r\n    if ((key === \"Text Color\" || key === \"Background Color\") && value) {\r\n      formatList.innerHTML += `\r\n        <li><strong>${key}:</strong>${value}\r\n          <span style=\"display:inline-block;width:15px;height:15px;background-color:${value};border:1px solid black;\"></span>\r\n        </li>\r\n      `;\r\n    } else {\r\n      formatList.innerHTML += `<li><strong>${key}:</strong> ${value}</li>`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearCapturedFormatting() {\r\n  capturedFormatting = {}; // Clear the captured formatting object\r\n  const formatDetails = document.getElementById(\"format-details\");\r\n  formatDetails.style.display = 'none';\r\n  // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n  emptyFormat = true;\r\n  const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n  glossaryBtn.classList.remove('disabled-link');\r\n  const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n  CaptureBtn.disabled = true;\r\n\r\n\r\n  const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n  if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n    removeFormatBtn.classList.add('disabled-link');\r\n  }\r\n  console.log(\"Captured formatting cleared.\");\r\n}\r\n\r\nasync function captureFormatting() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      const font = selection.font;\r\n      font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n\r\n      await context.sync();\r\n\r\n      capturedFormatting = {\r\n        Bold: font.bold,\r\n        Italic: font.italic,\r\n        Underline: font.underline,\r\n        Size: font.size,\r\n        \"Background Color\": font.highlightColor,\r\n        \"Font Name\": font.name,\r\n        'Text Color': font.color\r\n      };\r\n\r\n\r\n\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'block';\r\n\r\n      if (capturedFormatting.Bold === null ||\r\n        capturedFormatting.Underline === 'Mixed' ||\r\n        capturedFormatting.Size === null ||\r\n        capturedFormatting[\"Font Name\"] === null ||\r\n        capturedFormatting[\"Background Color\"] === '' ||\r\n        capturedFormatting[\"Text Color\"] === ''\r\n\r\n      ) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error capturing formatting:\", error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function removeOptionsConfirmation() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    } // Check if isTagUpdating is false\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Are you sure you want to remove formatted text ?</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div id=\"format-details\">\r\n              <h5>Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled mb-3\"></ul>\r\n              <small class=\"text-secondary font-italic\" id=\"warning-rem-fmt\"></small>\r\n             \r\n            </div>\r\n               <!-- Buttons for Capture and Empty Format -->\r\n\r\n            <div class=\"mt-3 d-flex justify-content-between\">\r\n              <span id=\"change-ft-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n              <button id=\"clear-ft-btn\" class=\"btn btn-primary px-3\"><i class=\"fa fa-check-circle me-2\"></i>Yes</button>\r\n\r\n            </div>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    displayCapturedFormatting();\r\n\r\n    if (capturedFormatting['Background Color'] === null &&\r\n      capturedFormatting['Text Color'] === '#000000') {\r\n      const warningEle = document.getElementById('warning-rem-fmt').innerHTML = 'Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?'\r\n    }\r\n\r\n    // Event listeners for the buttons\r\n    document.getElementById(\"clear-ft-btn\").addEventListener(\"click\", removeFormattedText);\r\n    document.getElementById(\"change-ft-btn\").addEventListener(\"click\", formatOptionsDisplay);\r\n\r\n  }\r\n}\r\n\r\nasync function removeFormattedText() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n      const iconelement = document.getElementById(`clear-ft-btn`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Yes`;\r\n      const clrBtn = document.getElementById('clear-ft-btn') as HTMLButtonElement;\r\n      clrBtn.disabled = true;\r\n\r\n      const changeBtn = document.getElementById('change-ft-btn') as HTMLButtonElement;\r\n      changeBtn.disabled = true;\r\n      const paragraphs = context.document.body.paragraphs;\r\n      paragraphs.load(\"items\"); // Load paragraphs from the body\r\n\r\n      await context.sync();\r\n\r\n      // Iterate through each paragraph in the document body\r\n      for (const paragraph of paragraphs.items) {\r\n        \r\n        // Check if the paragraph contains text\r\n        if (paragraph.text.trim() !== \"\") {\r\n          const textRanges = paragraph.split([\" \"]); // Split paragraph into individual words/segments\r\n          textRanges.load(\"items, font\");\r\n\r\n          await context.sync();\r\n\r\n          for (const range of textRanges.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n\r\n            // Check if the text range matches the captured formatting\r\n            if (\r\n              font.highlightColor === capturedFormatting['Background Color'] &&\r\n              font.color === capturedFormatting['Text Color'] &&\r\n              font.bold === capturedFormatting['Bold'] &&\r\n              font.italic === capturedFormatting['Italic'] &&\r\n              font.size === capturedFormatting['Size'] &&\r\n              font.underline === capturedFormatting['Underline'] &&\r\n              font.name === capturedFormatting['Font Name']\r\n            ) {\r\n              // Clear the range whether it's a full word or part of a word\r\n              font.highlightColor = \"#FFFFFF\"; // Set new background color\r\n              font.color = \"#000000\"; // Set new text color\r\n              font.bold = false; // Reset bold if needed\r\n              font.italic = false; // Reset italic if needed\r\n              font.underline = \"None\";\r\n              paragraph.insertText(\" \", Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n      capturedFormatting = {}; // Clear the captured formatting object\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n      emptyFormat = true;\r\n      isNoFormatTextAvailable = true;\r\n      const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n      glossaryBtn.classList.remove('disabled-link');\r\n      formatOptionsDisplay()\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing formatted text:\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAIHistory(tag) {\r\n  try {\r\n\r\n    const data = await getAiHistory(tag.ID, jwt);\r\n\r\n\r\n    if (data.Status && data.Data) {\r\n      tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n      tag.FilteredReportHeadAIHistoryList = [];\r\n      tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n      });\r\n      return tag.FilteredReportHeadAIHistoryList;\r\n      // Use the data here\r\n    } else {\r\n      console.warn(\"No AI history available.\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendPrompt(tag, prompt) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n\r\n    const iconelement = document.getElementById(`sendPromptButton`);\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`;\r\n\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      ThreadID: tag.ThreadID,\r\n      AssistantID: dataList.AssistantID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      VectorID: dataList.VectorID,\r\n      Selected: 0,\r\n      ID: 0,\r\n      SourceValue: tag.SourceValue ? tag.SourceValue : []\r\n    };\r\n\r\n    try {\r\n      isPendingResponse = true;\r\n      const data = await addAiHistory(payload, jwt);\r\n\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n\r\n        const appbody = document.getElementById('app-body')\r\n        appbody.innerHTML = await generateCheckboxHistory(tag);\r\n        isPendingResponse = false;\r\n\r\n      }\r\n\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      document.getElementById(`chatInput`).value = '';\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      // sourceListBtn.disabled = false;\r\n\r\n    } catch (error) {\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      console.error('Error sending AI prompt:', error);\r\n    }\r\n  } else {\r\n    console.error('No empty prompt allowed');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Your existing copyText function\r\n\r\n\r\n\r\nasync function logout() {\r\n  if (isGlossaryActive) {\r\n    await removeMatchingContentControls();\r\n  }\r\n  sessionStorage.clear();\r\n  window.location.hash = '#/new';\r\n  initialised = true;\r\n  document.getElementById('logo-header').innerHTML = ``;\r\n  login();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nexport async function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n      context.load(body, 'text');\r\n      await context.sync();\r\n\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n        context.load(searchResults, 'items');\r\n        await context.sync();\r\n\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n        const tableInsertPositions: { range: Word.Range, tag: any }[] = [];\r\n\r\n        for (const item of searchResults.items) {\r\n          if (tag.EditorValue !== \"\" && !tag.IsApplied) {\r\n            const cleanDisplayName = tag.DisplayName.replace(/[^\\w\\s]/gi, \"\").replace(/\\s+/g, \"_\");\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = item.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.ComponentKeyDataType === 'TABLE') {\r\n              const range = item.getRange();\r\n              tableInsertPositions.push({ range, tag });\r\n              range.delete();\r\n            } else {\r\n              item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n            }\r\n\r\n            const endMarker = item.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n              const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n              bookmarkRange.insertBookmark(bookmarkName);\r\n              console.log(`Bookmark added: ${bookmarkName}`);\r\n              const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n              await context.sync();\r\n            \r\n              // Move the cursor to this paragraph (now it's outside the bookmark)\r\n              afterBookmark.select();\r\n            }\r\n\r\n            if (start) start.insertText('', Word.InsertLocation.replace);\r\n            if (end) end.insertText('', Word.InsertLocation.replace);\r\n\r\n            await context.sync();\r\n          }\r\n        }\r\n\r\n        for (const { range, tag } of tableInsertPositions) {\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n          const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n          for (const node of bodyNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n              const textContent = node.textContent?.trim();\r\n              if (textContent) {\r\n                textContent.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(range, line);\r\n                  }\r\n                });\r\n              }\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as HTMLElement;\r\n\r\n              if (element.tagName.toLowerCase() === 'table') {\r\n                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                if (rows.length === 0) {\r\n                  range.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                  continue;\r\n                }\r\n\r\n                const maxCols = Math.max(...rows.map(row => {\r\n                  return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                  }, 0);\r\n                }));\r\n\r\n                const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n                await context.sync();\r\n\r\n                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                table.style = \"Grid Table 4 - Accent 1\";\r\n                await context.sync();\r\n\r\n                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                rows.forEach((row, rowIndex) => {\r\n                  const cells = Array.from(row.querySelectorAll('td, th'));\r\n                  let cellIndex = 0;\r\n\r\n                  cells.forEach((cell) => {\r\n                    while (rowspanTracker[cellIndex] > 0) {\r\n                      rowspanTracker[cellIndex]--;\r\n                      cellIndex++;\r\n                    }\r\n\r\n                    const cellText = Array.from(cell.childNodes)\r\n                      .map(node => {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                          return node.textContent?.trim() || '';\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                          return (node as HTMLElement).innerText.trim();\r\n                        }\r\n                        return '';\r\n                      })\r\n                      .filter(text => text.length > 0)\r\n                      .join(' ');\r\n\r\n                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n\r\n                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                    for (let i = 1; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                      }\r\n                    }\r\n\r\n                    if (rowspan > 1) {\r\n                      for (let i = 0; i < colspan; i++) {\r\n                        if (cellIndex + i < maxCols) {\r\n                          rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    cellIndex += colspan;\r\n                  });\r\n                });\r\n              } else {\r\n                const elementText = element.innerText.trim();\r\n                if (elementText) {\r\n                  elementText.split('\\n').forEach(line => {\r\n                    if (line.trim()) {\r\n                      insertLineWithHeadingStyle(range, line);\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          await context.sync();\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\nasync function onRadioChange(tag, tagIndex, chatIndex) {\r\n  if (!isTagUpdating) {\r\n    isTagUpdating = true;\r\n    const iconelement = document.getElementById(`sendPrompt-${tagIndex}`)\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`\r\n    const chat = tag.FilteredReportHeadAIHistoryList[chatIndex];\r\n    let payload = JSON.parse(JSON.stringify(chat));\r\n    payload.Container = dataList.Container;\r\n    payload.Selected = 1;\r\n    const matchingKey = availableKeys.find(prop => prop.DisplayName === tag.DisplayName);\r\n    if (matchingKey) {\r\n      matchingKey.EditorValue = payload.Response;\r\n    }\r\n    try {\r\n\r\n      const data = await updateAiHistory(payload, jwt);\r\n\r\n      if (data['Data']) {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n\r\n        const selectedParent = document.getElementById(`selected-response-parent-${tagIndex}`);\r\n        const allSelectedDivs = selectedParent.querySelectorAll('.ai-selected-reply');\r\n        allSelectedDivs.forEach(div => {\r\n          div.classList.remove('ai-selected-reply');\r\n          div.classList.add('bg-light');\r\n        });\r\n\r\n        const selectElement = document.getElementById(`selected-response-${tagIndex}${chatIndex}`);\r\n        if (selectElement) {\r\n          selectElement.classList.remove('bg-light');\r\n          selectElement.classList.add('ai-selected-reply');\r\n        }\r\n\r\n        const finalResponse = chat.FormattedResponse\r\n          ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n          : chat.Response;\r\n\r\n        tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n        tag.UserValue = finalResponse;\r\n        tag.EditorValue = finalResponse;\r\n        tag.text = finalResponse;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error updating AI data:', error);\r\n    } finally {\r\n      const iconelement = document.getElementById(`sendPrompt-${tagIndex}`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction selectResponse(tagIndex, chatIndex) {\r\n  // Handle the response selection logic here\r\n  console.log(`Response selected for tagIndex ${tagIndex}, chatIndex ${chatIndex}`);\r\n}\r\n\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n    loadGlossary()\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n      body.load(\"text\");\r\n      await context.sync(); // Sync to get the text content\r\n\r\n      const bodyText = {\r\n        \"Content\": body.text.replace(/[\\n\\r]/g, ' ')\r\n      };\r\n      try {\r\n\r\n        const data = await fetchGlossaryTemplate(dataList?.ClientID, bodyText, jwt);\r\n\r\n        layTerms = data.Data;\r\n\r\n        if (data.Data.length > 0) {\r\n          glossaryName = data.Data[0].GlossaryTemplate;\r\n          loadGlossary();\r\n        } else {\r\n          document.getElementById('app-body').innerHTML = `\r\n            <p class=\"text-center\">Data not available</p>\r\n          `;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n      }\r\n      // Sort terms by length (longest first)\r\n      layTerms.sort((a, b) => b.ClinicalTerm.length - a.ClinicalTerm.length);\r\n\r\n      const processedTerms = new Set(); // Track added larger terms\r\n\r\n      // Filter out smaller terms if they are included in a larger term\r\n      const filteredTerms = layTerms.filter(term => {\r\n        for (const biggerTerm of processedTerms) {\r\n          if (typeof biggerTerm === 'string' && biggerTerm.includes(term.ClinicalTerm.toLowerCase())) {\r\n            console.log(`Skipping \"${term.ClinicalTerm}\" because it's part of \"${biggerTerm}\"`);\r\n            return false; // Exclude this smaller term\r\n          }\r\n        }\r\n        processedTerms.add(term.ClinicalTerm.toLowerCase());\r\n        return true;\r\n      });\r\n\r\n      filteredGlossaryTerm = filteredTerms;\r\n      await removeMatchingContentControls();\r\n\r\n      const foundRanges = new Map(); // Track words already processed\r\n\r\n      const searchPromises = filteredGlossaryTerm.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      for (const searchResults of searchPromises) {\r\n\r\n        for (const range of searchResults.items) {\r\n\r\n          if (!range || !range.text) {\r\n            console.log(\"Invalid range. Skipping...\");\r\n            continue;\r\n          }\r\n\r\n          // Load existing content controls inside this range\r\n          const font = range.font;\r\n          font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n          range.load(\"contentControls\");\r\n          await context.sync();\r\n\r\n          const existingControl = range.contentControls.items.length > 0;\r\n\r\n          if (existingControl) {\r\n            console.log(`Skipping \"${range.text}\" because it already has a content control.`);\r\n            continue; // Skip if content control is already present\r\n          }\r\n          // Check if we've already processed this term at this range\r\n          if (foundRanges.has(range.text)) {\r\n            console.log(`Skipping duplicate occurrence of \"${range.text}\"`);\r\n            continue;\r\n          }\r\n          // Mark this word as processed\r\n          foundRanges.set(range.text, true);\r\n          // Remove existing content controls if any\r\n          if (range.contentControls && range.contentControls.items.length > 0) {\r\n            console.log(`Removing existing content control from: \"${range.text}\"`);\r\n            for (const control of range.contentControls.items) {\r\n              control.delete(false); // 'false' keeps the text, only removes the control\r\n            }\r\n            await context.sync(); // Ensure deletion is applied before adding a new one\r\n          }\r\n\r\n          try {\r\n            // Insert a new content control\r\n            const contentControl = range.insertContentControl();\r\n            contentControl.title = `${range.text}`;\r\n            if (font.highlightColor !== null) {\r\n              contentControl.tag = `${font.highlightColor}`;\r\n            }\r\n            contentControl.font.highlightColor = \"yellow\"; // Highlight the control\r\n            contentControl.appearance = Word.ContentControlAppearance.boundingBox;\r\n            await context.sync();\r\n          } catch (error) {\r\n            console.error(`Error inserting content control for term \"${range.text}\":`, error);\r\n          }\r\n        }\r\n      }\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      <div class=\"d-flex justify-content-center box-loader\">\r\n       <div class=\"loader\" id=\"loader\"></div></div>\r\n      \r\n`\r\n      const displayElement = document.getElementById('loader');\r\n      displayElement.style.display = 'none';\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', removeMatchingContentControls);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const loader = document.getElementById('loader');\r\n        if (loader) {\r\n          loader.style.display = 'block';\r\n        }\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        for (const searchResults of searchPromises) {\r\n\r\n          for (const range of searchResults.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n            if (\r\n              font.highlightColor !== capturedFormatting['Background Color'] ||\r\n              font.color !== capturedFormatting['Text Color'] ||\r\n              font.bold !== capturedFormatting['Bold'] ||\r\n              font.italic !== capturedFormatting['Italic'] ||\r\n              font.size !== capturedFormatting['Size'] ||\r\n              font.underline !== capturedFormatting['Underline'] ||\r\n              font.name !== capturedFormatting['Font Name']\r\n            ) {\r\n              selectedWords.push(range.text);\r\n            }\r\n\r\n          }\r\n        }\r\n        // searchPromises.forEach(searchResults => {\r\n        //   searchResults.items.forEach(item => {\r\n        //   });\r\n        // });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n    const loader = document.getElementById('loader');\r\n    loader.style.display = 'block';\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm.toLowerCase() === word.toLowerCase()) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n    loader.style.display = 'none';\r\n\r\n  }\r\n}\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  const displayElement = document.getElementById('loader');\r\n  displayElement.style.display = 'block';\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.toLowerCase().includes(clinicalTerm.toLowerCase())) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        for (const item of searchResults.items) {\r\n          // Load the font properties\r\n          item.font.load(['bold', 'italic', 'underline', 'color', 'highlightColor', 'size', 'name']);\r\n          await context.sync();  // Ensure the properties are loaded before accessing them\r\n\r\n          // Insert the layTerm while keeping the formatting\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Apply the original formatting to the new text\r\n          item.font.bold = item.font.bold;\r\n          item.font.italic = item.font.italic;\r\n          item.font.underline = item.font.underline;\r\n          item.font.color = item.font.color;\r\n          item.font.highlightColor = '#c7c7c7';\r\n          item.font.size = item.font.size;\r\n          item.font.name = item.font.name;\r\n        }\r\n\r\n        await context.sync();\r\n        displayElement.style.display = 'none';\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and preserved the original formatting.`);\r\n      } else {\r\n        displayElement.style.display = 'none';\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    displayElement.style.display = 'none';\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function removeMatchingContentControls() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <div class=\"loader\" id=\"loader\"></div>\r\n        <div id=\"highlighted-text\"></div>`;\r\n      const body = context.document.body;\r\n\r\n      // Load all content controls\r\n      const contentControls = body.contentControls;\r\n      contentControls.load(\"items\");\r\n      await context.sync();\r\n\r\n      if (contentControls.items.length === 0) {\r\n        console.log(\"No content controls found.\");\r\n        return;\r\n      }\r\n\r\n      for (const control of contentControls.items) {\r\n        if (control.title && filteredGlossaryTerm.some(term => term.ClinicalTerm.toLowerCase() === control.title.toLowerCase())) {\r\n          const range = control.getRange();\r\n          range.load(\"text\");\r\n          await context.sync();\r\n          if (control.tag && /^#[0-9A-Fa-f]{6}$/.test(control.tag)) {\r\n            range.font.highlightColor = control.tag;\r\n          } else {\r\n            range.font.highlightColor = null\r\n          }\r\n          await context.sync();\r\n          control.delete(true);\r\n        }\r\n      }\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n      `;\r\n\r\n      await context.sync();\r\n      isGlossaryActive = false;\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing content controls:\", error);\r\n  }\r\n}\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nexport async function addGenAITags() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n    let selectedClient = clientList.filter((item) => item.ID === clientId);\r\n\r\n    let sponsorOptions = clientList.map(client => {\r\n      const isSelectedClient = selectedClient.some(selected => selected.ID === client.ID);\r\n      return ` \r\n        <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" value=\"${client.ID}\" id=\"sponsor${client.ID}\" ${isSelectedClient ? 'checked disabled' : ''}>\r\n            <label class=\"form-check-label text-prewrap\" for=\"sponsor${client.ID}\">${client.Name}</label>\r\n          </div>\r\n        </li>\r\n      `;\r\n    }).join('');\r\n\r\n    document.getElementById('app-body').innerHTML = navTabs;\r\n    // Add modal HTML to the DOM\r\n    document.getElementById('add-tag-body').innerHTML = addtagbody(sponsorOptions);\r\n    const promptTemplateElement = document.getElementById('add-prompt-template')\r\n    setupPromptBuilderUI(promptTemplateElement, promptBuilderList)\r\n\r\n\r\n    document.getElementById('tag-tab').addEventListener('click', () => {\r\n      switchToAddTag()\r\n    });\r\n\r\n\r\n    document.getElementById('prompt-tab').addEventListener('click', () => {\r\n      switchToPromptBuilder()\r\n    });\r\n\r\n    //prompt starting\r\n    mentionDropdownFn('prompt', 'mention-dropdown', 'add');\r\n    //prompt end\r\n    const form = document.getElementById('genai-form');\r\n    const promptField = document.getElementById('prompt');\r\n\r\n    const nameField = document.getElementById('name');\r\n    const descriptionField = document.getElementById('description');\r\n    const saveGloballyCheckbox = document.getElementById('saveGlobally');\r\n    const availableForAllCheckbox = document.getElementById('isAvailableForAll');\r\n    const sponsorDropdownButton = document.getElementById('sponsorDropdown');\r\n    const sponsorDropdownItems = document.querySelectorAll('.dropdown-item .form-check-input');\r\n\r\n    document.getElementById('cancel-btn-gen-ai').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        loadHomepage(availableKeys)\r\n      }\r\n    });\r\n\r\n    // Check if elements exist\r\n    if (form && nameField && promptField && sponsorDropdownItems.length > 0) {\r\n      const updateDropdownLabel = () => {\r\n        if (availableForAllCheckbox.checked) {\r\n          sponsorDropdownButton.textContent = clientList.map(client => client.Name).join(\", \");\r\n        } else {\r\n          const selectedOptions = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => cb.parentElement.textContent.trim());\r\n          sponsorDropdownButton.textContent = selectedOptions.length ? selectedOptions.join(\", \") : \"Select Sponsors\";\r\n        }\r\n      };\r\n      // Form validation logic on submit\r\n      form.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n\r\n        // Reset previous validation errors\r\n        form.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));\r\n\r\n        let valid = true;\r\n\r\n        if (!(nameField as HTMLInputElement).value.trim()) {\r\n          nameField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (!(promptField as HTMLInputElement).value.trim()) {\r\n          promptField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (valid) {\r\n          // Prepare object to pass to createTextGenTag\r\n          const selectedSponsors = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => {\r\n              const client = clientList.find(client => client.ID == cb.value);\r\n              return client; // Collect the entire client object\r\n            });\r\n\r\n          const isAvailableForAll = availableForAllCheckbox.checked;\r\n          const isSaveGlobally = saveGloballyCheckbox.checked;\r\n          const aigroup = dataList.Group.find(element => element.DisplayName === 'AIGroup');\r\n          const formData = {\r\n            DisplayName: nameField.value.trim(),\r\n            Prompt: promptField.value.trim(),\r\n            Description: descriptionField.value.trim(),\r\n            GroupKeyClient: selectedSponsors, // Array of selected sponsor objects\r\n            AllClient: isAvailableForAll ? 1 : 0,\r\n            SaveGlobally: isSaveGlobally,\r\n            UserDefined: '1',\r\n            ComponentKeyDataTypeID: '1',\r\n            ComponentKeyDataAccessID: '3',\r\n            AIFlag: 1,\r\n            DocumentTypeID: dataList.DocumentTypeID,\r\n            ReportHeadID: dataList.ID,\r\n            SourceTypeID: '',\r\n            ReportHeadGroupID: aigroup.ID,\r\n            ReportHeadSourceID: ''\r\n          };\r\n\r\n          await createTextGenTag(formData);\r\n        }\r\n      });\r\n\r\n\r\n      const checkAndDisableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          if (!checkbox.disabled) {\r\n            checkbox.checked = true;\r\n            checkbox.disabled = true;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Function to enable sponsors without unchecking them\r\n      const enableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          const isSelectedClient = selectedClient.some(selected => selected.ID === parseInt(checkbox.value));\r\n          if (!isSelectedClient) {\r\n            checkbox.disabled = false;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Event listener for \"Save Globally\" checkbox\r\n\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n\r\n      saveGloballyCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n          if (this.checked) {\r\n            availableForAllCheckbox.disabled = false;\r\n            sponsorDropdownButton.disabled = false;\r\n          } else {\r\n            enableSponsors();\r\n            availableForAllCheckbox.checked = false;\r\n            availableForAllCheckbox.disabled = true;\r\n            sponsorDropdownButton.disabled = true;\r\n            sponsorDropdownItems.forEach(checkbox => {\r\n              if (!checkbox.disabled) {\r\n                checkbox.checked = false;\r\n                checkbox.disabled = false;\r\n              }\r\n            });\r\n            updateDropdownLabel();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n      availableForAllCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n\r\n          if (this.checked) {\r\n            checkAndDisableSponsors();\r\n          } else {\r\n            enableSponsors();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Add event listener to prevent dropdown close on item selection\r\n      document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', function (event) {\r\n          {\r\n            event.stopPropagation(); // Prevent dropdown from closing\r\n            const checkbox = this.querySelector('.form-check-input');\r\n            if (checkbox) {\r\n\r\n\r\n              if (checkbox.id === 'selectAll') {\r\n                const isChecked = checkbox.checked;\r\n                sponsorDropdownItems.forEach(cb => {\r\n                  if (!cb.disabled) cb.checked = isChecked;\r\n                });\r\n              }\r\n              updateDropdownLabel();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Initial label update\r\n      updateDropdownLabel();\r\n\r\n\r\n      // Clear validation errors when user types\r\n      [nameField, promptField].forEach(field => {\r\n        field.addEventListener('input', function () {\r\n          if (this.classList.contains('is-invalid') && this.value.trim()) {\r\n            this.classList.remove('is-invalid');\r\n          }\r\n          if (nameField) {\r\n            const errorDiv = document.getElementById('submition-error');\r\n            errorDiv.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('Required elements are missing or not rendered yet.');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function createTextGenTag(payload) {\r\n  try {\r\n    const iconelement = document.getElementById(`text-gen-save`);\r\n    const cancelBtnGenAi = document.getElementById('cancel-btn-gen-ai');\r\n\r\n\r\n    (cancelBtnGenAi as HTMLButtonElement).disabled = true;\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Save`;\r\n    (iconelement as HTMLButtonElement).disabled = true;\r\n    isPendingResponse = true;\r\n\r\n    const data = await addGroupKey(payload, jwt);\r\n    isPendingResponse = false;\r\n\r\n    if (data['Data'] && data['Status']) {\r\n      fetchDocument('AIpanel');\r\n    } else {\r\n      (cancelBtnGenAi as HTMLButtonElement).disabled = false;\r\n      (iconelement as HTMLButtonElement).disabled = false;\r\n      iconelement.innerHTML = `<i class=\"fa fa-check-circle me-2\"></i>Save`;\r\n      showAddTagError(data['Data']);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error creating text generation tag:', error);\r\n  }\r\n}\r\n\r\n\r\nexport function mentionDropdownFn(textareaId, DropdownId, action) {\r\n  const filterMentions = (query) => {\r\n    // Assuming availableKeys is an array of objects with DisplayName and EditorValue properties\r\n    const filtered = availableKeys.filter(item => item.AIFlag === 0).filter(item =>\r\n      item.DisplayName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    return filtered;\r\n  };\r\n  let highlightedIndex = -1;\r\n\r\n  const promptField = document.getElementById(`${textareaId}`);\r\n  const mentionDropdown = document.getElementById(`${DropdownId}`);\r\n  if (promptField) {\r\n\r\n    // Handle input events on prompt field for mentions\r\n    promptField.addEventListener('input', (e) => {\r\n      const cursorPosition = promptField.selectionStart;\r\n      const textBeforeCursor = promptField.value.slice(0, cursorPosition);\r\n      const lastHashtag = textBeforeCursor.lastIndexOf('#');\r\n      if (lastHashtag !== -1) {\r\n        const query = textBeforeCursor.slice(lastHashtag + 1).trim();\r\n        if (query.length > 0) {\r\n          const mentions = filterMentions(query);\r\n\r\n          if (mentions.length > 0) {\r\n            mentionDropdown.innerHTML = mentions.map(item => {\r\n              let editorValue = '';\r\n              if (action === 'add') {\r\n                editorValue = `#${item.DisplayName}#`;\r\n              } else {\r\n                editorValue = item.EditorValue || `#${item.DisplayName}#`;\r\n              }\r\n\r\n              return `<li class=\"dropdown-item\" data-editor-value=\"${editorValue}\">${item.DisplayName}</li>`;\r\n            }).join('');\r\n\r\n            // Get the position of the textarea and place the dropdown above it\r\n            const textareaRect = promptField.getBoundingClientRect();\r\n            mentionDropdown.style.left = `${textareaRect.left}px`;\r\n            mentionDropdown.style.bottom = `75px`; // Position above the textarea\r\n            mentionDropdown.style.display = 'block';\r\n          } else {\r\n            mentionDropdown.style.display = 'none';\r\n          }\r\n        } else {\r\n          mentionDropdown.style.display = 'none';\r\n        }\r\n      } else {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n\r\n    });\r\n\r\n    // Handle keyboard navigation in the dropdown\r\n    promptField.addEventListener('keydown', (e) => {\r\n      const items = document.querySelectorAll(`#${DropdownId} .dropdown-item`);\r\n      const totalItems = items.length;\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight down and wrap around to the top if at the end\r\n        if (highlightedIndex < totalItems - 1) {\r\n          highlightedIndex++;\r\n        } else {\r\n          highlightedIndex = 0; // Wrap to the first item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'ArrowUp') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight up and wrap around to the bottom if at the top\r\n        if (highlightedIndex > 0) {\r\n          highlightedIndex--;\r\n        } else {\r\n          highlightedIndex = totalItems - 1; // Wrap to the last item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'Enter' && highlightedIndex !== -1) {\r\n        // Select the highlighted item\r\n        const selectedItem = items[highlightedIndex];\r\n        if (selectedItem) {\r\n          selectMention(selectedItem.getAttribute('data-editor-value'));\r\n          mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n          e.preventDefault();  // Prevent form submission on Enter key\r\n        }\r\n      }\r\n    });\r\n\r\n    // Function to highlight the selected item\r\n    function updateHighlightedItem(id) {\r\n      const items = document.querySelectorAll(`#${id} .dropdown-item`);\r\n      const dropdown = document.getElementById(`${id}`);\r\n      const totalItems = items.length;\r\n\r\n      // Remove the 'active' class from all items\r\n      items.forEach(item => item.classList.remove('active'));\r\n\r\n      // Add the 'active' class to the currently highlighted item\r\n      if (highlightedIndex >= 0 && highlightedIndex < totalItems) {\r\n        const highlightedItem = items[highlightedIndex];\r\n        highlightedItem.classList.add('active');\r\n\r\n        // Ensure the highlighted item is visible within the dropdown\r\n        highlightedItem.scrollIntoView({\r\n          behavior: 'smooth',    // Smooth scroll\r\n          block: 'nearest'      // Scroll only if necessary\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Handle selecting an item from the dropdown via mouse click\r\n    mentionDropdown.addEventListener('click', (e) => {\r\n      if (e.target && e.target.matches('li')) {\r\n        const editorValue = e.target.getAttribute('data-editor-value');\r\n        selectMention(editorValue);\r\n        mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n      }\r\n    });\r\n\r\n    // Function to insert the selected mention into the prompt field\r\n    const selectMention = (editorValue) => {\r\n      const textarea = document.getElementById(`${textareaId}`);\r\n      const currentValue = textarea.value;\r\n      const cursorPosition = textarea.selectionStart;\r\n\r\n      const textBefore = currentValue.slice(0, cursorPosition);\r\n      const textAfter = currentValue.slice(cursorPosition);\r\n\r\n      const lastHashPosition = textBefore.lastIndexOf('#');\r\n      const updatedTextBefore = textBefore.slice(0, lastHashPosition); // Removing '#' symbol\r\n\r\n      textarea.value = `${updatedTextBefore}${editorValue}${textAfter}`;\r\n      const newCursorPosition = updatedTextBefore.length + editorValue.length;\r\n      textarea.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    };\r\n\r\n    // Hide the dropdown if clicked outside\r\n    document.addEventListener('click', (e) => {\r\n      if (!mentionDropdown.contains(e.target) && e.target !== promptField) {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n        const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n        for (const node of bodyNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const textContent = node.textContent?.trim();\r\n            if (textContent) {\r\n              textContent.split('\\n').forEach(line => {\r\n                if (line.trim()) {\r\n                  insertLineWithHeadingStyle(selection, line);\r\n                }\r\n              });\r\n            }\r\n          } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n            const element = node as HTMLElement;\r\n\r\n            if (element.tagName.toLowerCase() === 'table') {\r\n              const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n              if (rows.length === 0) {\r\n                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                continue;\r\n              }\r\n\r\n              const maxCols = Math.max(...rows.map(row => {\r\n                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                  return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                }, 0);\r\n              }));\r\n\r\n              const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n              await context.sync();\r\n\r\n              const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n              table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n              await context.sync();\r\n\r\n              const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n              rows.forEach((row, rowIndex) => {\r\n                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                let cellIndex = 0;\r\n\r\n                cells.forEach((cell) => {\r\n                  while (rowspanTracker[cellIndex] > 0) {\r\n                    rowspanTracker[cellIndex]--;\r\n                    cellIndex++;\r\n                  }\r\n\r\n                  const cellText = Array.from(cell.childNodes)\r\n                    .map(node => {\r\n                      if (node.nodeType === Node.TEXT_NODE) {\r\n                        return node.textContent?.trim() || '';\r\n                      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        return (node as HTMLElement).innerText.trim();\r\n                      }\r\n                      return '';\r\n                    })\r\n                    .filter(text => text.length > 0)\r\n                    .join(' ');\r\n\r\n                  const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                  const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                  // if (rowIndex === 0) {\r\n                  //   const cell = table.getCell(rowIndex, cellIndex);\r\n                  //   const paragraph = cell.body.paragraphs.getFirst();\r\n                  //   paragraph.font.bold = true;\r\n                  //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                  // }\r\n                  table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                  for (let i = 1; i < colspan; i++) {\r\n                    if (cellIndex + i < maxCols) {\r\n                      table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                    }\r\n                  }\r\n\r\n                  if (rowspan > 1) {\r\n                    for (let i = 0; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellIndex += colspan;\r\n                });\r\n              });\r\n            } else {\r\n              const elementText = element.innerText.trim();\r\n              if (elementText) {\r\n                elementText.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        if (word.EditorValue === '' || word.IsApplied) {\r\n          selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n        } else {\r\n          let content = removeQuotes(word.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\nfunction showAddTagError(message) {\r\n  const errorDiv = document.getElementById('submition-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction transformDocumentName(value: string): string {\r\n  if (!value || value.trim() === '') {\r\n    return value; // Return the input value unchanged\r\n  }\r\n\r\n  const parts = value.split('_');\r\n  if (parts.length <= 1) {\r\n    return value; // Return the input value unchanged if no underscores are present\r\n  }\r\n\r\n  return parts.slice(1).join('_').replace(/%20/g, ' ').replace(/%25/g, '%');\r\n}\r\n\r\n\r\n\r\nexport function createMultiSelectDropdown(tag) {\r\n  const isDark = theme === 'Dark';\r\n  const btnClass = isDark ? 'btn-dark text-light border-0' : 'btn-light text-dark border';\r\n  const dropdownMenuClass = isDark ? 'bg-dark text-light border-light' : 'bg-white text-dark border';\r\n  const itemClass = isDark ? 'bg-dark text-light' : 'bg-white text-dark';\r\n  const cancelBtnClass = isDark ? 'btn-danger bg-danger-clr text-light' : 'btn-danger bg-danger-clr text-white';\r\n  const saveBtnClass = isDark ? 'btn-success bg-success-clr text-light' : 'btn-success bg-success-clr text-white';\r\n\r\n  const multiSelectHTML = `\r\n  <div class='p-3 w-100'>\r\n    <div class=\"mb-3\">\r\n      <label for=\"source-select\" class=\"form-label\"><span class=\"text-danger\">*</span> Select Sources</label>\r\n      <div class=\"dropdown w-100\">\r\n        <button \r\n          class=\"btn ${btnClass} w-100 text-start d-flex justify-content-between align-items-start dropdown-toggle dropdown-toggle-sources\" \r\n          type=\"button\" \r\n          id=\"sourceDropdown\" \r\n          data-bs-toggle=\"dropdown\" \r\n          aria-expanded=\"false\">\r\n          <span id=\"sourceDropdownLabel\" class='sourceDropdownLabel'></span>\r\n          <span class=\"dropdown-toggle-icon dropdown-toggle-icon-s\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu ${dropdownMenuClass} w-100 p-2\" aria-labelledby=\"sourceDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 10000;\">\r\n          <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"selectAll\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n              <label class=\"form-check-label w-100\" for=\"selectAll\">Select All</label>\r\n            </div>\r\n          </li>\r\n          ${sourceList\r\n            .map(\r\n              (source, index) => `\r\n              <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"source-${index}\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input source-checkbox\" type=\"checkbox\" value=\"${source.SourceName}\" id=\"source-${index}\">\r\n                  <label class=\"form-check-label w-100 text-prewrap\" for=\"source-${index}\">${source.SourceName}</label>\r\n                </div>\r\n              </li>\r\n            `\r\n            )\r\n            .join('')}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-src-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n      <button id=\"ok-src-btn\" class=\"btn btn-primary\">Save</button>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  const accordionBody = document.getElementById(`chatFooter`);\r\n  accordionBody.innerHTML = multiSelectHTML;\r\n\r\n  let selectedSources = [];\r\n\r\n  const selectAllCheckbox = document.getElementById(`selectAll`);\r\n  const individualCheckboxes = document.querySelectorAll(`.source-checkbox`);\r\n  const sourceDropdownLabel = document.getElementById(`sourceDropdownLabel`);\r\n\r\n  function updateLabel() {\r\n    const selectedSourceNames = selectedSources;\r\n    if (selectedSourceNames.length > 0) {\r\n      sourceDropdownLabel.innerText = selectedSourceNames.join(', ');\r\n    } else {\r\n      sourceDropdownLabel.innerText = ' ';\r\n    }\r\n  }\r\n\r\n  selectAllCheckbox.addEventListener(\"change\", function () {\r\n    const checkboxes = document.querySelectorAll(`.source-checkbox`);\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.checked = this.checked;\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n    });\r\n\r\n    updateLabel();\r\n  });\r\n\r\n  const selectAllItem = document.querySelector(`.dropdown-item[data-checkbox-id=\"selectAll\"]`);\r\n  selectAllItem.addEventListener(\"click\", function (event) {\r\n    event.stopPropagation();\r\n  });\r\n\r\n  individualCheckboxes.forEach((checkbox) => {\r\n    checkbox.addEventListener(\"change\", function () {\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n\r\n      const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n      selectAllCheckbox.checked = allChecked;\r\n\r\n      updateLabel();\r\n    });\r\n\r\n    const listItem = checkbox.closest(\"li\");\r\n    listItem.addEventListener(\"click\", function (event) {\r\n      event.stopPropagation();\r\n    });\r\n  });\r\n\r\n  if (tag.Sources && tag.Sources.length > 0) {\r\n    individualCheckboxes.forEach((checkbox) => {\r\n      if (tag.Sources.includes(checkbox.value)) {\r\n        checkbox.checked = true;\r\n        selectedSources.push(checkbox.value);\r\n      }\r\n    });\r\n\r\n    const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n    selectAllCheckbox.checked = allChecked;\r\n    updateLabel();\r\n  }\r\n\r\n  document.getElementById(`ok-src-btn`).addEventListener(\"click\", function () {\r\n    tag.Sources = [...selectedSources];\r\n    tag.SourceValue = sourceList\r\n      .filter(source => selectedSources.includes(source.SourceName))\r\n      .map(source => source.SourceValue);\r\n\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n\r\n  document.getElementById(`cancel-src-btn`).addEventListener(\"click\", function () {\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nfunction appendAccordionBody(i, tag, radioButtonsHTML, textareaValue, scrollPosition) {\r\n\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n\r\n\r\n  const accordionBody = document.getElementById(`box-bottom-${i}`);\r\n  // Clear existing content and insert the dropdown\r\n  accordionBody.innerHTML =\r\n    `\r\n           <textarea class=\"form-control\"\r\n                      rows=\"5\"\r\n                      id=\"chatbox-${i}\"\r\n                      placeholder=\"Type here\">${textareaValue}</textarea>\r\n              <div id=\"mention-dropdown-${i}\" class=\"dropdown-menu\"></div>\r\n              <div class=\"d-flex flex-column align-self-end me-3\">\r\n                <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insert-tag-${i}\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\" ></i>\r\n                </button>\r\n\r\n                <button\r\n                    class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\"\r\n                    id=\"changeSource-${i}\">\r\n                    ${tooltipButton}\r\n                 <i class=\"fa fa-file-lines text-white\"></i>\r\n                </button>\r\n                <button type=\"submit\"\r\n                    class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\"\r\n                    id=\"sendPrompt-${i}\">\r\n                    <span class=\"tooltiptext\">Send</span>\r\n                  <i class=\"fa fa-paper-plane text-white\"></i>\r\n               </button>\r\n             </div>`;\r\n\r\n  const cardContainer = document.getElementById('card-container');\r\n\r\n  cardContainer.scrollTop = scrollPosition;\r\n  mentionDropdownFn(`chatbox-${i}`, `mention-dropdown-${i}`, 'edit');\r\n\r\n  document.getElementById(`sendPrompt-${i}`)?.addEventListener('click', () => {\r\n    const textareaValue = (document.getElementById(`chatbox-${i}`) as HTMLTextAreaElement).value;\r\n\r\n    sendPrompt(tag, textareaValue,)\r\n  });\r\n\r\n\r\n  document.getElementById(`insert-tag-${i}`)?.addEventListener('click', () => {\r\n    insertTagPrompt(i)\r\n  })\r\n\r\n  document.getElementById(`changeSource`)?.addEventListener('click', () => {\r\n    const textareaValue = (document.getElementById(`chatbox-${i}`) as HTMLTextAreaElement).value;\r\n    // const accordionbody=document.getElementById(`accordion-body-${i}`).innerHTML=''\r\n    createMultiSelectDropdown(tag)\r\n  })\r\n}\r\n\r\nasync function loadPromptTemplates() {\r\n  try {\r\n    const data = await getAllPromptTemplates(jwt);\r\n    if (data.Status && data.Data) {\r\n      promptBuilderList = data.Data;\r\n    }\r\n    // Do something with the data\r\n  } catch (error) {\r\n    console.error('Error fetching prompt templates:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function logBookmarksInSelection() {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n\r\n    // Get bookmarks in the selection\r\n    let bookmarks = range.getBookmarks(); // Returns ClientResult<string[]>\r\n\r\n    await context.sync(); // Ensure bookmarks are retrieved\r\n    if (bookmarks.value.length > 0) {\r\n      selectedNames = []\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n      }\r\n      bookmarks.value.forEach((bookmarkName) => {\r\n        let processedName = bookmarkName.split(\"_Split_\")[0];\r\n        processedName = processedName.replace(/_/g, \" \");\r\n        selectedNames.push(processedName)\r\n        const container = document.getElementById('tags-in-selected-text');\r\n        if (container) {\r\n          renderSelectedTags(selectedNames, availableKeys)// Trigger function when selection changes\r\n        }\r\n      });\r\n    } else {\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-block');\r\n        badgeWrapper.classList.add('d-none');\r\n      }\r\n\r\n    }\r\n  });\r\n}\r\n\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","baseUrl","insertLineWithHeadingStyle","range","line","style","text","startsWith","substring","trim","insertParagraph","Word","InsertLocation","before","removeQuotes","value","copyText","tempTextArea","createElement","body","appendChild","select","execCommand","removeChild","switchToAddTag","querySelector","classList","remove","getElementById","add","updateEditorFinalTable","data","regex","match","tables","exec","parsedContent","JSON","parse","push","jsonToHtmlTable","error","console","tableIndex","jsonData","Array","isArray","headers","Set","rows","flattenObject","prefix","result","keys","forEach","newKey","map","item","entries","k","v","join","flattenedItem","table","header","row","chatfooter","tag","theme","Sources","applyThemeClasses","isDark","isLight","safeApplyClass","selector","darkClasses","lightClasses","elements","querySelectorAll","darkClassList","split","lightClassList","elem","swicthThemeIcon","icon","loadHomepage","availableKeys","searchBoxClass","innerHTML","searchBox","suggestionList","updateSuggestions","searchTerm","toLowerCase","replaceChildren","filteredMentions","filter","mention","DisplayName","includes","nonAITags","AIFlag","aiTags","createSection","labelText","mentions","isAISection","themeClasses","itemClass","labelClass","label","className","textContent","listItem","onclick","appBody","generateCheckboxHistory","catch","then","html","async","word","type","run","selection","context","getSelection","sync","newSelection","doc","DOMParser","parseFromString","EditorValue","bodyNodes","from","childNodes","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","element","tagName","maxCols","Math","max","reduce","sum","cell","parseInt","getAttribute","paragraph","insertTable","after","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","innerText","colspan","rowspan","getCell","elementText","IsApplied","nextLineParagraph","replaceMention","ComponentKeyDataType","debounceTimeout","addEventListener","clearTimeout","setTimeout","isPendingResponse","addGenAITags","applyAITagFn","FilteredReportHeadAIHistoryList","fetchAIHistory","history","closeBtnClass","closeBar","chatBody","chatList","promptclass","chat","index","Prompt","Selected","Response","generateChatHistoryHtml","chatFooterHtml","initializeAIHistoryEvents","jwt","checkbox","isChecked","event","target","checked","_","otherIndex","otherCheckbox","responseContainer","payload","response","fetch","method","stringify","ok","json","updateAiHistory","ReportHeadAIHistoryList","historyList","unshift","finalResponse","FormattedResponse","UserValue","currentlySelected","some","err","bookmarkName","Date","getTime","markers","paragraphs","load","start","items","find","end","getRange","expandTo","insertBookmark","log","afterBookmark","insertText","insertTagPrompt","textareaValue","sendPrompt","createMultiSelectDropdown","mentionDropdownFn","navTabs","sourceList","filteredGlossaryTerm","storedUrl","documentID","organizationName","aiTagList","initialised","promptBuilderList","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","capturedFormatting","emptyFormat","isNoFormatTextAvailable","clientId","userId","clientList","currentYear","getFullYear","selectedNames","login","sessionToken","sessionStorage","getItem","loadLoginPage","toggle","handleLogin","preventDefault","organization","username","password","toLocaleLowerCase","ClientName","Username","Password","loginUser","Status","ResponseStatus","Data","Token","setItem","ID","showLoginError","message","errorDiv","display","fetchDocument","action","getReportById","logoheader","SourceTypeList","SourceValue","SourceName","transformDocumentName","ClientID","aiGroup","Group","Name","GroupKey","GroupKeyAll","InitialTable","getAllClients","warn","fetchClients","getAllPromptTemplates","loadPromptTemplates","removeMatchingContentControls","loadGlossary","fetchGlossary","formatOptionsDisplay","htmlBody","displayCapturedFormatting","removeFormattedText","removeOptionsConfirmation","clear","logout","glossaryBtn","contains","clearCapturedFormatting","Bold","Underline","Size","removeFormatBtn","captureFormatting","emptyFormatCheckbox","disabled","formatList","font","bold","Italic","italic","underline","size","highlightColor","name","color","textRanges","tagId","getAiHistory","prompt","iconelement","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","ThreadID","AssistantID","Container","PromptType","VectorID","addAiHistory","searchResults","search","matchCase","matchWholeWord","tableInsertPositions","delete","applyglossary","bodyText","fetchGlossaryTemplate","GlossaryTemplate","sort","ClinicalTerm","processedTerms","filteredTerms","term","biggerTerm","foundRanges","Map","searchPromises","contentControls","has","set","control","contentControl","insertContentControl","title","appearance","ContentControlAppearance","boundingBox","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","loader","selectedWords","words","displayElement","groupedTerms","LayTerm","clinicalTerm","mainBox","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","selectedClient","sponsorOptions","client","isSelectedClient","selected","addtagbody","container","preview","templateText","fieldsList","templateSelect","applyBtn","resetBtn","previewDiv","fieldsContainer","previewContainer","templateError","replaceKeywordsManually","keywordMap","field","id","Label","keyword","HTMLInputElement","HTMLSelectElement","insertValue","RegExp","option","toString","templateId","getPromptTemplateById","Template","div","Type","input","PromptTemplateOptionList","opt","Text","Option","selectedIndex","promptTextarea","setupPromptBuilderUI","form","promptField","nameField","descriptionField","saveGloballyCheckbox","availableForAllCheckbox","sponsorDropdownButton","sponsorDropdownItems","updateDropdownLabel","selectedOptions","cb","parentElement","valid","selectedSponsors","isAvailableForAll","isSaveGlobally","aigroup","formData","Description","GroupKeyClient","AllClient","SaveGlobally","UserDefined","ComponentKeyDataTypeID","ComponentKeyDataAccessID","DocumentTypeID","SourceTypeID","ReportHeadGroupID","ReportHeadSourceID","cancelBtnGenAi","addGroupKey","showAddTagError","createTextGenTag","checkAndDisableSponsors","enableSponsors","stopPropagation","textareaId","DropdownId","highlightedIndex","mentionDropdown","updateHighlightedItem","totalItems","highlightedItem","scrollIntoView","behavior","block","cursorPosition","selectionStart","textBeforeCursor","slice","lastHashtag","lastIndexOf","query","filterMentions","editorValue","textareaRect","getBoundingClientRect","left","bottom","selectedItem","selectMention","matches","textarea","currentValue","textBefore","textAfter","lastHashPosition","updatedTextBefore","newCursorPosition","setSelectionRange","parts","multiSelectHTML","source","accordionBody","selectedSources","selectAllCheckbox","individualCheckboxes","sourceDropdownLabel","updateLabel","selectedSourceNames","allChecked","every","closest","Number","onReady","info","host","HostType","properties","customProperties","property","orgName","retrieveDocumentProperties","bookmarks","getBookmarks","badgeWrapper","processedName","lowerName","badge","cursor","displayName","targetBookmarkName","bookmark","getBookmarkRangeOrNullObject","isNullObject","selectMatchingBookmarkFromSelection","aiTag","renderSelectedTags","logBookmarksInSelection","URL"],"sourceRoot":""}