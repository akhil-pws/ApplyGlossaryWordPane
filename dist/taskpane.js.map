{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n// const layTerms=data.map(entry => ({\r\n//   LayTerm: entry.LayTerm, // or entry.ClinicalTerm based on what you want to search\r\n//   ClinicalTerm: entry.ClinicalTerm // Store the original term for reference\r\n// }));\r\n\r\nlet layTerms\r\nlet isGlossaryMarked = false;\r\nconst jwt='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYWtoaWxybyIsIk5hbWVJZGVudGlmaWVyIjoiMTQwOCIsIlVzZXJJRCI6IjE0MDgiLCJVc2VyTmFtZSI6ImFraGlscm8iLCJFbWFpbCI6ImFraGlsLmFAcGFjZXdpc2RvbS5jb20iLCJDbGllbnRJRCI6IjEwMDU5IiwiVEFBdXRoX0RCTmFtZSI6IlRBX0F1dGhfUGFjZURldiIsIkVycm9yTXNnIjoiXCJcIiIsIklzVmFsaWQiOiJUcnVlIiwiQXBwbGljYXRpb25Db2RlIjoiTElOSyIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlVzZXIiLCJBbm9ueW1pemF0aW9uX0RCTmFtZSI6IiIsIkJFQUNPTl9EQk5hbWUiOiIiLCJMSU5LX0RCTmFtZSI6IkxpbmtfTU1TIiwiUmVnaXN0cnlfREJOYW1lIjoiIiwiZXhwIjoxNzIyOTQyNDQ4LCJpc3MiOiJodHRwOi8vVHJpYWxBc3N1cmUuY29tIiwiYXVkIjoiaHR0cDovL1RyaWFsQXNzdXJlLmNvbSJ9.k-s_qBxCj-ArIIicYm_FRWv-332_0loUKLGuoPfmosw'\r\n\r\nOffice.onReady(async (info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"run\").onclick = run;\r\n    document.getElementById(\"Clear\").onclick = clearGlossary;\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      handleSelectionChange\r\n    );\r\n\r\n    await fetchGlossaryData();\r\n    await clearGlossary();\r\n  }\r\n});\r\n\r\nasync function fetchGlossaryData() {\r\n  try {\r\n    const response = await fetch('https://plsdevapp.azurewebsites.net/api/glossary-template/id/3', {\r\n      method: 'GET', // or 'POST', depending on your API\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    layTerms = data.Data.GlossaryTemplateData;\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function handleSelectionChange() {\r\n  if (isGlossaryMarked) {\r\n    await checkGlossary();\r\n  }\r\n}\r\n\r\nfunction disableButtons() {\r\n  document.getElementById(\"run\")?.setAttribute(\"disabled\", \"true\");\r\n  document.getElementById(\"Clear\")?.setAttribute(\"disabled\", \"true\");\r\n}\r\n\r\nfunction enableButtons() {\r\n  document.getElementById(\"run\")?.removeAttribute(\"disabled\");\r\n  document.getElementById(\"Clear\")?.removeAttribute(\"disabled\");\r\n}\r\n\r\nasync function run() {\r\n  try {\r\n    disableButtons();\r\n    await Word.run(async (context) => {\r\n      document.getElementById('loader').style.display = 'block';\r\n\r\n      const body = context.document.body;\r\n      const termsRegex = layTerms.map(term => `\\\\b${term.ClinicalTerm}\\\\b`).join('|');\r\n      const searchResults = body.search(termsRegex, {\r\n        matchCase: true,\r\n        matchWholeWord: true,\r\n        matchWildcards: true\r\n      });\r\n      searchResults.load(\"items\");\r\n\r\n      await context.sync();\r\n\r\n      searchResults.items.forEach(item => {\r\n        item.font.highlightColor = \"yellow\";\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      document.getElementById('loader').style.display = 'none';\r\n      isGlossaryMarked = true;\r\n    });\r\n\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n  } finally {\r\n    enableButtons();\r\n  }\r\n}\r\n\r\nasync function clearGlossary() {\r\n  try {\r\n    disableButtons();\r\n    await Word.run(async (context) => {\r\n      document.getElementById('loader').style.display = 'block';\r\n\r\n      const body = context.document.body;\r\n      const termsRegex = layTerms.map(term => `\\\\b${term.ClinicalTerm}\\\\b`).join('|');\r\n      const searchResults = body.search(termsRegex, {\r\n        matchCase: false,\r\n        matchWholeWord: true,\r\n        matchWildcards: true\r\n      });\r\n      searchResults.load(\"items\");\r\n\r\n      await context.sync();\r\n\r\n      searchResults.items.forEach(item => {\r\n        item.font.highlightColor = 'white';\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      isGlossaryMarked = false;\r\n      clearHighlightedText();\r\n    });\r\n\r\n    console.log('Glossary cleared successfully');\r\n  } catch (error) {\r\n    console.error('Error clearing glossary:', error);\r\n  } finally {\r\n    enableButtons();\r\n    document.getElementById('loader').style.display = 'none';\r\n  }\r\n}\r\n\r\nfunction clearHighlightedText() {\r\n  const displayElement = document.getElementById('highlighted-text');\r\n  if (displayElement) {\r\n    displayElement.innerHTML = '';\r\n  }\r\n}\r\n\r\nasync function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      selection.load(\"text\");\r\n\r\n      await context.sync();\r\n\r\n      if (selection.text) {\r\n        const termsRegex = layTerms.map(term => `\\\\b${term.ClinicalTerm}\\\\b`).join('|');\r\n        const searchResults = selection.search(termsRegex, {\r\n          matchCase: false,\r\n          matchWholeWord: true,\r\n          matchWildcards: true\r\n        });\r\n        searchResults.load(\"items\");\r\n\r\n        await context.sync();\r\n\r\n        const selectedWords = searchResults.items.map(item => item.text);\r\n        displayHighlightedText(selectedWords);\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\nfunction displayHighlightedText(words) {\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    const fragment = document.createDocumentFragment(); // Use a DocumentFragment\r\n\r\n    const groupedTerms = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm === word) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box';\r\n\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = clinicalTerm;\r\n      mainBox.appendChild(heading);\r\n\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box';\r\n        subBox.textContent = layTerm;\r\n\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      fragment.appendChild(mainBox);\r\n    });\r\n\r\n    displayElement.innerHTML = ''; // Clear the current content\r\n    displayElement.appendChild(fragment); // Append the fragment in one go\r\n  }\r\n}\r\n\r\nasync function replaceClinicalTerm(clinicalTerm, layTerm) {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.includes(clinicalTerm)) {\r\n        selection.insertText(layTerm, Word.InsertLocation.replace);\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n","// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">LINK UI Glossary</h1> </header> <div id=\\\"sideload-msg\\\"> <p>This add-in is sideloaded. To test it, follow the instructions.</p> </div> <div id=\\\"app-body\\\" style=\\\"display:none\\\"> <button id=\\\"run\\\">Apply Glossary</button> <button id=\\\"Clear\\\">Clear Glossary</button> <div id=\\\"loader\\\" style=\\\"display:none\\\">Loading...</div> <div id=\\\"highlighted-text\\\"></div> </div> </body> </html> \";\n// Exports\nexport default code;"],"names":["module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","layTerms","isGlossaryMarked","async","handleSelectionChange","Word","run","selection","context","getSelection","load","sync","text","termsRegex","map","term","ClinicalTerm","join","searchResults","search","matchCase","matchWholeWord","matchWildcards","words","displayElement","getElementById","fragment","createDocumentFragment","groupedTerms","forEach","word","includes","LayTerm","push","keys","clinicalTerm","mainBox","createElement","className","heading","textContent","appendChild","layTerm","subBox","addEventListener","insertText","InsertLocation","error","console","replaceClinicalTerm","remove","innerHTML","displayHighlightedText","items","item","log","checkGlossary","disableButtons","setAttribute","enableButtons","removeAttribute","style","display","body","font","highlightColor","clearGlossary","clearHighlightedText","Office","onReady","info","host","HostType","onclick","addHandlerAsync","EventType","DocumentSelectionChanged","response","fetch","method","headers","ok","data","json","Data","GlossaryTemplateData","fetchGlossaryData","___HTML_LOADER_IMPORT_0___","URL","___HTML_LOADER_IMPORT_1___"],"sourceRoot":""}