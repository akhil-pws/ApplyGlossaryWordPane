{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/index.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/data.ts","webpack://office-addin-taskpane/./src/taskpane/api.ts","webpack://office-addin-taskpane/./src/taskpane/functions.ts","webpack://office-addin-taskpane/./src/taskpane/components/home.ts","webpack://office-addin-taskpane/./src/taskpane/components/bodyelements.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./css/bootstrap3.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Link addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div id=\\\"header-nav\\\"> <div class=\\\"logo-header d-flex w-100 justify-content-between align-items-center bg-light\\\" id=\\\"logo-header\\\"> </div> </div> <main id=\\\"app-body\\\" class=\\\"d-block mh-34\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> <div id=\\\"footer\\\" class=\\\"py-2 text-center footer\\\"> </div> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const dataUrl='https://plsdevapp.azurewebsites.net'\r\nconst storeUrl='https://linkwordplugin-aphgcwcgbfdqeccs.eastus-01.azurewebsites.net'\r\nconst versionLink='2.0.0'\r\nexport {dataUrl,storeUrl,versionLink};","import { dataUrl } from \"./data\";\r\n\r\n// api.ts\r\nconst baseUrl = dataUrl // Set your actual base URL\r\n\r\nexport async function loginUser(organization: string, username: string, password: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/user/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      ClientName: organization,\r\n      Username: username,\r\n      Password: password\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n// api.ts\r\n\r\nexport async function getReportById(documentID: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/id/${documentID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getAllClients(userId: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/client/all/${userId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n\r\n\r\n  export async function getAiHistory(tagId: string, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/${tagId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n  export async function updateGroupKey(tag: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/head/groupkey`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(tag)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function addAiHistory(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function updateAiHistory(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/ai-history/update`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n  export async function fetchGlossaryTemplate(clientId: string, bodyText: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/glossary-template/client-id/${clientId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(bodyText)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function addGroupKey(payload: any, jwt: string): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/report/group-key/add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getAllPromptTemplates(jwt): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/prompt-template/all`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  \r\n\r\n  export async function getPromptTemplateById(id: string,jwt): Promise<any> {\r\n    const response = await fetch(`${baseUrl}/api/prompt-template/${id}/data`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n  \r\n    const data: any = await response.json();\r\n    return data;\r\n  }\r\n  ","import { generateCheckboxHistory } from \"./components/home\";\r\nimport { theme } from \"./taskpane\";\r\n\r\nexport function insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\nexport function removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\nexport async function insertSingleBookmark(text: any, DisplayName: any) {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n    // Replace spaces with underscores in DisplayName\r\n    let cleanDisplayName = DisplayName.replace(/\\s+/g, \"_\");\r\n\r\n    let uniqueStr = new Date().getTime();\r\n    let splitString = 'Split';\r\n    let bookmarkName = `${cleanDisplayName}_${splitString}_${uniqueStr}`;\r\n\r\n    // Insert text and get the range of inserted content\r\n    let insertedTextRange = range.insertText(text, Word.InsertLocation.replace);\r\n\r\n    await context.sync(); // Ensure text is inserted\r\n\r\n    // Expand the range to cover the newly inserted text and apply bookmark\r\n    insertedTextRange.insertBookmark(bookmarkName);\r\n\r\n    await context.sync(); // Ensure bookmark is inserted\r\n    console.log(`Single bookmark added: ${bookmarkName}`);\r\n  });\r\n}\r\n\r\n\r\nexport function copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n\r\n}\r\n\r\n\r\nexport function switchToPromptBuilder() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('prompt-tab').classList.add('active');\r\n  document.getElementById('add-prompt-template').classList.add('show', 'active');\r\n}\r\n\r\n\r\nexport function switchToAddTag() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('tag-tab').classList.add('active');\r\n  document.getElementById('add-tag-body').classList.add('show', 'active');\r\n}\r\n\r\nexport function updateEditorFinalTable(data) {\r\n  const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n  let match;\r\n  let tables = [];\r\n\r\n  while ((match = regex.exec(data)) !== null) {\r\n    try {\r\n      const parsedContent = JSON.parse(match[1]);\r\n      tables.push(jsonToHtmlTable(parsedContent));\r\n    } catch (error) {\r\n      console.error(\"Failed to parse JSON:\", error, match[1]);\r\n    }\r\n  }\r\n\r\n  let tableIndex = 0;\r\n  return data.replace(regex, () => tables[tableIndex++] || \"\");\r\n}\r\n\r\nfunction jsonToHtmlTable(jsonData) {\r\n  if (!jsonData || (Array.isArray(jsonData) && jsonData.length === 0)) {\r\n    return '<p>No data available</p>';\r\n  }\r\n\r\n  let headers = new Set();\r\n  let rows = [];\r\n\r\n  function flattenObject(obj, prefix = \"\", result = {}) {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key];\r\n      const newKey = prefix ? `${prefix} > ${key}` : key;\r\n\r\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n        flattenObject(value, newKey, result);\r\n      } else if (Array.isArray(value)) {\r\n        result[newKey] = value.map(item => {\r\n          return typeof item === 'object'\r\n            ? Object.entries(item).map(([k, v]) => `<strong>${k}:</strong> ${v}`).join('<br>')\r\n            : item;\r\n        }).join('<br>');\r\n      } else {\r\n        result[newKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  if (!Array.isArray(jsonData)) {\r\n    jsonData = Object.entries(jsonData).map(([key, value]) => ({ [key]: value }));\r\n  }\r\n\r\n  jsonData.forEach(item => {\r\n    let flattenedItem = flattenObject(item);\r\n    Object.keys(flattenedItem).forEach(key => headers.add(key));\r\n    rows.push(flattenedItem);\r\n  });\r\n\r\n  let table = '<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">';\r\n  table += '<tr>' + [...headers].map(header => `<th>${header}</th>`).join('') + '</tr>';\r\n  rows.forEach(row => {\r\n    table += '<tr>' + [...headers].map(header => `<td>${row[header]}</td>`).join('') + '</tr>';\r\n  });\r\n\r\n  table += '</table>';\r\n  return table;\r\n}\r\n\r\n\r\nexport async function insertTagPrompt(tag: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (tag.EditorValue === '') {\r\n        selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n      } else {\r\n        if (tag.ComponentKeyDataType === 'TABLE') {\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n\r\n          const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n          for (const node of bodyNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n              const textContent = node.textContent?.trim();\r\n              if (textContent) {\r\n                textContent.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as HTMLElement;\r\n\r\n              if (element.tagName.toLowerCase() === 'table') {\r\n                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                if (rows.length === 0) {\r\n                  selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                  continue;\r\n                }\r\n\r\n                const maxCols = Math.max(...rows.map(row => {\r\n                  return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                  }, 0);\r\n                }));\r\n\r\n                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                await context.sync();\r\n\r\n                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n                await context.sync();\r\n\r\n                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                rows.forEach((row, rowIndex) => {\r\n                  const cells = Array.from(row.querySelectorAll('td, th'));\r\n                  let cellIndex = 0;\r\n\r\n                  cells.forEach((cell) => {\r\n                    while (rowspanTracker[cellIndex] > 0) {\r\n                      rowspanTracker[cellIndex]--;\r\n                      cellIndex++;\r\n                    }\r\n\r\n                    const cellText = Array.from(cell.childNodes)\r\n                      .map(node => {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                          return node.textContent?.trim() || '';\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                          return (node as HTMLElement).innerText.trim();\r\n                        }\r\n                        return '';\r\n                      })\r\n                      .filter(text => text.length > 0)\r\n                      .join(' ');\r\n\r\n                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                    // if (rowIndex === 0) {\r\n                    //   const cell = table.getCell(rowIndex, cellIndex);\r\n                    //   const paragraph = cell.body.paragraphs.getFirst();\r\n                    //   paragraph.font.bold = true;\r\n                    //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                    // }\r\n                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                    for (let i = 1; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                      }\r\n                    }\r\n\r\n                    if (rowspan > 1) {\r\n                      for (let i = 0; i < colspan; i++) {\r\n                        if (cellIndex + i < maxCols) {\r\n                          rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    cellIndex += colspan;\r\n                  });\r\n                });\r\n              } else {\r\n                const elementText = element.innerText.trim();\r\n                if (elementText) {\r\n                  elementText.split('\\n').forEach(line => {\r\n                    if (line.trim()) {\r\n                      insertLineWithHeadingStyle(selection, line);\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          let content = removeQuotes(tag.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nexport function generateChatHistoryHtml(chatList: any[]): string {\r\n      const promptclass= theme==='Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  \r\n  return chatList.map((chat, index) =>\r\n    `<div class=\"row chat-entry m-0 p-0\">\r\n            <div class=\"col-md-12 mt-2 p-2\">\r\n                <span class=\"float-end me-1\">\r\n                    <i class=\"fa fa-copy text-secondary c-pointer\" title=\"Copy Prompt\" id=\"copyPrompt-${index}\"></i>\r\n                </span>\r\n                <span class=\"float-end w-75 me-2\">\r\n                    <div class=\"form-control h-34 d-flex align-items-center dynamic-height prompt-text ${promptclass}\">\r\n                        ${chat.Prompt}\r\n                    </div>\r\n                </span>\r\n            </div>\r\n            <div class=\"col-md-12 mb-2 p-2 d-flex\">\r\n                <span class=\"d-flex align-items-baseline w-100\">\r\n                    <div class=\"flex-grow-1 c-pointer ai-response-container px-2 pe-3 pt-3 ai-selected-response\" id=\"responseContainer-${index}\">\r\n                        <input\r\n                            class=\"form-check-input c-pointer me-2 response-checkbox\"\r\n                            type=\"checkbox\"\r\n                            id=\"checkbox-${index}\"\r\n                            ${chat.Selected === 1 ? 'checked' : ''}>\r\n                        <span id=\"responseText-${index}\">${chat.Response}</span>\r\n                        <i class=\"fa fa-copy text-secondary c-pointer ms-2\"\r\n                           title=\"Copy Response\"\r\n                           id=\"copyResponse-${index}\"></i>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        </div>`\r\n  ).join('');\r\n}\r\n\r\n\r\nexport function chatfooter(tag: any) {\r\n  const promptclass= theme==='Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n  return ` <textarea class=\"form-control ${promptclass}\"\r\n                      rows=\"5\"\r\n                      id=\"chatInput\"\r\n                      ></textarea>\r\n            <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n            <div class=\"d-flex flex-column align-self-end me-3\">\r\n              <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insertTagButton\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\"></i>\r\n              </button>\r\n              <button class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\" id=\"changeSourceButton\">\r\n              ${tooltipButton}\r\n                <i class=\"fa fa-file-lines text-white\"></i>\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\" id=\"sendPromptButton\">\r\n                <span class=\"tooltiptext\">Send</span>\r\n                <i class=\"fa fa-paper-plane text-white\"></i>\r\n              </button>\r\n            </div>`\r\n}\r\n\r\nexport function renderSelectedTags(selectedNames, availableKeys) {\r\n  const badgeWrapper = document.getElementById('tag-badge-wrapper');\r\n  badgeWrapper.innerHTML = '';\r\n\r\n  // Filter out duplicates (case-insensitive)\r\n  const uniqueNames = [...new Set(\r\n    selectedNames.map(name => name.toLowerCase())\r\n  )].map(lowerName => \r\n    selectedNames.find(name => name.toLowerCase() === lowerName)\r\n  );\r\n\r\n  uniqueNames.forEach(name => {\r\n    const badge = document.createElement('span');\r\n    badge.className = 'badge rounded-pill border bg-white text-dark px-3 py-2 shadow-sm d-flex align-items-center badge-clickable';\r\n    badge.style.cursor = 'pointer';\r\n    badge.innerHTML = `${name} <i class=\"fa-solid fa-robot ms-2 text-muted\" aria-label=\"AI Suggested\"></i>`;\r\n\r\n    badge.addEventListener('click', () => {\r\n      const aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && mention.DisplayName.toLowerCase() === name.toLowerCase()\r\n      );\r\n\r\n      if (aiTag) {\r\n        const appBody = document.getElementById('app-body');\r\n        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n\r\n        generateCheckboxHistory(aiTag).then(html => {\r\n          appBody.innerHTML = html;\r\n        });\r\n      }\r\n    });\r\n\r\n    badgeWrapper.appendChild(badge);\r\n  });\r\n}\r\n\r\n\r\nexport function applyThemeClasses(theme) {\r\n  const isDark = theme === 'Dark';\r\n  const isLight = theme === 'Light';\r\n\r\n  const safeApplyClass = (selector, darkClasses, lightClasses) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    const darkClassList = darkClasses.split(' ');\r\n    const lightClassList = lightClasses.split(' ');\r\n\r\n    elements.forEach(elem => {\r\n      if (!elem) return;\r\n      // Remove all related theme classes\r\n      elem.classList.remove(...darkClassList);\r\n      elem.classList.remove(...lightClassList);\r\n      // Add only the relevant set\r\n      if (isDark) elem.classList.add(...darkClassList);\r\n      if (isLight) elem.classList.add(...lightClassList);\r\n    });\r\n  };\r\n\r\n  // Now use it for different elements\r\n  safeApplyClass('#app-body', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('#search-box', 'bg-secondary text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-menu', 'bg-dark text-light border-light', 'bg-white text-dark border');\r\n  safeApplyClass('.list-group-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('.dropdown-toggle', 'bg-dark text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  // container for the suggestion list\r\n  safeApplyClass(\r\n    '.list-group-item-action',\r\n    'bg-dark text-light list-hover-dark',\r\n    'bg-light text-dark list-hover-light'\r\n  );\r\n\r\nsafeApplyClass('#close-ai-window', 'fa-solid fa-circle-xmark bg-dark text-light', 'fa-solid fa-circle-xmark bg-light text-dark');\r\nsafeApplyClass('#chatInput', 'bg-secondary text-light', 'bg-white text-dark');\r\nsafeApplyClass('.prompt-text', 'bg-secondary text-light', 'bg-white text-dark');\r\n\r\n\r\n}\r\n\r\nexport function swicthThemeIcon(){\r\n  const themeToggle = document.getElementById('theme-toggle');\r\n  const icon = themeToggle.querySelector('i');\r\n\r\n  if (theme === 'Dark') {\r\n    icon.classList.remove('fa-moon');\r\n    icon.classList.add('fa-sun');\r\n  } else if (theme === 'Light') {\r\n    icon.classList.remove('fa-sun');\r\n    icon.classList.add('fa-moon');\r\n  }\r\n}","import { getPromptTemplateById, updateGroupKey, updateAiHistory } from \"../api\";\r\nimport { chatfooter, copyText, generateChatHistoryHtml, insertLineWithHeadingStyle, insertSingleBookmark, removeQuotes, renderSelectedTags, switchToAddTag, updateEditorFinalTable } from \"../functions\";\r\nimport { addGenAITags, applyAITagFn, availableKeys, createMultiSelectDropdown, fetchAIHistory, isPendingResponse, jwt, mentionDropdownFn, selectedNames, sendPrompt, theme } from \"../taskpane\";\r\n\r\nlet preview = '';\r\n\r\n\r\nexport function loadHomepage(availableKeys, selectedNames = []) {\r\n    const searchBoxClass = theme==='Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-3\">\r\n        <div class=\"d-flex justify-content-end px-2\">\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Action\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"add-btn-tag\">\r\n                            <i class=\"fa fa-plus me-2\" aria-hidden=\"true\"></i> Add\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"apply-btn-tag\">\r\n                            <i class=\"fa-solid fa-circle-check me-2\"></i> Apply\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group px-2 pt-2\">\r\n            <input type=\"text\" id=\"search-box\" class=\"form-control ${searchBoxClass}\" placeholder=\"Search Tags...\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <ul id=\"suggestion-list\" class=\"list-group mt-2 px-2\"></ul>\r\n        \r\n        <div id=\"tags-in-selected-text\" class=\"mt-2 px-2 selected-text-box d-none\">\r\n            <label class=\"form-label mb-2 fw-bold\">Tags in Selected Text</label>\r\n            <div class=\"d-flex flex-wrap gap-2\" id=\"tag-badge-wrapper\"></div>\r\n        </div>\r\n    </div>`;\r\n\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n    renderSelectedTags(selectedNames, availableKeys);\r\n\r\n    function updateSuggestions() {\r\n        const searchTerm = searchBox.value.trim().toLowerCase();\r\n        suggestionList.replaceChildren(); // Clear previous results\r\n        if (searchTerm === '') {\r\n            suggestionList.innerHTML=''\r\n            return;\r\n        }\r\n\r\n        const filteredMentions = availableKeys.filter(mention =>\r\n            mention.DisplayName.toLowerCase().includes(searchTerm)\r\n        );\r\n\r\n        const nonAITags = filteredMentions.filter(m => m.AIFlag === 0);\r\n        const aiTags = filteredMentions.filter(m => m.AIFlag === 1);\r\n\r\n        const createSection = (labelText, mentions, isAISection = false) => {\r\n            if (mentions.length === 0) return;\r\n        \r\n            // Define the theme classes based on the current theme\r\n            const themeClasses = theme === 'Dark'\r\n            ? { itemClass: 'bg-dark text-light list-hover-dark', labelClass: 'bg-dark text-light' }\r\n            : { itemClass: 'bg-light text-dark list-hover-light', labelClass: 'bg-light text-dark' };\r\n          \r\n        \r\n            // Create the section label\r\n            const label = document.createElement('li');\r\n            label.className = `list-group-item fw-bold text-secondary ${themeClasses.labelClass}`;\r\n            label.textContent = labelText;\r\n            suggestionList.appendChild(label);\r\n        \r\n            // Loop through mentions and create the list items\r\n            mentions.forEach(mention => {\r\n                const listItem = document.createElement('li');\r\n                listItem.className = `list-group-item list-group-item-action ${themeClasses.itemClass}`; // Apply the theme classes\r\n        \r\n                // Create the icon for AI or non-AI tags\r\n                const icon = isAISection\r\n                    ? `<i class=\"fa-solid fa-robot text-muted me-2\"></i>`\r\n                    : `<i class=\"fa-solid fa-layer-group text-muted me-2\"></i>`;\r\n        \r\n                listItem.innerHTML = `${icon} ${mention.DisplayName}`;\r\n        \r\n                listItem.onclick = () => {\r\n                    if (isAISection) {\r\n                        const appBody = document.getElementById('app-body');\r\n                        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n                        generateCheckboxHistory(mention).catch(error => {\r\n                            appBody.innerHTML = '<div class=\"text-danger p-2\">Error loading data</div>';\r\n                        }).then(html => {\r\n                            appBody.innerHTML = html;\r\n                        });\r\n                    } else {\r\n                        replaceMention(mention, mention.ComponentKeyDataType);\r\n                        suggestionList.replaceChildren();\r\n                    }\r\n                };\r\n        \r\n                suggestionList.appendChild(listItem);\r\n            });\r\n        };\r\n        \r\n        // Call the function for each section\r\n        createSection('Properties', nonAITags, false);\r\n        createSection('AI Tags', aiTags, true);\r\n        \r\n    }\r\n\r\n    // Add input event listener to the search box\r\n    let debounceTimeout;\r\n    searchBox.addEventListener('input', () => {\r\n        clearTimeout(debounceTimeout);\r\n        debounceTimeout = setTimeout(updateSuggestions, 300); // Delay input handling by 300ms\r\n    });\r\n\r\n    document.getElementById('add-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            addGenAITags();\r\n        }\r\n    });\r\n\r\n    document.getElementById('apply-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            applyAITagFn();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n            if (type === 'TABLE') {\r\n                const parser = new DOMParser();\r\n                const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n                const bodyNodes = Array.from(doc.body.childNodes);\r\n                const cleanDisplayName = word.DisplayName.replace(/\\s+/g, \"_\");\r\n                const uniqueStr = new Date().getTime();\r\n                const bookmarkName = `${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n                const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n                await context.sync();\r\n\r\n                for (const node of bodyNodes) {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        const textContent = node.textContent?.trim();\r\n                        if (textContent) {\r\n                            textContent.split('\\n').forEach(line => {\r\n                                if (line.trim()) {\r\n                                    insertLineWithHeadingStyle(selection, line);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        const element = node as HTMLElement;\r\n\r\n                        if (element.tagName.toLowerCase() === 'table') {\r\n                            const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                            if (rows.length === 0) {\r\n                                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                continue;\r\n                            }\r\n\r\n                            const maxCols = Math.max(...rows.map(row => {\r\n                                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                }, 0);\r\n                            }));\r\n\r\n                            const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                            await context.sync();\r\n\r\n                            const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                            table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n                            await context.sync();\r\n\r\n                            const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                            rows.forEach((row, rowIndex) => {\r\n                                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                let cellIndex = 0;\r\n\r\n                                cells.forEach((cell) => {\r\n                                    while (rowspanTracker[cellIndex] > 0) {\r\n                                        rowspanTracker[cellIndex]--;\r\n                                        cellIndex++;\r\n                                    }\r\n\r\n                                    const cellText = Array.from(cell.childNodes)\r\n                                        .map(node => {\r\n                                            if (node.nodeType === Node.TEXT_NODE) {\r\n                                                return node.textContent?.trim() || '';\r\n                                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                return (node as HTMLElement).innerText.trim();\r\n                                            }\r\n                                            return '';\r\n                                        })\r\n                                        .filter(text => text.length > 0)\r\n                                        .join(' ');\r\n\r\n                                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                    for (let i = 1; i < colspan; i++) {\r\n                                        if (cellIndex + i < maxCols) {\r\n                                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                        }\r\n                                    }\r\n\r\n                                    if (rowspan > 1) {\r\n                                        for (let i = 0; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    cellIndex += colspan;\r\n                                });\r\n                            });\r\n                        } else {\r\n                            const elementText = element.innerText.trim();\r\n                            if (elementText) {\r\n                                elementText.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n                await context.sync();\r\n\r\n                // Now create bookmark between start and end markers\r\n                const markers = context.document.body.paragraphs;\r\n                context.load(markers, 'text');\r\n\r\n                await context.sync();\r\n\r\n                const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n                const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n                if (start && end) {\r\n                    const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                    bookmarkRange.insertBookmark(bookmarkName);\r\n                    console.log(`Bookmark added for table: ${bookmarkName}`);\r\n                }\r\n\r\n                // Optionally: Remove the markers\r\n                start.insertText('', Word.InsertLocation.replace);\r\n                end.insertText('', Word.InsertLocation.replace);\r\n            }\r\n\r\n            else {\r\n                if (word.EditorValue === '' || word.IsApplied) {\r\n                    selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n                } else {\r\n                    // if (word.AIFlag === 1) {\r\n                    //     let content = removeQuotes(word.EditorValue);\r\n                    //     let textToInsert = content.replace(/\\r?\\n/g, \"\\n\"); // Ensure line breaks remain\r\n                    //     insertSingleBookmark(textToInsert, word.DisplayName);\r\n                    // } else {\r\n                    let content = removeQuotes(word.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n                    lines.forEach(line => {\r\n                        selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n\r\n                }\r\n            }\r\n\r\n            await context.sync();\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function openAITag(tag) {\r\n    tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n    });\r\n\r\n\r\n}\r\n\r\nexport async function generateCheckboxHistory(tag) {\r\n    if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n        await fetchAIHistory(tag);\r\n    }\r\n\r\n    const history = tag.FilteredReportHeadAIHistoryList;\r\n\r\n    if (history.length === 0) {\r\n        return '<div>No AI history available.</div>';\r\n    }\r\n\r\n    // Check current theme\r\n    const isDark = theme === 'Dark';\r\n    const closeBtnClass = isDark\r\n        ? 'fa-solid fa-circle-xmark bg-dark text-light'\r\n        : 'fa-solid fa-circle-xmark bg-light text-dark';\r\n\r\n    const closeBar = `\r\n        <div class=\"d-flex justify-content-between align-items-center px-2 pt-3\">\r\n            <div class=\"d-flex align-items-center ms-3\">\r\n                <i class=\"fa fa-robot text-muted me-2\"></i>\r\n                <span class=\"fw-bold\">${tag.DisplayName}</span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-center align-items-center me-3 c-pointer\" id=\"close-btn-tag\">\r\n                <i class=\"${closeBtnClass}\" id=\"close-ai-window\"></i>\r\n            </div>\r\n        </div>\r\n        <hr class=\"mt-2 mb-1 mx-3\">\r\n    `;\r\n\r\n    const chatBody = `\r\n        <div class=\"chat-body\">\r\n            ${generateChatHistoryHtml(history)}\r\n        </div>\r\n    `;\r\n\r\n    const chatFooterHtml = `\r\n        <div class=\"d-flex align-items-end justify-content-end chatbox p-2\" id=\"chatFooter\">\r\n            ${chatfooter(tag)}\r\n        </div>\r\n    `;\r\n\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);  // Make sure jwt and availableKeys are in scope\r\n\r\n    return `${closeBar}${chatBody}${chatFooterHtml}`;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function setupPromptBuilderUI(container, promptBuilderList) {\r\n\r\n    // Static template and field definitions\r\n    let preview = '';\r\n    let templateText = '';\r\n\r\n    // Field configs (can be extended)\r\n    let fieldsList = [];\r\n\r\n    // Create the form container\r\n    // Create the form container\r\n    container.innerHTML = `\r\n  <div class=\"form-group mb-3 p-3 pt-0\">\r\n    <label class='form-label'><span class=\"text-danger\">*</span> Prompt Builder Template</label>\r\n    <select id=\"promptBuilderTemplate\" class=\"form-control\">\r\n      <option value=\"\" disabled selected>Select a template</option>\r\n    </select>\r\n    <div id=\"templateError\" class=\"invalid-feedback d-none\">Type is required.</div>\r\n  </div>\r\n\r\n  <div id=\"fieldsContainer\"></div>\r\n\r\n  <div class=\"form-group mb-3 p-3 pt-0\" id=\"previewContainer\" style=\"display: none;\">\r\n    <label class=\"mb-2\">Preview</label>\r\n    <div id=\"preview\" class=\"form-control\"></div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between px-3 align-items-center mt-3\">\r\n    <span id=\"resetBtn\" class=\"text-primary fw-bold\" style=\"cursor: pointer;\">Reset</span>\r\n    <button id=\"applyBtn\" class=\"btn btn-primary text-white\" disabled>Apply Prompt</button>\r\n  </div>\r\n`;\r\n\r\n    // Element references\r\n    const templateSelect = container.querySelector('#promptBuilderTemplate') as HTMLSelectElement;\r\n    const applyBtn = container.querySelector('#applyBtn') as HTMLButtonElement;\r\n    const resetBtn = container.querySelector('#resetBtn') as HTMLSpanElement;\r\n    const previewDiv = container.querySelector('#preview') as HTMLDivElement;\r\n    const fieldsContainer = container.querySelector('#fieldsContainer') as HTMLDivElement;\r\n    const previewContainer = container.querySelector('#previewContainer') as HTMLDivElement;\r\n    const templateError = container.querySelector('#templateError') as HTMLDivElement;\r\n\r\n    // Populate template dropdown\r\n    promptBuilderList.forEach((item) => {\r\n        const option = document.createElement('option');\r\n        option.value = item.ID.toString();\r\n        option.textContent = item.Name;\r\n        templateSelect.appendChild(option);\r\n    });\r\n\r\n    templateSelect.addEventListener('change', async () => {\r\n        const templateId = templateSelect.value;\r\n        const jwt = sessionStorage.getItem('token') || '';\r\n\r\n        const data = await getPromptTemplateById(templateId, jwt);\r\n        if (data.Status && data.Data) {\r\n            fieldsList = data.Data;\r\n            preview = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n\r\n            templateText = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n        }\r\n        if (!templateId) {\r\n            templateError.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        templateError.classList.add('d-none');\r\n\r\n        renderFields();\r\n        updatePreview();\r\n    });\r\n\r\n    function renderFields() {\r\n        fieldsContainer.innerHTML = '';\r\n\r\n        fieldsList.forEach((field) => {\r\n            const div = document.createElement('div');\r\n            div.className = 'form-group mb-3 p-3 pt-0';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = field.Label;\r\n            div.appendChild(label);\r\n\r\n            if (field.Type === 1) {\r\n                const input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.className = 'form-control';\r\n                input.id = field.Label;\r\n                input.addEventListener('input', replaceKeywordsManually);\r\n                div.appendChild(input);\r\n            } else if (field.Type === 2) {\r\n                const select = document.createElement('select');\r\n                select.className = 'form-control';\r\n                select.id = field.Label;\r\n                field.PromptTemplateOptionList.forEach((opt: any) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = opt.Text;\r\n                    option.textContent = opt.Option;\r\n                    select.appendChild(option);\r\n                });\r\n                select.addEventListener('change', replaceKeywordsManually);\r\n                div.appendChild(select);\r\n            }\r\n\r\n            fieldsContainer.appendChild(div);\r\n        });\r\n    }\r\n\r\n    function replaceKeywordsManually() {\r\n        const keywordMap: { [key: string]: string } = {};\r\n\r\n        fieldsList.forEach((field) => {\r\n            const id = field.Label;\r\n            const keyword = `#${id}#`;\r\n\r\n            let value = '';\r\n            const element = document.getElementById(id) as HTMLInputElement | HTMLSelectElement;\r\n\r\n            if (element) {\r\n                value = (element instanceof HTMLInputElement || element instanceof HTMLSelectElement)\r\n                    ? element.value\r\n                    : '';\r\n            }\r\n\r\n            keywordMap[keyword] = value ? value : keyword;\r\n        });\r\n\r\n        let insertValue = templateText;\r\n        for (const [keyword, value] of Object.entries(keywordMap)) {\r\n            insertValue = insertValue.replace(new RegExp(keyword, 'g'), value);\r\n        }\r\n\r\n        preview = insertValue;\r\n        previewDiv.textContent = preview;\r\n        previewContainer.style.display = preview ? 'block' : 'none';\r\n        applyBtn.disabled = preview === '';\r\n    }\r\n\r\n    function updatePreview() {\r\n        replaceKeywordsManually();\r\n    }\r\n\r\n    function resetForm() {\r\n        // Reset only the dynamic field values\r\n        fieldsList.forEach((field) => {\r\n            const element = document.getElementById(field.Label) as HTMLInputElement | HTMLSelectElement;\r\n            if (element) {\r\n                if (element instanceof HTMLInputElement) {\r\n                    element.value = '';\r\n                } else if (element instanceof HTMLSelectElement) {\r\n                    element.selectedIndex = 0; // optional: reset to first option\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clear preview\r\n        previewDiv.textContent = templateText;\r\n        preview = templateText;\r\n    }\r\n\r\n\r\n    function applyPrompt() {\r\n        if (!preview) return;\r\n\r\n        const promptTextarea = document.getElementById('prompt') as HTMLTextAreaElement;\r\n        if (promptTextarea) {\r\n            promptTextarea.value = preview;\r\n            switchToAddTag()\r\n        }\r\n\r\n    }\r\n\r\n    resetBtn.addEventListener('click', resetForm);\r\n    applyBtn.addEventListener('click', applyPrompt);\r\n}\r\n\r\n\r\nasync function insertTagPrompt(tag: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n            const cleanDisplayName = tag.DisplayName.replace(/\\s+/g, \"_\");\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.EditorValue === '') {\r\n                selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n            } else {\r\n                if (tag.ComponentKeyDataType === 'TABLE') {\r\n                    const parser = new DOMParser();\r\n                    const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n                    const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                    for (const node of bodyNodes) {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                            const textContent = node.textContent?.trim();\r\n                            if (textContent) {\r\n                                textContent.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                            const element = node as HTMLElement;\r\n\r\n                            if (element.tagName.toLowerCase() === 'table') {\r\n                                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                                if (rows.length === 0) {\r\n                                    selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                    continue;\r\n                                }\r\n\r\n                                const maxCols = Math.max(...rows.map(row => {\r\n                                    return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                    }, 0);\r\n                                }));\r\n\r\n                                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                                await context.sync();\r\n\r\n                                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                                table.style = \"Grid Table 4 - Accent 1\";\r\n                                await context.sync();\r\n\r\n                                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                                rows.forEach((row, rowIndex) => {\r\n                                    const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                    let cellIndex = 0;\r\n\r\n                                    cells.forEach((cell) => {\r\n                                        while (rowspanTracker[cellIndex] > 0) {\r\n                                            rowspanTracker[cellIndex]--;\r\n                                            cellIndex++;\r\n                                        }\r\n\r\n                                        const cellText = Array.from(cell.childNodes)\r\n                                            .map(node => {\r\n                                                if (node.nodeType === Node.TEXT_NODE) {\r\n                                                    return node.textContent?.trim() || '';\r\n                                                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                    return (node as HTMLElement).innerText.trim();\r\n                                                }\r\n                                                return '';\r\n                                            })\r\n                                            .filter(text => text.length > 0)\r\n                                            .join(' ');\r\n\r\n                                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                        for (let i = 1; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                            }\r\n                                        }\r\n\r\n                                        if (rowspan > 1) {\r\n                                            for (let i = 0; i < colspan; i++) {\r\n                                                if (cellIndex + i < maxCols) {\r\n                                                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        cellIndex += colspan;\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                const elementText = element.innerText.trim();\r\n                                if (elementText) {\r\n                                    elementText.split('\\n').forEach(line => {\r\n                                        if (line.trim()) {\r\n                                            insertLineWithHeadingStyle(selection, line);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let content = removeQuotes(tag.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/);\r\n                    lines.forEach(line => {\r\n                        selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n                const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                bookmarkRange.insertBookmark(bookmarkName);\r\n                console.log(`Bookmark added: ${bookmarkName}`);\r\n            }\r\n\r\n            if (start) start.insertText('', Word.InsertLocation.replace);\r\n            if (end) end.insertText('', Word.InsertLocation.replace);\r\n\r\n            await context.sync();\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport function initializeAIHistoryEvents(tag: any, jwt: string, availableKeys: any) {\r\n    setTimeout(() => {\r\n        tag.FilteredReportHeadAIHistoryList.forEach((chat: any, index: number) => {\r\n            // Copy buttons\r\n            document.getElementById(`copyPrompt-${index}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n            document.getElementById(`copyResponse-${index}`)?.addEventListener('click', () => copyText(chat.Response));\r\n\r\n            // Close button\r\n            document.getElementById(`close-btn-tag`)?.addEventListener('click', () => loadHomepage(availableKeys));\r\n\r\n            // Checkbox logic\r\n            const checkbox = document.getElementById(`checkbox-${index}`) as HTMLInputElement;\r\n            if (checkbox) {\r\n                checkbox.addEventListener('change', async (event: Event) => {\r\n                    const isChecked = (event.target as HTMLInputElement).checked;\r\n\r\n                    // Reset all\r\n                    tag.FilteredReportHeadAIHistoryList.forEach((_: any, otherIndex: number) => {\r\n                        const otherCheckbox = document.getElementById(`checkbox-${otherIndex}`) as HTMLInputElement;\r\n                        const responseContainer = document.getElementById(`responseContainer-${otherIndex}`);\r\n                        if (otherCheckbox) otherCheckbox.checked = false;\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.remove('ai-selected-response');\r\n                            responseContainer.classList.add('bg-light');\r\n                        }\r\n                        tag.FilteredReportHeadAIHistoryList[otherIndex].Selected = 0;\r\n                    });\r\n\r\n                    // Set selected\r\n                    if (isChecked) {\r\n                        checkbox.checked = true;\r\n                        const responseContainer = document.getElementById(`responseContainer-${index}`);\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.add('ai-selected-response');\r\n                            responseContainer.classList.remove('bg-light');\r\n                        }\r\n                        chat.Selected = 1;\r\n                    } else {\r\n                        chat.Selected = 0;\r\n                    }\r\n\r\n                    try {\r\n                        const data = await updateAiHistory(chat, jwt);\r\n                        if (data['Data']) {\r\n                            tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n                            tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n                            tag.ReportHeadAIHistoryList.forEach((historyList: any) => {\r\n                                historyList.Response = removeQuotes(historyList.Response);\r\n                                tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n                            });\r\n\r\n                            const finalResponse = chat.FormattedResponse\r\n                                ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                : chat.Response;\r\n\r\n                            tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n                            tag.UserValue = finalResponse;\r\n                            tag.EditorValue = finalResponse;\r\n                            tag.text = finalResponse;\r\n\r\n                            const currentlySelected = tag.FilteredReportHeadAIHistoryList.some((item: any) => item.Selected === 1);\r\n                            tag.IsApplied = !currentlySelected;\r\n                        }\r\n                    } catch (err) {\r\n                        console.error('Failed to update AI history:', err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Button: Insert Tag\r\n        document.getElementById(`insertTagButton`)?.addEventListener('click', () => {\r\n            if (!tag.IsApplied) {\r\n                insertTagPrompt(tag);\r\n            }\r\n        });\r\n\r\n        // Button: Send Prompt\r\n        document.getElementById(`sendPromptButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            sendPrompt(tag, textareaValue);\r\n        });\r\n\r\n        // Button: Change Source\r\n        document.getElementById(`changeSourceButton`)?.addEventListener('click', () => {\r\n            createMultiSelectDropdown(tag);\r\n        });\r\n\r\n        // Mention dropdown\r\n        mentionDropdownFn(`chatInput`, `mention-dropdown`, 'edit');\r\n    }, 0);\r\n}\r\n","import { theme } from \"../taskpane\";\r\n\r\nfunction addtagbody(sponsorOptions) {\r\n  const body = `<div class=\"modal-dialog\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-body p-3 pt-0\">\r\n      <form id=\"genai-form\" autocomplete=\"off\" novalidate>\r\n        <!-- Name Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"name\" class=\"form-label\"><span class=\"text-danger\">*</span> Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" required>\r\n          <div class=\"invalid-feedback\">Name is required.</div>\r\n          <div id=\"submition-error\" class=\"invalid-feedback\" style=\"display: none;\"></div>\r\n\r\n        </div>\r\n\r\n        <!-- Description Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" rows=\"6\"></textarea>\r\n        </div>\r\n\r\n        <!-- Prompt Field -->\r\n        <div class=\"mb-3 prompt-box\">\r\n          <label for=\"prompt\" class=\"form-label\"><span class=\"text-danger\">*</span> Prompt \r\n            <small class=\"text-secondary\">(Note: Use # tag for content suggestions)</small>\r\n          </label>\r\n          <textarea class=\"form-control\" id=\"prompt\" rows=\"6\"  required></textarea>\r\n          <div class=\"invalid-feedback\">Prompt is required.</div>\r\n          <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n        </div>\r\n\r\n        <!-- Save Globally Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"saveGlobally\">\r\n          <label class=\"form-check-label\" for=\"saveGlobally\">Save Globally</label>\r\n        </div>\r\n\r\n        <!-- Available to All Sponsors Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"isAvailableForAll\" disabled>\r\n          <label class=\"form-check-label\" for=\"isAvailableForAll\">Available to All Sponsors</label>\r\n        </div>\r\n\r\n        <!-- Sponsor Dropdown -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"sponsor\" class=\"form-label\"><span class=\"text-danger\">*</span> Sponsor</label>\r\n          <div class=\"dropdown w-100\">\r\n            <button \r\n              class=\"btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle\" \r\n              type=\"button\" \r\n              id=\"sponsorDropdown\" \r\n              data-bs-toggle=\"dropdown\" \r\n              aria-expanded=\"false\" \r\n              disabled>\r\n              <span id=\"sponsorDropdownLabel\">Select Sponsors</span>\r\n              <span class=\"dropdown-toggle-icon\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu w-100 p-2\" aria-labelledby=\"sponsorDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\r\n              <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n                  <label class=\"form-check-label\" for=\"selectAll\">Select All</label>\r\n                </div>\r\n              </li>\r\n              ${sponsorOptions}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-btn-gen-ai\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"text-gen-save\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n  return body\r\n}\r\n\r\nfunction logoheader(storedUrl) {\r\n  const themeicon=theme==='Dark'?'fa-sun':'fa-moon'\r\n  const body = `\r\n    <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n    <div class=\"icon-nav me-3\">\r\n      <i class=\"fa fa-home c-pointer me-3\" title=\"Home\" id=\"home\"></i>\r\n      <div class=\"dropdown d-inline\">\r\n        <i class=\"fa fa-tools c-pointer me-3\" id=\"settingsDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" title=\"Settings\"></i>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"settingsDropdown\">\r\n          <li>\r\n            <a class=\"dropdown-item\" href=\"#\" id=\"define-formatting\">\r\n              <i class=\"fa fa-sliders-h me-2\" aria-hidden=\"true\"></i> Define Formatting\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"glossary\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-book me-2\" aria-hidden=\"true\"></i> Apply Glossary\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"removeFormatting\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-eraser me-2\" aria-hidden=\"true\"></i> Remove Formatting\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Theme Toggle Icon -->\r\n      <span id=\"theme-toggle\"><i class=\"fa ${themeicon} c-pointer me-3\" title=\"Toggle Theme\"></i></span>\r\n\r\n      <i class=\"fa fa-sign-out c-pointer me-3\" id=\"logout\" title=\"Logout\"></i>\r\n    </div>    \r\n  `\r\n  return body;\r\n}\r\n\r\nconst navTabs = `<ul class=\"nav nav-tabs\" id=\"tabList\" role=\"tablist\">\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link active\" id=\"tag-tab\" data-bs-toggle=\"tab\" href=\"#tag\" role=\"tab\">Tag</a>\r\n  </li>\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link\" id=\"prompt-tab\" data-bs-toggle=\"tab\" href=\"#prompt\" role=\"tab\">Prompt builder</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content p-3 border border-top-0\">\r\n  <div class=\"tab-pane fade show active\" id=\"add-tag-body\" role=\"tabpanel\" aria-labelledby=\"tag-tab\">\r\n  </div>\r\n  <div class=\"tab-pane fade\" id=\"add-prompt-template\" role=\"tabpanel\" aria-labelledby=\"prompt-tab\">\r\n  </div>\r\n</div>\r\n`\r\n\r\n\r\n\r\nconst promptbuilderbody = `<div>hi</div>`\r\n\r\n\r\nexport { navTabs, addtagbody, promptbuilderbody, logoheader };","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\nimport { dataUrl, storeUrl, versionLink } from \"./data\";\r\nimport { generateCheckboxHistory, initializeAIHistoryEvents, loadHomepage, setupPromptBuilderUI } from \"./components/home\";\r\nimport { applyThemeClasses, chatfooter, copyText, insertTagPrompt, renderSelectedTags, swicthThemeIcon, switchToAddTag, switchToPromptBuilder, updateEditorFinalTable } from \"./functions\";\r\nimport { addtagbody, logoheader, navTabs, promptbuilderbody } from \"./components/bodyelements\";\r\nimport { addAiHistory, addGroupKey, fetchGlossaryTemplate, getAiHistory, getAllClients, getAllPromptTemplates, getReportById, loginUser, updateAiHistory, updateGroupKey } from \"./api\";\r\nexport let jwt = '';\r\nlet storedUrl = storeUrl\r\nlet documentID = ''\r\nlet organizationName = ''\r\nlet aiTagList = [];\r\nlet initialised = true;\r\nexport let availableKeys = [];\r\nlet promptBuilderList = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\nlet capturedFormatting: any = {};\r\nlet emptyFormat: boolean = false;\r\nlet isNoFormatTextAvailable: boolean = false;\r\nlet clientId = '0';\r\nlet userId = 0;\r\nlet clientList = [];\r\nlet version = versionLink;\r\nlet currentYear = new Date().getFullYear();\r\nlet sourceList;\r\nlet filteredGlossaryTerm;\r\nexport let selectedNames = [];\r\nexport let isPendingResponse = false;\r\nexport let theme = 'Light';\r\n\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"footer\").innerText = `© ${currentYear} - TrialAssure LINK AI Assistant ${version}`\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      () => {\r\n        logBookmarksInSelection();\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      const orgName = properties.items.find(prop => prop.key === 'Organization');\r\n      if (property && orgName) {\r\n        documentID = property.value;\r\n        organizationName = orgName.value;\r\n        login()\r\n      } else {\r\n        document.getElementById('app-body').innerHTML = `\r\n        <p class=\"px-3 text-center\">Export a document from the LINK AI application to use this functionality.</p>`\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  console.log(sessionToken)\r\n  if (sessionToken) {\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n  document.getElementById('logo-header').innerHTML = `\r\n  <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n  <div class=\"icon-nav me-3\">\r\n    <span id=\"theme-toggle\"><i class=\"fa fa-moon c-pointer me-3\"  title=\"Toggle Theme\"></i><span>\r\n  </div>\r\n`;\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-2\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary bg-primary-clr\">Login</button>\r\n        </div>\r\n      <div id=\"login-error\" class=\"mt-3 text-danger\" style=\"display: none;\"></div>\r\n\r\n      </form>\r\n    </div>\r\n  `;\r\n  document.getElementById('theme-toggle').addEventListener('click', () => {\r\n    theme = theme === 'Light' ? 'Dark' : 'Light';\r\n    applyThemeClasses(theme)\r\n    \r\n    document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n    document.body.classList.toggle('light-theme', theme === 'Light');\r\n    swicthThemeIcon()\r\n  }\r\n  );\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = (document.getElementById('organization') as HTMLInputElement).value;\r\n  const username = (document.getElementById('username') as HTMLInputElement).value;\r\n  const password = (document.getElementById('password') as HTMLInputElement).value;\r\n  if (organization.toLowerCase().trim() === organizationName.toLocaleLowerCase().trim()) {\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n    try {\r\n      const data = await loginUser(organization, username, password);\r\n      if (data.Status === true && data['Data']) {\r\n        if (data['Data'].ResponseStatus) {\r\n          jwt = data.Data.Token;\r\n          sessionStorage.setItem('token', jwt)\r\n          sessionStorage.setItem('userId', data.Data.ID);\r\n          window.location.hash = '#/dashboard';\r\n\r\n        } else {\r\n          showLoginError(\"An error occurred during login. Please try again.\")\r\n        }\r\n      } else {\r\n        showLoginError(\"An error occurred during login. Please try again.\")\r\n      }\r\n    } catch (error) {\r\n      showLoginError(\"An error occurred during login. Please try again.\")\r\n      console.error('Error during login:', error);\r\n      // Handle login error (e.g., show an error message)\r\n    }\r\n  } else {\r\n    showLoginError(\"The organization specified is not associated with this document\")\r\n  }\r\n}\r\n\r\nfunction showLoginError(message) {\r\n  loadLoginPage();  // Reload the form UI\r\n  const errorDiv = document.getElementById('login-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction displayMenu() {\r\n  userId = Number(sessionStorage.getItem('userId'))\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument('Init');\r\n\r\n}\r\n\r\nasync function fetchDocument(action) {\r\n  try {\r\n\r\n    const data = await getReportById(documentID, jwt);\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML = logoheader(storedUrl);\r\n\r\n    dataList = data['Data'];\r\n    sourceList = dataList.SourceTypeList.filter(\r\n      (item) => item.SourceValue !== ''\r\n        && item.AIFlag === 1\r\n    ) // Filter items with an extension\r\n      .map((item) => ({\r\n        ...item, // Spread the existing properties\r\n        SourceName: transformDocumentName(item.SourceValue)\r\n      }));\r\n    clientId = dataList.ClientID;\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n    availableKeys.forEach((key) => {\r\n      if (key.AIFlag === 1) {\r\n        const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n        let match;\r\n        if ((match = regex.exec(key.EditorValue) !== null)) {\r\n          {\r\n            key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n            key.UserValue = key.EditorValue;\r\n            key.InitialTable = true;\r\n            key.ComponentKeyDataType = 'TABLE';\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    aiTagList.forEach((key, i) => {\r\n      const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n      let match;\r\n      if ((match = regex.exec(key.EditorValue) !== null)) {\r\n        {\r\n          key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n          key.UserValue = key.EditorValue;\r\n          key.InitialTable = true;\r\n          key.ComponentKeyDataType = 'TABLE';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    );\r\n    fetchClients();\r\n    loadPromptTemplates();\r\n    loadHomepage(availableKeys);\r\n    document.getElementById('home').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        loadHomepage(availableKeys);\r\n      }\r\n    });\r\n\r\n    document.getElementById('glossary').addEventListener('click', () => {\r\n      if (emptyFormat) {\r\n        fetchGlossary();\r\n      }\r\n    });\r\n\r\n    document.getElementById('define-formatting').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        formatOptionsDisplay()\r\n      }\r\n    }\r\n    );\r\n\r\n\r\n    document.getElementById('removeFormatting').addEventListener('click', () => {\r\n      if (Object.keys(capturedFormatting).length > 0) {\r\n        removeOptionsConfirmation();\r\n      }\r\n    });\r\n\r\n\r\n    document.getElementById('theme-toggle').addEventListener('click', () => {\r\n      theme = theme === 'Light' ? 'Dark' : 'Light';\r\n      applyThemeClasses(theme)\r\n      \r\n      document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n      document.body.classList.toggle('light-theme', theme === 'Light');\r\n      swicthThemeIcon()\r\n    }\r\n    );\r\n\r\n    document.getElementById('logout').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        logout()\r\n      }\r\n    }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchClients() {\r\n  try {\r\n    const userId = sessionStorage.getItem('userId') || '';\r\n\r\n\r\n    const data = await getAllClients(userId, jwt);\r\n\r\n    if (data.Status && data.Data) {\r\n      clientList = data['Data'];\r\n    } else {\r\n      console.warn(\"Failed to load clients or no clients found.\");\r\n    }\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function formatOptionsDisplay() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n               <!-- Buttons for Capture and Empty Format -->\r\n            <div class=\"d-flex justify-content-end\">\r\n              <button id=\"capture-format-btn\" class=\"btn btn-primary bg-primary-clr\"><i class=\"fa fa-border-style me-1\"></i>  Capture Format</button>\r\n            </div>\r\n            <!-- <h5 class=\"card-title\">Formatting Options</h5> -->\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div class=\"formating-checkbox\">\r\n               <input type=\"checkbox\" id=\"empty-format-checkbox\" class=\"form-check-input\">\r\n              <label for=\"empty-format-checkbox\" class=\"form-check-label empty-format-checkbox-label\" style=\"flex: 1;\">\r\n                   Skip ignoring and removing format-based text\r\n              </label>\r\n            </div>\r\n\r\n            <!-- Section to display captured formatting -->\r\n            <div id=\"format-details\">\r\n              <h5 class=\"my-3\">Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled\"></ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    if (Object.keys(capturedFormatting).length === 0) {\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // The object is not empty\r\n    }\r\n\r\n    const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n    if (!glossaryBtn.classList.contains('disabled-link')) {\r\n      glossaryBtn.classList.add('disabled-link');\r\n    }\r\n\r\n    if (emptyFormat) {\r\n      clearCapturedFormatting();\r\n    }\r\n    else {\r\n      if (capturedFormatting.Bold === null || capturedFormatting.Bold === undefined ||\r\n        capturedFormatting.Underline === 'Mixed' || capturedFormatting.Underline === undefined ||\r\n        capturedFormatting.Size === null || capturedFormatting.Size === undefined ||\r\n        capturedFormatting[\"Font Name\"] === null || capturedFormatting[\"Font Name\"] === undefined ||\r\n        capturedFormatting[\"Background Color\"] === '' || capturedFormatting[\"Background Color\"] === undefined ||\r\n        capturedFormatting[\"Text Color\"] === '' || capturedFormatting[\"Text Color\"] === undefined) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n\r\n\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    }\r\n    // Event listeners for the buttons\r\n\r\n    document.getElementById(\"capture-format-btn\").addEventListener(\"click\", captureFormatting);\r\n\r\n    const emptyFormatCheckbox = document.getElementById(\"empty-format-checkbox\") as HTMLInputElement;\r\n    if (isNoFormatTextAvailable) {\r\n      emptyFormatCheckbox.checked = true;\r\n      clearCapturedFormatting();\r\n    }\r\n\r\n    emptyFormatCheckbox.addEventListener(\"change\", () => {\r\n      if (emptyFormatCheckbox.checked) {\r\n        isNoFormatTextAvailable = true;\r\n        clearCapturedFormatting();\r\n      } else {\r\n        const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n        CaptureBtn.disabled = false;\r\n        isNoFormatTextAvailable = false;\r\n        emptyFormat = false;\r\n        const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n        if (!glossaryBtn.classList.contains('disabled-link')) {\r\n          glossaryBtn.classList.add('disabled-link');\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayCapturedFormatting() {\r\n  emptyFormat = false;\r\n  const formatList = document.getElementById(\"format-list\");\r\n  formatList.innerHTML = \"\"; // Clear the list before adding new items\r\n\r\n  for (const [key, value] of Object.entries(capturedFormatting)) {\r\n    if ((key === \"Text Color\" || key === \"Background Color\") && value) {\r\n      formatList.innerHTML += `\r\n        <li><strong>${key}:</strong>${value}\r\n          <span style=\"display:inline-block;width:15px;height:15px;background-color:${value};border:1px solid black;\"></span>\r\n        </li>\r\n      `;\r\n    } else {\r\n      formatList.innerHTML += `<li><strong>${key}:</strong> ${value}</li>`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearCapturedFormatting() {\r\n  capturedFormatting = {}; // Clear the captured formatting object\r\n  const formatDetails = document.getElementById(\"format-details\");\r\n  formatDetails.style.display = 'none';\r\n  // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n  emptyFormat = true;\r\n  const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n  glossaryBtn.classList.remove('disabled-link');\r\n  const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n  CaptureBtn.disabled = true;\r\n\r\n\r\n  const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n  if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n    removeFormatBtn.classList.add('disabled-link');\r\n  }\r\n  console.log(\"Captured formatting cleared.\");\r\n}\r\n\r\nasync function captureFormatting() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      const font = selection.font;\r\n      font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n\r\n      await context.sync();\r\n\r\n      capturedFormatting = {\r\n        Bold: font.bold,\r\n        Italic: font.italic,\r\n        Underline: font.underline,\r\n        Size: font.size,\r\n        \"Background Color\": font.highlightColor,\r\n        \"Font Name\": font.name,\r\n        'Text Color': font.color\r\n      };\r\n\r\n\r\n\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'block';\r\n\r\n      if (capturedFormatting.Bold === null ||\r\n        capturedFormatting.Underline === 'Mixed' ||\r\n        capturedFormatting.Size === null ||\r\n        capturedFormatting[\"Font Name\"] === null ||\r\n        capturedFormatting[\"Background Color\"] === '' ||\r\n        capturedFormatting[\"Text Color\"] === ''\r\n\r\n      ) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error capturing formatting:\", error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function removeOptionsConfirmation() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    } // Check if isTagUpdating is false\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Are you sure you want to remove formatted text ?</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div id=\"format-details\">\r\n              <h5>Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled mb-3\"></ul>\r\n              <small class=\"text-secondary font-italic\" id=\"warning-rem-fmt\"></small>\r\n             \r\n            </div>\r\n               <!-- Buttons for Capture and Empty Format -->\r\n\r\n            <div class=\"mt-3 d-flex justify-content-between\">\r\n              <span id=\"change-ft-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n              <button id=\"clear-ft-btn\" class=\"btn btn-primary px-3\"><i class=\"fa fa-check-circle me-2\"></i>Yes</button>\r\n\r\n            </div>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    displayCapturedFormatting();\r\n\r\n    if (capturedFormatting['Background Color'] === null &&\r\n      capturedFormatting['Text Color'] === '#000000') {\r\n      const warningEle = document.getElementById('warning-rem-fmt').innerHTML = 'Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?'\r\n    }\r\n\r\n    // Event listeners for the buttons\r\n    document.getElementById(\"clear-ft-btn\").addEventListener(\"click\", removeFormattedText);\r\n    document.getElementById(\"change-ft-btn\").addEventListener(\"click\", formatOptionsDisplay);\r\n\r\n  }\r\n}\r\n\r\nasync function removeFormattedText() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n      const iconelement = document.getElementById(`clear-ft-btn`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Yes`;\r\n      const clrBtn = document.getElementById('clear-ft-btn') as HTMLButtonElement;\r\n      clrBtn.disabled = true;\r\n\r\n      const changeBtn = document.getElementById('change-ft-btn') as HTMLButtonElement;\r\n      changeBtn.disabled = true;\r\n      const paragraphs = context.document.body.paragraphs;\r\n      paragraphs.load(\"items\"); // Load paragraphs from the body\r\n\r\n      await context.sync();\r\n\r\n      // Iterate through each paragraph in the document body\r\n      for (const paragraph of paragraphs.items) {\r\n        // Check if the paragraph contains text\r\n        if (paragraph.text.trim() !== \"\") {\r\n          const textRanges = paragraph.split([\" \"]); // Split paragraph into individual words/segments\r\n          textRanges.load(\"items, font\");\r\n\r\n          await context.sync();\r\n\r\n          for (const range of textRanges.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n\r\n            // Check if the text range matches the captured formatting\r\n            if (\r\n              font.highlightColor === capturedFormatting['Background Color'] &&\r\n              font.color === capturedFormatting['Text Color'] &&\r\n              font.bold === capturedFormatting['Bold'] &&\r\n              font.italic === capturedFormatting['Italic'] &&\r\n              font.size === capturedFormatting['Size'] &&\r\n              font.underline === capturedFormatting['Underline'] &&\r\n              font.name === capturedFormatting['Font Name']\r\n            ) {\r\n              // Clear the range whether it's a full word or part of a word\r\n              font.highlightColor = \"#FFFFFF\"; // Set new background color\r\n              font.color = \"#000000\"; // Set new text color\r\n              font.bold = false; // Reset bold if needed\r\n              font.italic = false; // Reset italic if needed\r\n              font.underline = \"None\";\r\n              paragraph.insertText(\" \", Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n      capturedFormatting = {}; // Clear the captured formatting object\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n      emptyFormat = true;\r\n      isNoFormatTextAvailable = true;\r\n      const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n      glossaryBtn.classList.remove('disabled-link');\r\n      formatOptionsDisplay()\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing formatted text:\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAIHistory(tag) {\r\n  try {\r\n\r\n    const data = await getAiHistory(tag.ID, jwt);\r\n\r\n\r\n    if (data.Status && data.Data) {\r\n      tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n      tag.FilteredReportHeadAIHistoryList = [];\r\n      tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n      });\r\n      return tag.FilteredReportHeadAIHistoryList;\r\n      // Use the data here\r\n    } else {\r\n      console.warn(\"No AI history available.\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendPrompt(tag, prompt) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n\r\n    const iconelement = document.getElementById(`sendPromptButton`);\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`;\r\n\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      ThreadID: tag.ThreadID,\r\n      AssistantID: dataList.AssistantID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      VectorID: dataList.VectorID,\r\n      Selected: 0,\r\n      ID: 0,\r\n      SourceValue: tag.SourceValue ? tag.SourceValue : []\r\n    };\r\n\r\n    try {\r\n      isPendingResponse = true;\r\n      const data = await addAiHistory(payload, jwt);\r\n\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n\r\n        const appbody = document.getElementById('app-body')\r\n        appbody.innerHTML = await generateCheckboxHistory(tag);\r\n        isPendingResponse = false;\r\n\r\n      }\r\n\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      document.getElementById(`chatInput`).value = '';\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      // sourceListBtn.disabled = false;\r\n\r\n    } catch (error) {\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      console.error('Error sending AI prompt:', error);\r\n    }\r\n  } else {\r\n    console.error('No empty prompt allowed');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Your existing copyText function\r\n\r\n\r\n\r\nasync function logout() {\r\n  if (isGlossaryActive) {\r\n    await removeMatchingContentControls();\r\n  }\r\n  sessionStorage.clear();\r\n  window.location.hash = '#/new';\r\n  initialised = true;\r\n  document.getElementById('logo-header').innerHTML = ``;\r\n  login();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nexport async function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n      context.load(body, 'text');\r\n      await context.sync();\r\n\r\n      // Iterate over the aiTagList to search and replace\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        // Clean up the EditorValue by removing quotes\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        // Search for all instances of the tag.DisplayName enclosed with `#`\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n\r\n        // Load the search results to ensure they are available for further operations\r\n        context.load(searchResults, 'items');\r\n\r\n        await context.sync(); // Synchronize to fetch the search results\r\n\r\n        // Log the number of search results for debugging\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n        const tableInsertPositions: { range: Word.Range, tag: any }[] = [];\r\n\r\n        // Replace each found instance with tag.EditorValue\r\n        searchResults.items.forEach((item: any) => {\r\n          // Ensure the EditorValue is not empty before replacing\r\n          if (tag.EditorValue !== \"\" && !tag.IsApplied) {\r\n            if (tag.ComponentKeyDataType === 'TABLE') {\r\n              const range = item.getRange();\r\n              tableInsertPositions.push({ range, tag });\r\n              range.delete();\r\n            } else {\r\n              item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        });\r\n\r\n        for (const { range, tag } of tableInsertPositions) {\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n\r\n          const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n          for (const node of bodyNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n              const textContent = node.textContent?.trim();\r\n              if (textContent) {\r\n                textContent.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(range, line);\r\n                  }\r\n                });\r\n              }\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n              const element = node as HTMLElement;\r\n\r\n              if (element.tagName.toLowerCase() === 'table') {\r\n                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                if (rows.length === 0) {\r\n                  range.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                  continue;\r\n                }\r\n\r\n                const maxCols = Math.max(...rows.map(row => {\r\n                  return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                  }, 0);\r\n                }));\r\n\r\n                const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n                await context.sync();\r\n\r\n                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n                await context.sync();\r\n\r\n                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                rows.forEach((row, rowIndex) => {\r\n                  const cells = Array.from(row.querySelectorAll('td, th'));\r\n                  let cellIndex = 0;\r\n\r\n                  cells.forEach((cell) => {\r\n                    while (rowspanTracker[cellIndex] > 0) {\r\n                      rowspanTracker[cellIndex]--;\r\n                      cellIndex++;\r\n                    }\r\n\r\n                    const cellText = Array.from(cell.childNodes)\r\n                      .map(node => {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                          return node.textContent?.trim() || '';\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                          return (node as HTMLElement).innerText.trim();\r\n                        }\r\n                        return '';\r\n                      })\r\n                      .filter(text => text.length > 0)\r\n                      .join(' ');\r\n\r\n                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                    // if (rowIndex === 0) {\r\n                    //   const cell = table.getCell(rowIndex, cellIndex);\r\n                    //   const paragraph = cell.body.paragraphs.getFirst();\r\n                    //   paragraph.font.bold = true;\r\n                    //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                    // }\r\n                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                    for (let i = 1; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                      }\r\n                    }\r\n\r\n                    if (rowspan > 1) {\r\n                      for (let i = 0; i < colspan; i++) {\r\n                        if (cellIndex + i < maxCols) {\r\n                          rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    cellIndex += colspan;\r\n                  });\r\n                });\r\n              } else {\r\n                const elementText = element.innerText.trim();\r\n                if (elementText) {\r\n                  elementText.split('\\n').forEach(line => {\r\n                    if (line.trim()) {\r\n                      insertLineWithHeadingStyle(range, line);\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Additional sync after each replacement\r\n        await context.sync();\r\n      }\r\n\r\n      // Final sync to apply all changes\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nasync function onRadioChange(tag, tagIndex, chatIndex) {\r\n  if (!isTagUpdating) {\r\n    isTagUpdating = true;\r\n    const iconelement = document.getElementById(`sendPrompt-${tagIndex}`)\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`\r\n    const chat = tag.FilteredReportHeadAIHistoryList[chatIndex];\r\n    let payload = JSON.parse(JSON.stringify(chat));\r\n    payload.Container = dataList.Container;\r\n    payload.Selected = 1;\r\n    const matchingKey = availableKeys.find(prop => prop.DisplayName === tag.DisplayName);\r\n    if (matchingKey) {\r\n      matchingKey.EditorValue = payload.Response;\r\n    }\r\n    try {\r\n\r\n      const data = await updateAiHistory(payload, jwt);\r\n\r\n      if (data['Data']) {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n\r\n        const selectedParent = document.getElementById(`selected-response-parent-${tagIndex}`);\r\n        const allSelectedDivs = selectedParent.querySelectorAll('.ai-selected-reply');\r\n        allSelectedDivs.forEach(div => {\r\n          div.classList.remove('ai-selected-reply');\r\n          div.classList.add('bg-light');\r\n        });\r\n\r\n        const selectElement = document.getElementById(`selected-response-${tagIndex}${chatIndex}`);\r\n        if (selectElement) {\r\n          selectElement.classList.remove('bg-light');\r\n          selectElement.classList.add('ai-selected-reply');\r\n        }\r\n\r\n        const finalResponse = chat.FormattedResponse\r\n          ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n          : chat.Response;\r\n\r\n        tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n        tag.UserValue = finalResponse;\r\n        tag.EditorValue = finalResponse;\r\n        tag.text = finalResponse;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error updating AI data:', error);\r\n    } finally {\r\n      const iconelement = document.getElementById(`sendPrompt-${tagIndex}`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction selectResponse(tagIndex, chatIndex) {\r\n  // Handle the response selection logic here\r\n  console.log(`Response selected for tagIndex ${tagIndex}, chatIndex ${chatIndex}`);\r\n}\r\n\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n    loadGlossary()\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n      body.load(\"text\");\r\n      await context.sync(); // Sync to get the text content\r\n\r\n      const bodyText = {\r\n        \"Content\": body.text.replace(/[\\n\\r]/g, ' ')\r\n      };\r\n      try {\r\n\r\n        const data = await fetchGlossaryTemplate(dataList?.ClientID, bodyText, jwt);\r\n\r\n        layTerms = data.Data;\r\n\r\n        if (data.Data.length > 0) {\r\n          glossaryName = data.Data[0].GlossaryTemplate;\r\n          loadGlossary();\r\n        } else {\r\n          document.getElementById('app-body').innerHTML = `\r\n            <p class=\"text-center\">Data not available</p>\r\n          `;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n      }\r\n      // Sort terms by length (longest first)\r\n      layTerms.sort((a, b) => b.ClinicalTerm.length - a.ClinicalTerm.length);\r\n\r\n      const processedTerms = new Set(); // Track added larger terms\r\n\r\n      // Filter out smaller terms if they are included in a larger term\r\n      const filteredTerms = layTerms.filter(term => {\r\n        for (const biggerTerm of processedTerms) {\r\n          if (typeof biggerTerm === 'string' && biggerTerm.includes(term.ClinicalTerm.toLowerCase())) {\r\n            console.log(`Skipping \"${term.ClinicalTerm}\" because it's part of \"${biggerTerm}\"`);\r\n            return false; // Exclude this smaller term\r\n          }\r\n        }\r\n        processedTerms.add(term.ClinicalTerm.toLowerCase());\r\n        return true;\r\n      });\r\n\r\n      filteredGlossaryTerm = filteredTerms;\r\n      await removeMatchingContentControls();\r\n\r\n      const foundRanges = new Map(); // Track words already processed\r\n\r\n      const searchPromises = filteredGlossaryTerm.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      for (const searchResults of searchPromises) {\r\n\r\n        for (const range of searchResults.items) {\r\n\r\n          if (!range || !range.text) {\r\n            console.log(\"Invalid range. Skipping...\");\r\n            continue;\r\n          }\r\n\r\n          // Load existing content controls inside this range\r\n          const font = range.font;\r\n          font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n          range.load(\"contentControls\");\r\n          await context.sync();\r\n\r\n          const existingControl = range.contentControls.items.length > 0;\r\n\r\n          if (existingControl) {\r\n            console.log(`Skipping \"${range.text}\" because it already has a content control.`);\r\n            continue; // Skip if content control is already present\r\n          }\r\n          // Check if we've already processed this term at this range\r\n          if (foundRanges.has(range.text)) {\r\n            console.log(`Skipping duplicate occurrence of \"${range.text}\"`);\r\n            continue;\r\n          }\r\n          // Mark this word as processed\r\n          foundRanges.set(range.text, true);\r\n          // Remove existing content controls if any\r\n          if (range.contentControls && range.contentControls.items.length > 0) {\r\n            console.log(`Removing existing content control from: \"${range.text}\"`);\r\n            for (const control of range.contentControls.items) {\r\n              control.delete(false); // 'false' keeps the text, only removes the control\r\n            }\r\n            await context.sync(); // Ensure deletion is applied before adding a new one\r\n          }\r\n\r\n          try {\r\n            // Insert a new content control\r\n            const contentControl = range.insertContentControl();\r\n            contentControl.title = `${range.text}`;\r\n            if (font.highlightColor !== null) {\r\n              contentControl.tag = `${font.highlightColor}`;\r\n            }\r\n            contentControl.font.highlightColor = \"yellow\"; // Highlight the control\r\n            contentControl.appearance = Word.ContentControlAppearance.boundingBox;\r\n            await context.sync();\r\n          } catch (error) {\r\n            console.error(`Error inserting content control for term \"${range.text}\":`, error);\r\n          }\r\n        }\r\n      }\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      <div class=\"d-flex justify-content-center box-loader\">\r\n       <div class=\"loader\" id=\"loader\"></div></div>\r\n      \r\n`\r\n      const displayElement = document.getElementById('loader');\r\n      displayElement.style.display = 'none';\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', removeMatchingContentControls);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const loader = document.getElementById('loader');\r\n        if (loader) {\r\n          loader.style.display = 'block';\r\n        }\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        for (const searchResults of searchPromises) {\r\n\r\n          for (const range of searchResults.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n            if (\r\n              font.highlightColor !== capturedFormatting['Background Color'] ||\r\n              font.color !== capturedFormatting['Text Color'] ||\r\n              font.bold !== capturedFormatting['Bold'] ||\r\n              font.italic !== capturedFormatting['Italic'] ||\r\n              font.size !== capturedFormatting['Size'] ||\r\n              font.underline !== capturedFormatting['Underline'] ||\r\n              font.name !== capturedFormatting['Font Name']\r\n            ) {\r\n              selectedWords.push(range.text);\r\n            }\r\n\r\n          }\r\n        }\r\n        // searchPromises.forEach(searchResults => {\r\n        //   searchResults.items.forEach(item => {\r\n        //   });\r\n        // });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n    const loader = document.getElementById('loader');\r\n    loader.style.display = 'block';\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm.toLowerCase() === word.toLowerCase()) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n    loader.style.display = 'none';\r\n\r\n  }\r\n}\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  const displayElement = document.getElementById('loader');\r\n  displayElement.style.display = 'block';\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.toLowerCase().includes(clinicalTerm.toLowerCase())) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        for (const item of searchResults.items) {\r\n          // Load the font properties\r\n          item.font.load(['bold', 'italic', 'underline', 'color', 'highlightColor', 'size', 'name']);\r\n          await context.sync();  // Ensure the properties are loaded before accessing them\r\n\r\n          // Insert the layTerm while keeping the formatting\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Apply the original formatting to the new text\r\n          item.font.bold = item.font.bold;\r\n          item.font.italic = item.font.italic;\r\n          item.font.underline = item.font.underline;\r\n          item.font.color = item.font.color;\r\n          item.font.highlightColor = '#c7c7c7';\r\n          item.font.size = item.font.size;\r\n          item.font.name = item.font.name;\r\n        }\r\n\r\n        await context.sync();\r\n        displayElement.style.display = 'none';\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and preserved the original formatting.`);\r\n      } else {\r\n        displayElement.style.display = 'none';\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    displayElement.style.display = 'none';\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function removeMatchingContentControls() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <div class=\"loader\" id=\"loader\"></div>\r\n        <div id=\"highlighted-text\"></div>`;\r\n      const body = context.document.body;\r\n\r\n      // Load all content controls\r\n      const contentControls = body.contentControls;\r\n      contentControls.load(\"items\");\r\n      await context.sync();\r\n\r\n      if (contentControls.items.length === 0) {\r\n        console.log(\"No content controls found.\");\r\n        return;\r\n      }\r\n\r\n      for (const control of contentControls.items) {\r\n        if (control.title && filteredGlossaryTerm.some(term => term.ClinicalTerm.toLowerCase() === control.title.toLowerCase())) {\r\n          const range = control.getRange();\r\n          range.load(\"text\");\r\n          await context.sync();\r\n          if (control.tag && /^#[0-9A-Fa-f]{6}$/.test(control.tag)) {\r\n            range.font.highlightColor = control.tag;\r\n          } else {\r\n            range.font.highlightColor = null\r\n          }\r\n          await context.sync();\r\n          control.delete(true);\r\n        }\r\n      }\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n      `;\r\n\r\n      await context.sync();\r\n      isGlossaryActive = false;\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing content controls:\", error);\r\n  }\r\n}\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nexport async function addGenAITags() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n    let selectedClient = clientList.filter((item) => item.ID === clientId);\r\n\r\n    let sponsorOptions = clientList.map(client => {\r\n      const isSelectedClient = selectedClient.some(selected => selected.ID === client.ID);\r\n      return ` \r\n        <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" value=\"${client.ID}\" id=\"sponsor${client.ID}\" ${isSelectedClient ? 'checked disabled' : ''}>\r\n            <label class=\"form-check-label text-prewrap\" for=\"sponsor${client.ID}\">${client.Name}</label>\r\n          </div>\r\n        </li>\r\n      `;\r\n    }).join('');\r\n\r\n    document.getElementById('app-body').innerHTML = navTabs;\r\n    // Add modal HTML to the DOM\r\n    document.getElementById('add-tag-body').innerHTML = addtagbody(sponsorOptions);\r\n    const promptTemplateElement = document.getElementById('add-prompt-template')\r\n    setupPromptBuilderUI(promptTemplateElement, promptBuilderList)\r\n\r\n\r\n    document.getElementById('tag-tab').addEventListener('click', () => {\r\n      switchToAddTag()\r\n    });\r\n\r\n\r\n    document.getElementById('prompt-tab').addEventListener('click', () => {\r\n      switchToPromptBuilder()\r\n    });\r\n\r\n    //prompt starting\r\n    mentionDropdownFn('prompt', 'mention-dropdown', 'add');\r\n    //prompt end\r\n    const form = document.getElementById('genai-form');\r\n    const promptField = document.getElementById('prompt');\r\n\r\n    const nameField = document.getElementById('name');\r\n    const descriptionField = document.getElementById('description');\r\n    const saveGloballyCheckbox = document.getElementById('saveGlobally');\r\n    const availableForAllCheckbox = document.getElementById('isAvailableForAll');\r\n    const sponsorDropdownButton = document.getElementById('sponsorDropdown');\r\n    const sponsorDropdownItems = document.querySelectorAll('.dropdown-item .form-check-input');\r\n\r\n    document.getElementById('cancel-btn-gen-ai').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        loadHomepage(availableKeys)\r\n      }\r\n    });\r\n\r\n    // Check if elements exist\r\n    if (form && nameField && promptField && sponsorDropdownItems.length > 0) {\r\n      const updateDropdownLabel = () => {\r\n        if (availableForAllCheckbox.checked) {\r\n          sponsorDropdownButton.textContent = clientList.map(client => client.Name).join(\", \");\r\n        } else {\r\n          const selectedOptions = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => cb.parentElement.textContent.trim());\r\n          sponsorDropdownButton.textContent = selectedOptions.length ? selectedOptions.join(\", \") : \"Select Sponsors\";\r\n        }\r\n      };\r\n      // Form validation logic on submit\r\n      form.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n\r\n        // Reset previous validation errors\r\n        form.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));\r\n\r\n        let valid = true;\r\n\r\n        if (!(nameField as HTMLInputElement).value.trim()) {\r\n          nameField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (!(promptField as HTMLInputElement).value.trim()) {\r\n          promptField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (valid) {\r\n          // Prepare object to pass to createTextGenTag\r\n          const selectedSponsors = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => {\r\n              const client = clientList.find(client => client.ID == cb.value);\r\n              return client; // Collect the entire client object\r\n            });\r\n\r\n          const isAvailableForAll = availableForAllCheckbox.checked;\r\n          const isSaveGlobally = saveGloballyCheckbox.checked;\r\n          const aigroup = dataList.Group.find(element => element.DisplayName === 'AIGroup');\r\n          const formData = {\r\n            DisplayName: nameField.value.trim(),\r\n            Prompt: promptField.value.trim(),\r\n            Description: descriptionField.value.trim(),\r\n            GroupKeyClient: selectedSponsors, // Array of selected sponsor objects\r\n            AllClient: isAvailableForAll ? 1 : 0,\r\n            SaveGlobally: isSaveGlobally,\r\n            UserDefined: '1',\r\n            ComponentKeyDataTypeID: '1',\r\n            ComponentKeyDataAccessID: '3',\r\n            AIFlag: 1,\r\n            DocumentTypeID: dataList.DocumentTypeID,\r\n            ReportHeadID: dataList.ID,\r\n            SourceTypeID: '',\r\n            ReportHeadGroupID: aigroup.ID,\r\n            ReportHeadSourceID: ''\r\n          };\r\n\r\n          await createTextGenTag(formData);\r\n        }\r\n      });\r\n\r\n\r\n      const checkAndDisableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          if (!checkbox.disabled) {\r\n            checkbox.checked = true;\r\n            checkbox.disabled = true;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Function to enable sponsors without unchecking them\r\n      const enableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          const isSelectedClient = selectedClient.some(selected => selected.ID === parseInt(checkbox.value));\r\n          if (!isSelectedClient) {\r\n            checkbox.disabled = false;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Event listener for \"Save Globally\" checkbox\r\n\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n\r\n      saveGloballyCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n          if (this.checked) {\r\n            availableForAllCheckbox.disabled = false;\r\n            sponsorDropdownButton.disabled = false;\r\n          } else {\r\n            enableSponsors();\r\n            availableForAllCheckbox.checked = false;\r\n            availableForAllCheckbox.disabled = true;\r\n            sponsorDropdownButton.disabled = true;\r\n            sponsorDropdownItems.forEach(checkbox => {\r\n              if (!checkbox.disabled) {\r\n                checkbox.checked = false;\r\n                checkbox.disabled = false;\r\n              }\r\n            });\r\n            updateDropdownLabel();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n      availableForAllCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n\r\n          if (this.checked) {\r\n            checkAndDisableSponsors();\r\n          } else {\r\n            enableSponsors();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Add event listener to prevent dropdown close on item selection\r\n      document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', function (event) {\r\n          {\r\n            event.stopPropagation(); // Prevent dropdown from closing\r\n            const checkbox = this.querySelector('.form-check-input');\r\n            if (checkbox) {\r\n\r\n\r\n              if (checkbox.id === 'selectAll') {\r\n                const isChecked = checkbox.checked;\r\n                sponsorDropdownItems.forEach(cb => {\r\n                  if (!cb.disabled) cb.checked = isChecked;\r\n                });\r\n              }\r\n              updateDropdownLabel();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Initial label update\r\n      updateDropdownLabel();\r\n\r\n\r\n      // Clear validation errors when user types\r\n      [nameField, promptField].forEach(field => {\r\n        field.addEventListener('input', function () {\r\n          if (this.classList.contains('is-invalid') && this.value.trim()) {\r\n            this.classList.remove('is-invalid');\r\n          }\r\n          if (nameField) {\r\n            const errorDiv = document.getElementById('submition-error');\r\n            errorDiv.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('Required elements are missing or not rendered yet.');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function createTextGenTag(payload) {\r\n  try {\r\n    const iconelement = document.getElementById(`text-gen-save`);\r\n    const cancelBtnGenAi = document.getElementById('cancel-btn-gen-ai');\r\n\r\n\r\n    (cancelBtnGenAi as HTMLButtonElement).disabled = true;\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Save`;\r\n    (iconelement as HTMLButtonElement).disabled = true;\r\n    isPendingResponse = true;\r\n\r\n    const data = await addGroupKey(payload, jwt);\r\n    isPendingResponse = false;\r\n\r\n    if (data['Data'] && data['Status']) {\r\n      fetchDocument('AIpanel');\r\n    } else {\r\n      (cancelBtnGenAi as HTMLButtonElement).disabled = false;\r\n      (iconelement as HTMLButtonElement).disabled = false;\r\n      iconelement.innerHTML = `<i class=\"fa fa-check-circle me-2\"></i>Save`;\r\n      showAddTagError(data['Data']);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error creating text generation tag:', error);\r\n  }\r\n}\r\n\r\n\r\nexport function mentionDropdownFn(textareaId, DropdownId, action) {\r\n  const filterMentions = (query) => {\r\n    // Assuming availableKeys is an array of objects with DisplayName and EditorValue properties\r\n    const filtered = availableKeys.filter(item => item.AIFlag === 0).filter(item =>\r\n      item.DisplayName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    return filtered;\r\n  };\r\n  let highlightedIndex = -1;\r\n\r\n  const promptField = document.getElementById(`${textareaId}`);\r\n  const mentionDropdown = document.getElementById(`${DropdownId}`);\r\n  if (promptField) {\r\n\r\n    // Handle input events on prompt field for mentions\r\n    promptField.addEventListener('input', (e) => {\r\n      const cursorPosition = promptField.selectionStart;\r\n      const textBeforeCursor = promptField.value.slice(0, cursorPosition);\r\n      const lastHashtag = textBeforeCursor.lastIndexOf('#');\r\n      if (lastHashtag !== -1) {\r\n        const query = textBeforeCursor.slice(lastHashtag + 1).trim();\r\n        if (query.length > 0) {\r\n          const mentions = filterMentions(query);\r\n\r\n          if (mentions.length > 0) {\r\n            mentionDropdown.innerHTML = mentions.map(item => {\r\n              let editorValue = '';\r\n              if (action === 'add') {\r\n                editorValue = `#${item.DisplayName}#`;\r\n              } else {\r\n                editorValue = item.EditorValue || `#${item.DisplayName}#`;\r\n              }\r\n\r\n              return `<li class=\"dropdown-item\" data-editor-value=\"${editorValue}\">${item.DisplayName}</li>`;\r\n            }).join('');\r\n\r\n            // Get the position of the textarea and place the dropdown above it\r\n            const textareaRect = promptField.getBoundingClientRect();\r\n            mentionDropdown.style.left = `${textareaRect.left}px`;\r\n            mentionDropdown.style.bottom = `75px`; // Position above the textarea\r\n            mentionDropdown.style.display = 'block';\r\n          } else {\r\n            mentionDropdown.style.display = 'none';\r\n          }\r\n        } else {\r\n          mentionDropdown.style.display = 'none';\r\n        }\r\n      } else {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n\r\n    });\r\n\r\n    // Handle keyboard navigation in the dropdown\r\n    promptField.addEventListener('keydown', (e) => {\r\n      const items = document.querySelectorAll(`#${DropdownId} .dropdown-item`);\r\n      const totalItems = items.length;\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight down and wrap around to the top if at the end\r\n        if (highlightedIndex < totalItems - 1) {\r\n          highlightedIndex++;\r\n        } else {\r\n          highlightedIndex = 0; // Wrap to the first item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'ArrowUp') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight up and wrap around to the bottom if at the top\r\n        if (highlightedIndex > 0) {\r\n          highlightedIndex--;\r\n        } else {\r\n          highlightedIndex = totalItems - 1; // Wrap to the last item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'Enter' && highlightedIndex !== -1) {\r\n        // Select the highlighted item\r\n        const selectedItem = items[highlightedIndex];\r\n        if (selectedItem) {\r\n          selectMention(selectedItem.getAttribute('data-editor-value'));\r\n          mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n          e.preventDefault();  // Prevent form submission on Enter key\r\n        }\r\n      }\r\n    });\r\n\r\n    // Function to highlight the selected item\r\n    function updateHighlightedItem(id) {\r\n      const items = document.querySelectorAll(`#${id} .dropdown-item`);\r\n      const dropdown = document.getElementById(`${id}`);\r\n      const totalItems = items.length;\r\n\r\n      // Remove the 'active' class from all items\r\n      items.forEach(item => item.classList.remove('active'));\r\n\r\n      // Add the 'active' class to the currently highlighted item\r\n      if (highlightedIndex >= 0 && highlightedIndex < totalItems) {\r\n        const highlightedItem = items[highlightedIndex];\r\n        highlightedItem.classList.add('active');\r\n\r\n        // Ensure the highlighted item is visible within the dropdown\r\n        highlightedItem.scrollIntoView({\r\n          behavior: 'smooth',    // Smooth scroll\r\n          block: 'nearest'      // Scroll only if necessary\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Handle selecting an item from the dropdown via mouse click\r\n    mentionDropdown.addEventListener('click', (e) => {\r\n      if (e.target && e.target.matches('li')) {\r\n        const editorValue = e.target.getAttribute('data-editor-value');\r\n        selectMention(editorValue);\r\n        mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n      }\r\n    });\r\n\r\n    // Function to insert the selected mention into the prompt field\r\n    const selectMention = (editorValue) => {\r\n      const textarea = document.getElementById(`${textareaId}`);\r\n      const currentValue = textarea.value;\r\n      const cursorPosition = textarea.selectionStart;\r\n\r\n      const textBefore = currentValue.slice(0, cursorPosition);\r\n      const textAfter = currentValue.slice(cursorPosition);\r\n\r\n      const lastHashPosition = textBefore.lastIndexOf('#');\r\n      const updatedTextBefore = textBefore.slice(0, lastHashPosition); // Removing '#' symbol\r\n\r\n      textarea.value = `${updatedTextBefore}${editorValue}${textAfter}`;\r\n      const newCursorPosition = updatedTextBefore.length + editorValue.length;\r\n      textarea.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    };\r\n\r\n    // Hide the dropdown if clicked outside\r\n    document.addEventListener('click', (e) => {\r\n      if (!mentionDropdown.contains(e.target) && e.target !== promptField) {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n        const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n        for (const node of bodyNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const textContent = node.textContent?.trim();\r\n            if (textContent) {\r\n              textContent.split('\\n').forEach(line => {\r\n                if (line.trim()) {\r\n                  insertLineWithHeadingStyle(selection, line);\r\n                }\r\n              });\r\n            }\r\n          } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n            const element = node as HTMLElement;\r\n\r\n            if (element.tagName.toLowerCase() === 'table') {\r\n              const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n              if (rows.length === 0) {\r\n                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                continue;\r\n              }\r\n\r\n              const maxCols = Math.max(...rows.map(row => {\r\n                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                  return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                }, 0);\r\n              }));\r\n\r\n              const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n              await context.sync();\r\n\r\n              const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n              table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n              await context.sync();\r\n\r\n              const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n              rows.forEach((row, rowIndex) => {\r\n                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                let cellIndex = 0;\r\n\r\n                cells.forEach((cell) => {\r\n                  while (rowspanTracker[cellIndex] > 0) {\r\n                    rowspanTracker[cellIndex]--;\r\n                    cellIndex++;\r\n                  }\r\n\r\n                  const cellText = Array.from(cell.childNodes)\r\n                    .map(node => {\r\n                      if (node.nodeType === Node.TEXT_NODE) {\r\n                        return node.textContent?.trim() || '';\r\n                      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        return (node as HTMLElement).innerText.trim();\r\n                      }\r\n                      return '';\r\n                    })\r\n                    .filter(text => text.length > 0)\r\n                    .join(' ');\r\n\r\n                  const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                  const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                  // if (rowIndex === 0) {\r\n                  //   const cell = table.getCell(rowIndex, cellIndex);\r\n                  //   const paragraph = cell.body.paragraphs.getFirst();\r\n                  //   paragraph.font.bold = true;\r\n                  //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                  // }\r\n                  table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                  for (let i = 1; i < colspan; i++) {\r\n                    if (cellIndex + i < maxCols) {\r\n                      table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                    }\r\n                  }\r\n\r\n                  if (rowspan > 1) {\r\n                    for (let i = 0; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellIndex += colspan;\r\n                });\r\n              });\r\n            } else {\r\n              const elementText = element.innerText.trim();\r\n              if (elementText) {\r\n                elementText.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        if (word.EditorValue === '' || word.IsApplied) {\r\n          selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n        } else {\r\n          let content = removeQuotes(word.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\nfunction showAddTagError(message) {\r\n  const errorDiv = document.getElementById('submition-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction transformDocumentName(value: string): string {\r\n  if (!value || value.trim() === '') {\r\n    return value; // Return the input value unchanged\r\n  }\r\n\r\n  const parts = value.split('_');\r\n  if (parts.length <= 1) {\r\n    return value; // Return the input value unchanged if no underscores are present\r\n  }\r\n\r\n  return parts.slice(1).join('_').replace(/%20/g, ' ').replace(/%25/g, '%');\r\n}\r\n\r\n\r\n\r\nexport function createMultiSelectDropdown(tag) {\r\n  const isDark = theme === 'Dark';\r\n  const btnClass = isDark ? 'btn-dark text-light border-0' : 'btn-light text-dark border';\r\n  const dropdownMenuClass = isDark ? 'bg-dark text-light border-light' : 'bg-white text-dark border';\r\n  const itemClass = isDark ? 'bg-dark text-light' : 'bg-white text-dark';\r\n  const cancelBtnClass = isDark ? 'btn-danger bg-danger-clr text-light' : 'btn-danger bg-danger-clr text-white';\r\n  const saveBtnClass = isDark ? 'btn-success bg-success-clr text-light' : 'btn-success bg-success-clr text-white';\r\n\r\n  const multiSelectHTML = `\r\n  <div class='p-3 w-100'>\r\n    <div class=\"mb-3\">\r\n      <label for=\"source-select\" class=\"form-label\"><span class=\"text-danger\">*</span> Select Sources</label>\r\n      <div class=\"dropdown w-100\">\r\n        <button \r\n          class=\"btn ${btnClass} w-100 text-start d-flex justify-content-between align-items-start dropdown-toggle dropdown-toggle-sources\" \r\n          type=\"button\" \r\n          id=\"sourceDropdown\" \r\n          data-bs-toggle=\"dropdown\" \r\n          aria-expanded=\"false\">\r\n          <span id=\"sourceDropdownLabel\" class='sourceDropdownLabel'></span>\r\n          <span class=\"dropdown-toggle-icon dropdown-toggle-icon-s\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu ${dropdownMenuClass} w-100 p-2\" aria-labelledby=\"sourceDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 10000;\">\r\n          <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"selectAll\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n              <label class=\"form-check-label w-100\" for=\"selectAll\">Select All</label>\r\n            </div>\r\n          </li>\r\n          ${sourceList\r\n            .map(\r\n              (source, index) => `\r\n              <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"source-${index}\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input source-checkbox\" type=\"checkbox\" value=\"${source.SourceName}\" id=\"source-${index}\">\r\n                  <label class=\"form-check-label w-100 text-prewrap\" for=\"source-${index}\">${source.SourceName}</label>\r\n                </div>\r\n              </li>\r\n            `\r\n            )\r\n            .join('')}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-src-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n      <button id=\"ok-src-btn\" class=\"btn btn-primary\">Save</button>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  const accordionBody = document.getElementById(`chatFooter`);\r\n  accordionBody.innerHTML = multiSelectHTML;\r\n\r\n  let selectedSources = [];\r\n\r\n  const selectAllCheckbox = document.getElementById(`selectAll`);\r\n  const individualCheckboxes = document.querySelectorAll(`.source-checkbox`);\r\n  const sourceDropdownLabel = document.getElementById(`sourceDropdownLabel`);\r\n\r\n  function updateLabel() {\r\n    const selectedSourceNames = selectedSources;\r\n    if (selectedSourceNames.length > 0) {\r\n      sourceDropdownLabel.innerText = selectedSourceNames.join(', ');\r\n    } else {\r\n      sourceDropdownLabel.innerText = ' ';\r\n    }\r\n  }\r\n\r\n  selectAllCheckbox.addEventListener(\"change\", function () {\r\n    const checkboxes = document.querySelectorAll(`.source-checkbox`);\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.checked = this.checked;\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n    });\r\n\r\n    updateLabel();\r\n  });\r\n\r\n  const selectAllItem = document.querySelector(`.dropdown-item[data-checkbox-id=\"selectAll\"]`);\r\n  selectAllItem.addEventListener(\"click\", function (event) {\r\n    event.stopPropagation();\r\n  });\r\n\r\n  individualCheckboxes.forEach((checkbox) => {\r\n    checkbox.addEventListener(\"change\", function () {\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n\r\n      const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n      selectAllCheckbox.checked = allChecked;\r\n\r\n      updateLabel();\r\n    });\r\n\r\n    const listItem = checkbox.closest(\"li\");\r\n    listItem.addEventListener(\"click\", function (event) {\r\n      event.stopPropagation();\r\n    });\r\n  });\r\n\r\n  if (tag.Sources && tag.Sources.length > 0) {\r\n    individualCheckboxes.forEach((checkbox) => {\r\n      if (tag.Sources.includes(checkbox.value)) {\r\n        checkbox.checked = true;\r\n        selectedSources.push(checkbox.value);\r\n      }\r\n    });\r\n\r\n    const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n    selectAllCheckbox.checked = allChecked;\r\n    updateLabel();\r\n  }\r\n\r\n  document.getElementById(`ok-src-btn`).addEventListener(\"click\", function () {\r\n    tag.Sources = [...selectedSources];\r\n    tag.SourceValue = sourceList\r\n      .filter(source => selectedSources.includes(source.SourceName))\r\n      .map(source => source.SourceValue);\r\n\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n\r\n  document.getElementById(`cancel-src-btn`).addEventListener(\"click\", function () {\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nfunction appendAccordionBody(i, tag, radioButtonsHTML, textareaValue, scrollPosition) {\r\n\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n\r\n\r\n  const accordionBody = document.getElementById(`box-bottom-${i}`);\r\n  // Clear existing content and insert the dropdown\r\n  accordionBody.innerHTML =\r\n    `\r\n           <textarea class=\"form-control\"\r\n                      rows=\"5\"\r\n                      id=\"chatbox-${i}\"\r\n                      placeholder=\"Type here\">${textareaValue}</textarea>\r\n              <div id=\"mention-dropdown-${i}\" class=\"dropdown-menu\"></div>\r\n              <div class=\"d-flex flex-column align-self-end me-3\">\r\n                <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insert-tag-${i}\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\" ></i>\r\n                </button>\r\n\r\n                <button\r\n                    class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\"\r\n                    id=\"changeSource-${i}\">\r\n                    ${tooltipButton}\r\n                 <i class=\"fa fa-file-lines text-white\"></i>\r\n                </button>\r\n                <button type=\"submit\"\r\n                    class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\"\r\n                    id=\"sendPrompt-${i}\">\r\n                    <span class=\"tooltiptext\">Send</span>\r\n                  <i class=\"fa fa-paper-plane text-white\"></i>\r\n               </button>\r\n             </div>`;\r\n\r\n  const cardContainer = document.getElementById('card-container');\r\n\r\n  cardContainer.scrollTop = scrollPosition;\r\n  mentionDropdownFn(`chatbox-${i}`, `mention-dropdown-${i}`, 'edit');\r\n\r\n  document.getElementById(`sendPrompt-${i}`)?.addEventListener('click', () => {\r\n    const textareaValue = (document.getElementById(`chatbox-${i}`) as HTMLTextAreaElement).value;\r\n\r\n    sendPrompt(tag, textareaValue,)\r\n  });\r\n\r\n\r\n  document.getElementById(`insert-tag-${i}`)?.addEventListener('click', () => {\r\n    insertTagPrompt(i)\r\n  })\r\n\r\n  document.getElementById(`changeSource`)?.addEventListener('click', () => {\r\n    const textareaValue = (document.getElementById(`chatbox-${i}`) as HTMLTextAreaElement).value;\r\n    // const accordionbody=document.getElementById(`accordion-body-${i}`).innerHTML=''\r\n    createMultiSelectDropdown(tag)\r\n  })\r\n}\r\n\r\nasync function loadPromptTemplates() {\r\n  try {\r\n    const data = await getAllPromptTemplates(jwt);\r\n    if (data.Status && data.Data) {\r\n      promptBuilderList = data.Data;\r\n    }\r\n    // Do something with the data\r\n  } catch (error) {\r\n    console.error('Error fetching prompt templates:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function logBookmarksInSelection() {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n\r\n    // Get bookmarks in the selection\r\n    let bookmarks = range.getBookmarks(); // Returns ClientResult<string[]>\r\n\r\n    await context.sync(); // Ensure bookmarks are retrieved\r\n    if (bookmarks.value.length > 0) {\r\n      selectedNames = []\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n      }\r\n      bookmarks.value.forEach((bookmarkName) => {\r\n        let processedName = bookmarkName.split(\"_Split_\")[0];\r\n        processedName = processedName.replace(/_/g, \" \");\r\n        selectedNames.push(processedName)\r\n        const container = document.getElementById('tags-in-selected-text');\r\n        if (container) {\r\n          renderSelectedTags(selectedNames, availableKeys)// Trigger function when selection changes\r\n        }\r\n      });\r\n    } else {\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-block');\r\n        badgeWrapper.classList.add('d-none');\r\n      }\r\n\r\n    }\r\n  });\r\n}"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","baseUrl","insertLineWithHeadingStyle","range","line","style","text","startsWith","substring","trim","insertParagraph","Word","InsertLocation","before","removeQuotes","value","copyText","tempTextArea","createElement","body","appendChild","select","execCommand","removeChild","switchToAddTag","querySelector","classList","remove","getElementById","add","updateEditorFinalTable","data","regex","match","tables","exec","parsedContent","JSON","parse","push","jsonToHtmlTable","error","console","tableIndex","jsonData","Array","isArray","headers","Set","rows","flattenObject","prefix","result","keys","forEach","newKey","map","item","entries","k","v","join","flattenedItem","table","header","row","chatfooter","tag","theme","Sources","renderSelectedTags","selectedNames","availableKeys","badgeWrapper","innerHTML","name","toLowerCase","lowerName","find","badge","className","cursor","addEventListener","aiTag","mention","AIFlag","DisplayName","appBody","generateCheckboxHistory","then","html","applyThemeClasses","isDark","isLight","safeApplyClass","selector","darkClasses","lightClasses","elements","querySelectorAll","darkClassList","split","lightClassList","elem","swicthThemeIcon","icon","loadHomepage","searchBoxClass","searchBox","suggestionList","updateSuggestions","searchTerm","replaceChildren","filteredMentions","filter","includes","nonAITags","aiTags","createSection","labelText","mentions","isAISection","themeClasses","itemClass","labelClass","label","textContent","listItem","onclick","catch","async","word","type","run","selection","context","getSelection","sync","doc","DOMParser","parseFromString","EditorValue","bodyNodes","from","childNodes","bookmarkName","Date","getTime","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","element","tagName","maxCols","Math","max","reduce","sum","cell","parseInt","getAttribute","paragraph","insertTable","after","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","innerText","colspan","rowspan","getCell","elementText","markers","paragraphs","load","start","items","end","getRange","expandTo","insertBookmark","log","insertText","IsApplied","replaceMention","ComponentKeyDataType","debounceTimeout","clearTimeout","setTimeout","isPendingResponse","addGenAITags","applyAITagFn","FilteredReportHeadAIHistoryList","fetchAIHistory","history","closeBtnClass","closeBar","chatBody","chatList","promptclass","chat","index","Prompt","Selected","Response","generateChatHistoryHtml","chatFooterHtml","initializeAIHistoryEvents","jwt","checkbox","isChecked","event","target","checked","_","otherIndex","otherCheckbox","responseContainer","payload","response","fetch","method","stringify","ok","json","updateAiHistory","ReportHeadAIHistoryList","historyList","unshift","finalResponse","FormattedResponse","UserValue","currentlySelected","some","err","insertTagPrompt","textareaValue","sendPrompt","createMultiSelectDropdown","mentionDropdownFn","navTabs","sourceList","filteredGlossaryTerm","storedUrl","documentID","organizationName","aiTagList","initialised","promptBuilderList","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","capturedFormatting","emptyFormat","isNoFormatTextAvailable","clientId","userId","clientList","currentYear","getFullYear","login","sessionToken","sessionStorage","getItem","loadLoginPage","toggle","handleLogin","preventDefault","organization","username","password","toLocaleLowerCase","ClientName","Username","Password","loginUser","Status","ResponseStatus","Data","Token","setItem","ID","showLoginError","message","errorDiv","display","fetchDocument","action","getReportById","logoheader","SourceTypeList","SourceValue","SourceName","transformDocumentName","ClientID","aiGroup","Group","Name","GroupKey","GroupKeyAll","InitialTable","getAllClients","warn","fetchClients","getAllPromptTemplates","loadPromptTemplates","removeMatchingContentControls","loadGlossary","fetchGlossary","formatOptionsDisplay","htmlBody","displayCapturedFormatting","removeFormattedText","removeOptionsConfirmation","clear","logout","glossaryBtn","contains","clearCapturedFormatting","Bold","Underline","Size","removeFormatBtn","captureFormatting","emptyFormatCheckbox","disabled","formatList","font","bold","Italic","italic","underline","size","highlightColor","color","textRanges","tagId","getAiHistory","prompt","iconelement","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","ThreadID","AssistantID","Container","PromptType","VectorID","addAiHistory","searchResults","search","matchCase","matchWholeWord","tableInsertPositions","delete","applyglossary","bodyText","fetchGlossaryTemplate","GlossaryTemplate","sort","ClinicalTerm","processedTerms","filteredTerms","term","biggerTerm","foundRanges","Map","searchPromises","contentControls","has","set","control","contentControl","insertContentControl","title","appearance","ContentControlAppearance","boundingBox","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","loader","selectedWords","words","displayElement","groupedTerms","LayTerm","clinicalTerm","mainBox","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","selectedClient","sponsorOptions","client","isSelectedClient","selected","addtagbody","container","preview","templateText","fieldsList","templateSelect","applyBtn","resetBtn","previewDiv","fieldsContainer","previewContainer","templateError","replaceKeywordsManually","keywordMap","field","id","Label","keyword","HTMLInputElement","HTMLSelectElement","insertValue","RegExp","option","toString","templateId","getPromptTemplateById","Template","div","Type","input","PromptTemplateOptionList","opt","Text","Option","selectedIndex","promptTextarea","setupPromptBuilderUI","form","promptField","nameField","descriptionField","saveGloballyCheckbox","availableForAllCheckbox","sponsorDropdownButton","sponsorDropdownItems","updateDropdownLabel","selectedOptions","cb","parentElement","valid","selectedSponsors","isAvailableForAll","isSaveGlobally","aigroup","formData","Description","GroupKeyClient","AllClient","SaveGlobally","UserDefined","ComponentKeyDataTypeID","ComponentKeyDataAccessID","DocumentTypeID","SourceTypeID","ReportHeadGroupID","ReportHeadSourceID","cancelBtnGenAi","addGroupKey","showAddTagError","createTextGenTag","checkAndDisableSponsors","enableSponsors","stopPropagation","textareaId","DropdownId","highlightedIndex","mentionDropdown","updateHighlightedItem","totalItems","highlightedItem","scrollIntoView","behavior","block","cursorPosition","selectionStart","textBeforeCursor","slice","lastHashtag","lastIndexOf","query","filterMentions","editorValue","textareaRect","getBoundingClientRect","left","bottom","selectedItem","selectMention","matches","textarea","currentValue","textBefore","textAfter","lastHashPosition","updatedTextBefore","newCursorPosition","setSelectionRange","parts","multiSelectHTML","source","accordionBody","selectedSources","selectAllCheckbox","individualCheckboxes","sourceDropdownLabel","updateLabel","selectedSourceNames","allChecked","every","closest","Number","onReady","info","host","HostType","properties","customProperties","property","orgName","retrieveDocumentProperties","bookmarks","getBookmarks","processedName","logBookmarksInSelection","URL"],"sourceRoot":""}