{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/taskpane.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">LINK UI Glossary</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div id=\\\"button-container\\\"> <button class=\\\"btn btn-secondary me-2 mark-glossary btn-sm\\\" id=\\\"run\\\">Apply Glossary</button> <button class=\\\"btn btn-secondary me-2 clear-glossary btn-sm\\\" id=\\\"Clear\\\">Clear Glossary</button> <div class=\\\"loader\\\" id=\\\"loader\\\"></div> </div> <div id=\\\"highlighted-text\\\"></div> </main> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n// const layTerms=data.map(entry => ({\r\n//   LayTerm: entry.LayTerm, // or entry.ClinicalTerm based on what you want to search\r\n//   ClinicalTerm: entry.ClinicalTerm // Store the original term for reference\r\n// }));\r\n\r\nlet layTerms\r\nlet isGlossaryMarked = false;\r\nconst jwt='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYWtoaWxybyIsIk5hbWVJZGVudGlmaWVyIjoiMTQwOCIsIlVzZXJJRCI6IjE0MDgiLCJVc2VyTmFtZSI6ImFraGlscm8iLCJFbWFpbCI6ImFraGlsLmFAcGFjZXdpc2RvbS5jb20iLCJDbGllbnRJRCI6IjEwMDU5IiwiVEFBdXRoX0RCTmFtZSI6IlRBX0F1dGhfUGFjZURldiIsIkVycm9yTXNnIjoiXCJcIiIsIklzVmFsaWQiOiJUcnVlIiwiQXBwbGljYXRpb25Db2RlIjoiTElOSyIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlVzZXIiLCJBbm9ueW1pemF0aW9uX0RCTmFtZSI6IiIsIkJFQUNPTl9EQk5hbWUiOiIiLCJMSU5LX0RCTmFtZSI6IkxpbmtfTU1TIiwiUmVnaXN0cnlfREJOYW1lIjoiIiwiZXhwIjoxNzIyOTQyNDQ4LCJpc3MiOiJodHRwOi8vVHJpYWxBc3N1cmUuY29tIiwiYXVkIjoiaHR0cDovL1RyaWFsQXNzdXJlLmNvbSJ9.k-s_qBxCj-ArIIicYm_FRWv-332_0loUKLGuoPfmosw'\r\n\r\n/* global document, Office, Word */\r\n\r\nOffice.onReady(async(info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"run\").onclick = run;\r\n    // document.getElementById(\"glossarycheck\").onclick = checkGlossary;\r\n    document.getElementById(\"Clear\").onclick = clearGlossary;\r\n    \r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      handleSelectionChange\r\n    );\r\n\r\n    await fetchGlossaryData();\r\n    await clearGlossary();\r\n  }\r\n});\r\n\r\n\r\nfunction disableButtons() {\r\n  document.getElementById(\"run\")?.setAttribute(\"disabled\", \"true\");\r\n  // document.getElementById(\"glossarycheck\")?.setAttribute(\"disabled\", \"true\");\r\n  document.getElementById(\"Clear\")?.setAttribute(\"disabled\", \"true\");\r\n}\r\n// Function to enable buttons\r\nfunction enableButtons() {\r\n  document.getElementById(\"run\")?.removeAttribute(\"disabled\");\r\n  // document.getElementById(\"glossarycheck\")?.removeAttribute(\"disabled\");\r\n  document.getElementById(\"Clear\")?.removeAttribute(\"disabled\");\r\n\r\n}\r\n\r\n\r\nexport async function run() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById(\"run\")?.setAttribute(\"disabled\", \"true\");\r\n      document.getElementById('loader').style.display='block';\r\n\r\n      const body = context.document.body;\r\n\r\n      const searchPromises = layTerms.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: true, matchWholeWord: true });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n      await context.sync();\r\n\r\n\r\n\r\n      searchPromises.forEach(searchResults => {\r\n        searchResults.items.forEach(item => {\r\n          item.font.highlightColor = \"yellow\";\r\n        });\r\n      });\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      document.getElementById(\"run\")?.removeAttribute(\"disabled\");\r\n\r\n      document.getElementById('Clear').style.display='block';\r\n      document.getElementById('run').style.display='none';\r\n      document.getElementById('loader').style.display='none';\r\n\r\n      isGlossaryMarked = true; // Set the flag when glossary is marked\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\nasync function clearGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const body = context.document.body;\r\n\r\n      const searchPromises = layTerms.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: true });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      searchPromises.forEach(searchResults => {\r\n        searchResults.items.forEach(item => {\r\n          item.font.highlightColor = 'white'; // Reset highlight color\r\n        });\r\n      });\r\n      document.getElementById('Clear').style.display='none';\r\n      document.getElementById('run').style.display='block';\r\n      await context.sync();\r\n      \r\n      \r\n      isGlossaryMarked = false;  // Clear the flag when glossary is cleared\r\n      clearHighlightedText(); // Clear the highlighted text boxes\r\n    });\r\n\r\n    console.log('Glossary cleared successfully');\r\n  } catch (error) {\r\n    console.error('Error clearing glossary:', error);\r\n  }\r\n}\r\n\r\nfunction clearHighlightedText() {\r\n  const displayElement = document.getElementById('highlighted-text');\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear the content of highlighted text\r\n  }\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: true });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        searchPromises.forEach(searchResults => {\r\n          searchResults.items.forEach(item => {\r\n            selectedWords.push(item.text);\r\n          });\r\n        });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm === word) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = clinicalTerm;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n  }\r\n}\r\n\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n\r\n      // Load the selection's text\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      // Check if the selected text contains the clinicalTerm\r\n      if (selection.text.includes(clinicalTerm)) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: true });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        searchResults.items.forEach(item => {\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Remove the highlight color (set to white or no highlight)\r\n          item.font.highlightColor = 'white';\r\n        });\r\n\r\n        await context.sync();\r\n\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and removed highlight in the document.`);\r\n      } else {\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function fetchGlossaryData() {\r\n  document.getElementById('run').style.display='none';\r\n  document.getElementById('Clear').style.display='none';\r\n\r\n  disableButtons(); // Disable buttons before making the API call\r\n\r\n  try {\r\n    const response = await fetch('https://plsdevapp.azurewebsites.net/api/glossary-template/id/3', {\r\n      method: 'GET', // or 'POST', depending on your API\r\n      headers: {\r\n        'Authorization': `Bearer ${jwt}`\r\n\r\n      }\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    document.getElementById('loader').style.display='none';\r\n    document.getElementById('run').style.display='block';\r\n    layTerms = data.Data.GlossaryTemplateData;\r\n   \r\n      // alert('Glossary data loaded successfully.');\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n    // Optionally show an error message to the user\r\n    // alert('Error fetching glossary data.');\r\n  } finally {\r\n    enableButtons(); // Re-enable buttons after the API call completes\r\n  }\r\n\r\n}\r\n\r\nasync function handleSelectionChange() {\r\n  if (isGlossaryMarked) {\r\n    await checkGlossary();\r\n  }\r\n}\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","layTerms","isGlossaryMarked","async","run","Word","getElementById","setAttribute","style","display","body","context","searchPromises","map","term","searchResults","search","ClinicalTerm","matchCase","matchWholeWord","load","sync","forEach","items","item","font","highlightColor","removeAttribute","console","log","error","clearGlossary","displayElement","innerHTML","clearHighlightedText","handleSelectionChange","selection","getSelection","text","selectedWords","push","words","groupedTerms","word","includes","LayTerm","keys","clinicalTerm","mainBox","createElement","className","heading","textContent","appendChild","layTerm","subBox","addEventListener","insertText","replaceClinicalTerm","remove","displayHighlightedText","checkGlossary","Office","onReady","info","host","HostType","onclick","addHandlerAsync","EventType","DocumentSelectionChanged","response","fetch","method","headers","ok","data","json","Data","GlossaryTemplateData","fetchGlossaryData","URL"],"sourceRoot":""}