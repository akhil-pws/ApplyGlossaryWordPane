{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/index.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/data.ts","webpack://office-addin-taskpane/./src/taskpane/api.ts","webpack://office-addin-taskpane/./src/taskpane/components/bodyelements.ts","webpack://office-addin-taskpane/./src/taskpane/functions.ts","webpack://office-addin-taskpane/./src/taskpane/components/home.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./css/bootstrap3.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Link addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> <\" + \"script src=\\\"https://kit.fontawesome.com/5aabee8816.js\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div id=\\\"header-nav\\\"> <div class=\\\"logo-header d-flex w-100 justify-content-between align-items-center bg-light\\\" id=\\\"logo-header\\\"> </div> </div> <main id=\\\"app-body\\\" class=\\\"d-block mh-34\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> <section id=\\\"confirmation-popup\\\"></section> <section id=\\\"toastr\\\"></section> <div id=\\\"footer\\\" class=\\\"py-2 text-center footer\\\"> </div> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const dataUrl='https://plsdevapp.azurewebsites.net'\r\nconst storeUrl='https://akhil-pws.github.io/ApplyGlossaryWordPane'\r\nconst versionLink='2.0.3'\r\nexport {dataUrl,storeUrl,versionLink};","import { dataUrl } from \"./data\";\r\n\r\n// api.ts\r\nconst baseUrl = dataUrl // Set your actual base URL\r\n\r\nexport async function loginUser(organization: string, username: string, password: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/user/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      ClientName: organization,\r\n      Username: username,\r\n      Password: password\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n// api.ts\r\n\r\nexport async function getReportById(documentID: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/id/${documentID}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAllClients(userId: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/client/all/${userId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAiHistory(tagId: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/${tagId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function updateGroupKey(tag: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/head/groupkey`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(tag)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function addAiHistory(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/add`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function updateAiHistory(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/update`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function fetchGlossaryTemplate(clientId: string, bodyText: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/glossary-template/client-id/${clientId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(bodyText)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function addGroupKey(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/group-key/add`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAllPromptTemplates(jwt): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/prompt-template/all`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getPromptTemplateById(id: string, jwt): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/prompt-template/${id}/data`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function updatePromptTemplate(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/groupkey/update-prompt`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n","import { theme } from \"../taskpane\";\r\n\r\nfunction addtagbody(sponsorOptions) {\r\n  const body = `<div class=\"modal-dialog\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-body p-3 pt-0\">\r\n      <form id=\"genai-form\" autocomplete=\"off\" novalidate>\r\n        <!-- Name Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"name\" class=\"form-label\"><span class=\"text-danger\">*</span> Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" required>\r\n          <div class=\"invalid-feedback\">Name is required.</div>\r\n          <div id=\"submition-error\" class=\"invalid-feedback\" style=\"display: none;\"></div>\r\n\r\n        </div>\r\n\r\n        <!-- Description Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" rows=\"6\"></textarea>\r\n        </div>\r\n\r\n        <!-- Prompt Field -->\r\n        <div class=\"mb-3 prompt-box\">\r\n          <label for=\"prompt\" class=\"form-label\"><span class=\"text-danger\">*</span> Prompt \r\n            <small class=\"text-secondary\">(Note: Use # tag for content suggestions)</small>\r\n          </label>\r\n          <textarea class=\"form-control\" id=\"prompt\" rows=\"6\"  required></textarea>\r\n          <div class=\"invalid-feedback\">Prompt is required.</div>\r\n          <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n        </div>\r\n\r\n        <!-- Save Globally Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"saveGlobally\">\r\n          <label class=\"form-check-label\" for=\"saveGlobally\">Save Globally</label>\r\n        </div>\r\n\r\n        <!-- Available to All Sponsors Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"isAvailableForAll\" disabled>\r\n          <label class=\"form-check-label\" for=\"isAvailableForAll\">Available to All Sponsors</label>\r\n        </div>\r\n\r\n        <!-- Sponsor Dropdown -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"sponsor\" class=\"form-label\"><span class=\"text-danger\">*</span> Sponsor</label>\r\n          <div class=\"dropdown w-100\">\r\n            <button \r\n              class=\"btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle\" \r\n              type=\"button\" \r\n              id=\"sponsorDropdown\" \r\n              data-bs-toggle=\"dropdown\" \r\n              aria-expanded=\"false\" \r\n              disabled>\r\n              <span id=\"sponsorDropdownLabel\">Select Sponsors</span>\r\n              <span class=\"dropdown-toggle-icon\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu w-100 p-2\" aria-labelledby=\"sponsorDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\r\n              <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n                  <label class=\"form-check-label\" for=\"selectAll\">Select All</label>\r\n                </div>\r\n              </li>\r\n              ${sponsorOptions}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-btn-gen-ai\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"text-gen-save\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n  return body\r\n}\r\n\r\n\r\nfunction Confirmationpopup(content: string) {\r\n  const isDark = theme === 'Dark';\r\n  const popupClass = isDark ? 'bg-dark text-light' : 'bg-light text-dark';\r\n\r\n  const body = `\r\n<div class=\"modal show d-block\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content ${popupClass}\">\r\n      <div class=\"modal-header border-0\">\r\n        <h5 class=\"fw-bold\">Confirmation</h5>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <p>${content}</p>\r\n      </div>\r\n\r\n      <div class=\"modal-footer border-0\">\r\n        <button type=\"button\" class=\"btn btn-link ${isDark ? 'text-info' : 'text-primary'}\" id=\"confirmation-popup-cancel\">Cancel</button>\r\n        <button type=\"button\" class=\"btn btn-primary text-white\" id=\"confirmation-popup-confirm\">Ok</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n  return body;\r\n}\r\n\r\nfunction DataModalPopup(selectedData) {\r\n  const isDark = theme === 'Dark';\r\n  const popupClass = isDark ? 'bg-dark text-light' : 'bg-light text-dark';\r\n\r\n  return `\r\n<div class=\"modal show d-block\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content ${popupClass}\">\r\n      <div class=\"modal-header flex-column align-items-start border-0\">\r\n        <span class=\"fw-bold mb-3\">${selectedData?.Name || ''}</span>\r\n        <span class=\"d-block list-height\">${selectedData?.UserValue || ''}</span>\r\n        ${selectedData?.Sources ? `\r\n        <hr class=\"${isDark ? 'border-light' : 'border-dark'}\">\r\n        <div class=\"d-flex align-items-start flex-wrap\">\r\n          <span class=\"fw-bold me-2\">Selected Sources :</span>\r\n          <div class=\"d-flex flex-wrap gap-1\">\r\n            ${selectedData.Sources.map(source => `\r\n              <span class=\"badge ${isDark ? 'text-bg-secondary' : 'text-bg-info'}\">${source.FileName}</span>\r\n            `).join('')}\r\n          </div>\r\n        </div>` : ''}\r\n      </div>\r\n\r\n      <div class=\"modal-body p-3 add-ai-gen\">\r\n        <div class=\"row g-2 list-height\">\r\n          ${selectedData?.Data?.map(item => `\r\n            <div class=\"col-md-12 mt-3\">\r\n              <div class=\"border rounded p-2 ${isDark ? 'bg-secondary text-light' : 'bg-light text-dark'} shadow-sm h-100\">\r\n                <div class=\"fw-bold small text-truncate\" title=\"${item.FileName}\">\r\n                  ${item.FileName}\r\n                </div>\r\n                <div class=\"text-muted small mb-1\">Page: ${item.PageNumber}</div>\r\n                <div class=\"small\" style=\"white-space: normal;\">\r\n                  ${item.Sentence}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n\r\n        <div class=\"d-flex w-100 justify-content-end mt-3 align-items-center\">\r\n          <button type=\"button\" class=\"btn btn-primary text-white\" id=\"datamodel-popup-ok\">OK</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n}\r\n\r\n\r\n\r\nfunction toaster(message: string, type: string) {\r\n  const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';\r\n  // const color = type === 'success' ? '#28a745' : '#dc3545';\r\n  const color = `#ffffff`\r\n  const body = `<div class=\"toast show\" style=\"position: fixed; top: 10px; right: 10px; z-index: 1050; max-width: fit-content; background-color: #808080; color: #ffffff;\">\r\n    <div class=\"toast-body\">\r\n         <i class=\"fa ${icon} me-2\" style=\"color: ${color};\"></i> ${message}\r\n    </div>\r\n  </div>`;\r\n\r\n  document.getElementById('toastr').innerHTML = body;\r\n  setTimeout(() => {\r\n    document.getElementById('toastr').innerHTML = ``;\r\n  }, 4000);\r\n}\r\n\r\nfunction logoheader(storedUrl) {\r\n  const themeicon = theme === 'Dark' ? 'fa-sun' : 'fa-moon'\r\n  const body = `\r\n    <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n    <div class=\"icon-nav me-3\">\r\n      <i class=\"fa fa-home c-pointer me-3\" title=\"Home\" id=\"home\"></i>\r\n      <div class=\"dropdown d-inline\">\r\n        <i class=\"fa fa-tools c-pointer me-3\" id=\"settingsDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" title=\"Settings\"></i>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"settingsDropdown\">\r\n          <li>\r\n            <a class=\"dropdown-item\" href=\"#\" id=\"define-formatting\">\r\n              <i class=\"fa fa-sliders-h me-2\" aria-hidden=\"true\"></i> Define Formatting\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"glossary\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-book me-2\" aria-hidden=\"true\"></i> Apply Glossary\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"removeFormatting\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-eraser me-2\" aria-hidden=\"true\"></i> Remove Formatting\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Theme Toggle Icon -->\r\n      <span id=\"theme-toggle\"><i class=\"fa ${themeicon} c-pointer me-3\" title=\"Toggle Theme\"></i></span>\r\n\r\n      <i class=\"fa fa-sign-out c-pointer me-3\" id=\"logout\" title=\"Logout\"></i>\r\n    </div>    \r\n  `\r\n  return body;\r\n}\r\n\r\nconst navTabs = `<ul class=\"nav nav-tabs\" id=\"tabList\" role=\"tablist\">\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link active\" id=\"tag-tab\" data-bs-toggle=\"tab\" href=\"#tag\" role=\"tab\">Tag</a>\r\n  </li>\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link\" id=\"prompt-tab\" data-bs-toggle=\"tab\" href=\"#prompt\" role=\"tab\">Prompt builder</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content p-3 border border-top-0\">\r\n  <div class=\"tab-pane fade show active\" id=\"add-tag-body\" role=\"tabpanel\" aria-labelledby=\"tag-tab\">\r\n  </div>\r\n  <div class=\"tab-pane fade\" id=\"add-prompt-template\" role=\"tabpanel\" aria-labelledby=\"prompt-tab\">\r\n  </div>\r\n</div>\r\n`\r\n\r\n\r\n\r\nconst promptbuilderbody = `<div>hi</div>`\r\n\r\n\r\nexport { navTabs, addtagbody, promptbuilderbody, logoheader, Confirmationpopup, toaster, DataModalPopup };","import { toaster } from \"./components/bodyelements\";\r\nimport { generateCheckboxHistory } from \"./components/home\";\r\nimport { theme, UserRole } from \"./taskpane\";\r\n\r\nexport async function insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  await Word.run(async (context) => {\r\n    let style = \"Normal\";\r\n    let text = line;\r\n\r\n    if (line.startsWith('###### ')) {\r\n      style = \"Heading 6\";\r\n      text = line.substring(7).trim();\r\n    } else if (line.startsWith('##### ')) {\r\n      style = \"Heading 5\";\r\n      text = line.substring(6).trim();\r\n    } else if (line.startsWith('#### ')) {\r\n      style = \"Heading 4\";\r\n      text = line.substring(5).trim();\r\n    } else if (line.startsWith('### ')) {\r\n      style = \"Heading 3\";\r\n      text = line.substring(4).trim();\r\n    } else if (line.startsWith('## ')) {\r\n      style = \"Heading 2\";\r\n      text = line.substring(3).trim();\r\n    } else if (line.startsWith('# ')) {\r\n      style = \"Heading 1\";\r\n      text = line.substring(2).trim();\r\n    }\r\n\r\n    // Create an empty paragraph with the desired style\r\n    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n    paragraph.style = style;\r\n\r\n    // Combine all markdown patterns in a single regex\r\n    const regex = /(\\*\\*(.+?)\\*\\*)|(\\*(.+?)\\*)|(_(.+?)_)/g;\r\n    let lastIndex = 0;\r\n    let match;\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n      // Insert plain text before the match\r\n      if (match.index > lastIndex) {\r\n        paragraph.insertText(text.substring(lastIndex, match.index), Word.InsertLocation.end);\r\n      }\r\n\r\n      // Extract the actual content and formatting\r\n      let content = \"\";\r\n      let bold = false;\r\n      let italic = false;\r\n      let underline = false;\r\n\r\n      if (match[1]) { // **bold**\r\n        content = match[2];\r\n        bold = true;\r\n      } else if (match[3]) { // *italic*\r\n        content = match[4];\r\n        italic = true;\r\n      } else if (match[5]) { // _underline_\r\n        content = match[6];\r\n        underline = true;\r\n      }\r\n\r\n      const formattedRange = paragraph.insertText(content, Word.InsertLocation.end);\r\n      formattedRange.font.bold = bold;\r\n      formattedRange.font.italic = italic;\r\n      formattedRange.font.underline = underline ? Word.UnderlineType.single : Word.UnderlineType.none;\r\n\r\n      lastIndex = regex.lastIndex;\r\n    }\r\n\r\n    // Insert any remaining text after last formatting\r\n    if (lastIndex < text.length) {\r\n      paragraph.insertText(text.substring(lastIndex), Word.InsertLocation.end);\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\nexport function removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\n\r\nexport function copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n  toaster('Copied to clipboard successfully!', 'success')\r\n\r\n}\r\n\r\n\r\nexport function switchToPromptBuilder() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('prompt-tab').classList.add('active');\r\n  document.getElementById('add-prompt-template').classList.add('show', 'active');\r\n}\r\n\r\n\r\nexport function switchToAddTag() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('tag-tab').classList.add('active');\r\n  document.getElementById('add-tag-body').classList.add('show', 'active');\r\n}\r\n\r\nexport function updateEditorFinalTable(data) {\r\n  const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n  let match;\r\n  let tables = [];\r\n\r\n  while ((match = regex.exec(data)) !== null) {\r\n    try {\r\n      const parsedContent = JSON.parse(match[1]);\r\n      tables.push(jsonToHtmlTable(parsedContent));\r\n    } catch (error) {\r\n      console.error(\"Failed to parse JSON:\", error, match[1]);\r\n    }\r\n  }\r\n\r\n  let tableIndex = 0;\r\n  return data.replace(regex, () => tables[tableIndex++] || \"\");\r\n}\r\n\r\nfunction jsonToHtmlTable(jsonData) {\r\n  if (!jsonData || (Array.isArray(jsonData) && jsonData.length === 0)) {\r\n    return '<p>No data available</p>';\r\n  }\r\n\r\n  let headers = new Set();\r\n  let rows = [];\r\n\r\n  function flattenObject(obj, prefix = \"\", result = {}) {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key];\r\n      const newKey = prefix ? `${prefix} > ${key}` : key;\r\n\r\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n        flattenObject(value, newKey, result);\r\n      } else if (Array.isArray(value)) {\r\n        result[newKey] = value.map(item => {\r\n          return typeof item === 'object'\r\n            ? Object.entries(item).map(([k, v]) => `<strong>${k}:</strong> ${v}`).join('<br>')\r\n            : item;\r\n        }).join('<br>');\r\n      } else {\r\n        result[newKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  if (!Array.isArray(jsonData)) {\r\n    jsonData = Object.entries(jsonData).map(([key, value]) => ({ [key]: value }));\r\n  }\r\n\r\n  jsonData.forEach(item => {\r\n    let flattenedItem = flattenObject(item);\r\n    Object.keys(flattenedItem).forEach(key => headers.add(key));\r\n    rows.push(flattenedItem);\r\n  });\r\n\r\n  let table = '<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">';\r\n  table += '<tr>' + [...headers].map(header => `<th>${header}</th>`).join('') + '</tr>';\r\n  rows.forEach(row => {\r\n    table += '<tr>' + [...headers].map(header => `<td>${row[header]}</td>`).join('') + '</tr>';\r\n  });\r\n\r\n  table += '</table>';\r\n  return table;\r\n}\r\n\r\n\r\n\r\nexport function generateChatHistoryHtml(chatList: any[]): string {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const globalPromptUpdate = UserRole.UserRoleEntityAccessList.find(\r\n    (item: any) => item.UserRoleEntity === 'Global Prompt Update'\r\n  );\r\n\r\n  return chatList.map((chat, index) => {\r\n    const includeSaveIcon = globalPromptUpdate?.UserRoleAccessID === 3;\r\n\r\n    return `\r\n      <div class=\"row chat-entry m-0 p-0\">\r\n        <div class=\"col-md-12 mt-2 p-2\">\r\n          <div class=\"d-flex justify-content-between align-items-start\">\r\n            <!-- Prompt Box -->\r\n            <div class=\"form-control h-34 d-flex align-items-center dynamic-height prompt-text ${promptclass}\" style=\"width: 95%;\">\r\n              ${chat.Prompt}\r\n            </div>\r\n\r\n            <!-- Icons Stack -->\r\n            <div class=\"d-flex flex-column align-items-center ms-2\">\r\n              <i class=\"fa fa-copy text-secondary c-pointer mb-2\" title=\"Copy Prompt\" id=\"copyPrompt-${index}\"></i>\r\n              ${includeSaveIcon ? `<i class=\"fa fa-save text-secondary c-pointer\" title=\"Save Prompt\" id=\"savePrompt-${index}\"></i>` : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-12 mb-2 p-2 d-flex\">\r\n          <span class=\"d-flex align-items-baseline w-100\">\r\n            <div class=\"flex-grow-1 c-pointer ai-response-container px-2 pe-3 pt-3 ai-selected-response\" id=\"responseContainer-${index}\">\r\n              <input\r\n                class=\"form-check-input c-pointer me-2 response-checkbox\"\r\n                type=\"checkbox\"\r\n                id=\"checkbox-${index}\"\r\n                ${chat.Selected === 1 ? 'checked' : ''}>\r\n              <span id=\"responseText-${index}\">${chat.Response}</span>\r\n              <i class=\"fa fa-copy text-secondary c-pointer ms-2\"\r\n                title=\"Copy Response\"\r\n                id=\"copyResponse-${index}\"></i>\r\n\r\n              <i class=\"fa fa-folder-gear text-secondary c-pointer ms-2\"\r\n                title=\"Open Refferance\"\r\n                id=\"openRefferance-${index}\"></i>\r\n            </div>\r\n          </span>\r\n        </div>\r\n      </div>`;\r\n  }).join('');\r\n}\r\n\r\n\r\n\r\nexport function chatfooter(tag: any) {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n  return ` <textarea class=\"form-control ${promptclass}\"\r\n                      rows=\"5\"\r\n                      id=\"chatInput\"\r\n                      ></textarea>\r\n            <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n            <div class=\"d-flex flex-column align-self-end me-3\">\r\n              <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insertTagButton\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\"></i>\r\n              </button>\r\n              <button class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\" id=\"changeSourceButton\">\r\n              ${tooltipButton}\r\n                <i class=\"fa fa-file-lines text-white\"></i>\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\" id=\"sendPromptButton\">\r\n                <span class=\"tooltiptext\">Send</span>\r\n                <i class=\"fa fa-paper-plane text-white\"></i>\r\n              </button>\r\n            </div>`\r\n}\r\n\r\nexport function renderSelectedTags(selectedNames, availableKeys) {\r\n  const badgeWrapper = document.getElementById('tag-badge-wrapper');\r\n  badgeWrapper.innerHTML = '';\r\n  // Filter out duplicates (case-insensitive)\r\n  const uniqueNames = [...new Set(\r\n    selectedNames.map(name => name.toLowerCase())\r\n  )].map(lowerName =>\r\n    selectedNames.find(name => name.toLowerCase() === lowerName)\r\n  );\r\n\r\n\r\n  uniqueNames.forEach(name => {\r\n    let aiTag;\r\n\r\n    if (/^ID\\d+$/i.test(name)) {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && `id${mention.ID}`.toLowerCase() === name.toLowerCase()\r\n      );\r\n    } else {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && mention.DisplayName.toLowerCase() === name.toLowerCase()\r\n      );\r\n    }\r\n    const badge = document.createElement('span');\r\n    badge.className = 'badge rounded-pill border bg-white text-dark px-3 py-2 shadow-sm d-flex align-items-center badge-clickable';\r\n    badge.style.cursor = 'pointer';\r\n    badge.innerHTML = `${aiTag.DisplayName} <i class=\"fa-solid fa-microchip-ai ms-2 text-muted\" aria-label=\"AI Suggested\"></i>`;\r\n\r\n    badge.addEventListener('click', async () => {\r\n      await selectMatchingBookmarkFromSelection(name);\r\n\r\n      if (aiTag) {\r\n        const appBody = document.getElementById('app-body');\r\n        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n\r\n        generateCheckboxHistory(aiTag).then(html => {\r\n          appBody.innerHTML = html;\r\n        });\r\n      }\r\n    });\r\n\r\n\r\n    badgeWrapper.appendChild(badge);\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function applyThemeClasses(theme) {\r\n  const isDark = theme === 'Dark';\r\n  const isLight = theme === 'Light';\r\n\r\n  const safeApplyClass = (selector, darkClasses, lightClasses) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    const darkClassList = darkClasses.split(' ');\r\n    const lightClassList = lightClasses.split(' ');\r\n\r\n    elements.forEach(elem => {\r\n      if (!elem) return;\r\n      // Remove all related theme classes\r\n      elem.classList.remove(...darkClassList);\r\n      elem.classList.remove(...lightClassList);\r\n      // Add only the relevant set\r\n      if (isDark) elem.classList.add(...darkClassList);\r\n      if (isLight) elem.classList.add(...lightClassList);\r\n    });\r\n  };\r\n\r\n  // Now use it for different elements\r\n  safeApplyClass('#app-body', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('#search-box', 'bg-secondary text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-menu', 'bg-dark text-light border-light', 'bg-white text-dark border');\r\n  safeApplyClass('.list-group-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('.dropdown-toggle', 'bg-dark text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  // container for the suggestion list\r\n  safeApplyClass(\r\n    '.list-group-item-action',\r\n    'bg-dark text-light list-hover-dark',\r\n    'bg-light text-dark list-hover-light'\r\n  );\r\n\r\n  safeApplyClass('#close-ai-window', 'fa-solid fa-circle-xmark bg-dark text-light', 'fa-solid fa-circle-xmark bg-light text-dark');\r\n  safeApplyClass('#chatInput', 'bg-secondary text-light', 'bg-white text-dark');\r\n  safeApplyClass('.prompt-text', 'bg-secondary text-light', 'bg-white text-dark');\r\n\r\n\r\n}\r\n\r\nexport function swicthThemeIcon() {\r\n  const themeToggle = document.getElementById('theme-toggle');\r\n  const icon = themeToggle.querySelector('i');\r\n\r\n  if (theme === 'Dark') {\r\n    icon.classList.remove('fa-moon');\r\n    icon.classList.add('fa-sun');\r\n    sessionStorage.setItem('theme', 'Dark');\r\n  } else if (theme === 'Light') {\r\n    icon.classList.remove('fa-sun');\r\n    icon.classList.add('fa-moon');\r\n    sessionStorage.setItem('theme', 'Light');\r\n  }\r\n}\r\n\r\nasync function selectMatchingBookmarkFromSelection(displayName) {\r\n  return Word.run(async (context) => {\r\n    const selection = context.document.getSelection();\r\n    const bookmarks = selection.getBookmarks(); // ClientResult<string[]>\r\n    await context.sync();\r\n\r\n    const targetBookmarkName = bookmarks.value.find(bookmark => {\r\n      const cleanName = bookmark.split('_Split_')[0].replace(/_/g, ' ');\r\n      return cleanName.toLowerCase() === displayName.toLowerCase();\r\n    });\r\n\r\n    if (targetBookmarkName) {\r\n      const range = context.document.getBookmarkRangeOrNullObject(targetBookmarkName);\r\n      range.load('isNullObject');\r\n      await context.sync();\r\n\r\n      if (!range.isNullObject) {\r\n        range.select(); // Select the entire bookmark\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n","import { getPromptTemplateById, updateGroupKey, updateAiHistory, updatePromptTemplate } from \"../api\";\r\nimport { chatfooter, copyText, generateChatHistoryHtml, insertLineWithHeadingStyle, removeQuotes, renderSelectedTags, switchToAddTag, updateEditorFinalTable } from \"../functions\";\r\nimport { addGenAITags, aiTagList, applyAITagFn, availableKeys, createMultiSelectDropdown, fetchAIHistory, isPendingResponse, jwt, mentionDropdownFn, selectedNames, sendPrompt, sourceList, theme } from \"../taskpane\";\r\nimport { Confirmationpopup, DataModalPopup, toaster } from \"./bodyelements\";\r\n\r\nlet preview = '';\r\n\r\n\r\nexport function loadHomepage(availableKeys) {\r\n    const searchBoxClass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-3\">\r\n        <div class=\"d-flex justify-content-end px-2\">\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Action\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"add-btn-tag\">\r\n                            <i class=\"fa fa-plus me-2\" aria-hidden=\"true\"></i> Add\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"apply-btn-tag\">\r\n                            <i class=\"fa-solid fa-circle-check me-2\"></i> Apply\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group px-2 pt-2\">\r\n            <input type=\"text\" id=\"search-box\" class=\"form-control ${searchBoxClass}\" placeholder=\"Search Tags...\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <ul id=\"suggestion-list\" class=\"list-group mt-2 px-2\"></ul>\r\n        \r\n        <div id=\"tags-in-selected-text\" class=\"mt-2 px-2 selected-text-box d-none\">\r\n            <label class=\"form-label mb-2 fw-bold\">Tags in Selected Text</label>\r\n            <div class=\"tag-panel d-flex flex-wrap gap-2\" id=\"tag-badge-wrapper\"></div>\r\n        </div>\r\n    </div>`;\r\n\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n\r\n    function updateSuggestions() {\r\n        const searchTerm = searchBox.value.trim().toLowerCase();\r\n        suggestionList.replaceChildren(); // Clear previous results\r\n        if (searchTerm === '') {\r\n            suggestionList.innerHTML = ''\r\n            return;\r\n        }\r\n\r\n        const filteredMentions = availableKeys.filter(mention =>\r\n            mention.DisplayName.toLowerCase().includes(searchTerm)\r\n        );\r\n\r\n        const nonAITags = filteredMentions.filter(m => m.AIFlag === 0);\r\n        const aiTags = filteredMentions.filter(m => m.AIFlag === 1);\r\n\r\n        const createSection = (labelText, mentions, isAISection = false) => {\r\n            if (mentions.length === 0) return;\r\n\r\n            // Define the theme classes based on the current theme\r\n            const themeClasses = theme === 'Dark'\r\n                ? { itemClass: 'bg-dark text-light list-hover-dark', labelClass: 'bg-dark text-light' }\r\n                : { itemClass: 'bg-light text-dark list-hover-light', labelClass: 'bg-light text-dark' };\r\n\r\n\r\n            // Create the section label\r\n            const label = document.createElement('li');\r\n            label.className = `list-group-item fw-bold text-secondary ${themeClasses.labelClass}`;\r\n            label.textContent = labelText;\r\n            suggestionList.appendChild(label);\r\n\r\n            // Loop through mentions and create the list items\r\n            mentions.forEach(mention => {\r\n                const listItem = document.createElement('li');\r\n                listItem.className = `list-group-item list-group-item-action ${themeClasses.itemClass}`; // Apply the theme classes\r\n\r\n                // Create the icon for AI or non-AI tags\r\n                const icon = isAISection\r\n                    ? `<i class=\"fa-solid fa-microchip-ai text-muted me-2\"></i>`\r\n                    : `<i class=\"fa-solid fa-layer-group text-muted me-2\"></i>`;\r\n\r\n                listItem.innerHTML = `${icon} ${mention.DisplayName}`;\r\n\r\n                listItem.onclick = () => {\r\n                    if (isAISection) {\r\n                        const appBody = document.getElementById('app-body');\r\n                        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n                        generateCheckboxHistory(mention).catch(error => {\r\n                            appBody.innerHTML = '<div class=\"text-danger p-2\">Error loading data</div>';\r\n                        }).then(html => {\r\n                            appBody.innerHTML = html;\r\n                        });\r\n                    } else {\r\n                        replaceMention(mention, mention.ComponentKeyDataType);\r\n                        suggestionList.replaceChildren();\r\n                    }\r\n                };\r\n\r\n                suggestionList.appendChild(listItem);\r\n            });\r\n        };\r\n\r\n        // Call the function for each section\r\n        createSection('Properties', nonAITags, false);\r\n        createSection('AI Tags', aiTags, true);\r\n\r\n    }\r\n    if (selectedNames.length > 0) {\r\n        const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n        renderSelectedTags(selectedNames, availableKeys);\r\n    }\r\n\r\n    // Add input event listener to the search box\r\n    let debounceTimeout;\r\n    searchBox.addEventListener('input', () => {\r\n        clearTimeout(debounceTimeout);\r\n        debounceTimeout = setTimeout(updateSuggestions, 300); // Delay input handling by 300ms\r\n    });\r\n\r\n    document.getElementById('add-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            addGenAITags();\r\n        }\r\n    });\r\n\r\n    document.getElementById('apply-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            applyAITagFn();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n            let newSelection = selection;\r\n\r\n            if (type === 'TABLE') {\r\n                const parser = new DOMParser();\r\n                const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n                const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                await context.sync();\r\n\r\n                for (const node of bodyNodes) {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        const textContent = node.textContent?.trim();\r\n                        if (textContent) {\r\n                            textContent.split('\\n').forEach(line => {\r\n                                if (line.trim()) {\r\n                                    insertLineWithHeadingStyle(selection, line);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        const element = node as HTMLElement;\r\n\r\n                        if (element.tagName.toLowerCase() === 'table') {\r\n                            const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                            if (rows.length === 0) {\r\n                                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                continue;\r\n                            }\r\n\r\n                            const maxCols = Math.max(...rows.map(row => {\r\n                                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                }, 0);\r\n                            }));\r\n\r\n                            const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                            await context.sync();\r\n\r\n                            const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                            table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n                            await context.sync();\r\n\r\n                            const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                            rows.forEach((row, rowIndex) => {\r\n                                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                let cellIndex = 0;\r\n\r\n                                cells.forEach((cell) => {\r\n                                    while (rowspanTracker[cellIndex] > 0) {\r\n                                        rowspanTracker[cellIndex]--;\r\n                                        cellIndex++;\r\n                                    }\r\n\r\n                                    const cellText = Array.from(cell.childNodes)\r\n                                        .map(node => {\r\n                                            if (node.nodeType === Node.TEXT_NODE) {\r\n                                                return node.textContent?.trim() || '';\r\n                                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                return (node as HTMLElement).innerText.trim();\r\n                                            }\r\n                                            return '';\r\n                                        })\r\n                                        .filter(text => text.length > 0)\r\n                                        .join(' ');\r\n\r\n                                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                    for (let i = 1; i < colspan; i++) {\r\n                                        if (cellIndex + i < maxCols) {\r\n                                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                        }\r\n                                    }\r\n\r\n                                    if (rowspan > 1) {\r\n                                        for (let i = 0; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    cellIndex += colspan;\r\n                                });\r\n                            });\r\n\r\n                            newSelection = table.getCell(0, 0); // Set the cursor to the start of the table\r\n                        } else {\r\n                            const elementText = element.innerText.trim();\r\n                            if (elementText) {\r\n                                elementText.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                            newSelection = selection; // If it's not a table, just use the existing selection.\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (word.EditorValue === '' || word.IsApplied) {\r\n                    selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n                } else {\r\n                    let content = removeQuotes(word.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n                    lines.forEach(line => {\r\n                        selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n                newSelection = selection; // After inserting the text, set selection to it.\r\n            }\r\n\r\n            // Move the cursor to the next line after content insertion\r\n            const nextLineParagraph = selection.insertParagraph(\"\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            // Set the new cursor position after content\r\n            newSelection = nextLineParagraph;\r\n            selection.select(); // Select the new paragraph where the cursor will be\r\n            await context.sync();\r\n\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport async function openAITag(tag) {\r\n    tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n    });\r\n\r\n\r\n}\r\n\r\nexport async function generateCheckboxHistory(tag) {\r\n    if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n        await fetchAIHistory(tag);\r\n    }\r\n\r\n    const history = tag.FilteredReportHeadAIHistoryList;\r\n\r\n    if (history.length === 0) {\r\n        return '<div>No AI history available.</div>';\r\n    }\r\n\r\n    // Check current theme\r\n    const isDark = theme === 'Dark';\r\n    const closeBtnClass = isDark\r\n        ? 'fa-solid fa-circle-xmark bg-dark text-light'\r\n        : 'fa-solid fa-circle-xmark bg-light text-dark';\r\n\r\n    const closeBar = `\r\n        <div class=\"d-flex justify-content-between align-items-center px-2 pt-3\">\r\n            <div class=\"d-flex align-items-center ms-3\">\r\n                <i class=\"fa fa-microchip-ai text-muted me-2\"></i>\r\n                <span class=\"fw-bold\">${tag.DisplayName}</span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-center align-items-center me-3 c-pointer\" id=\"close-btn-tag\">\r\n                <i class=\"${closeBtnClass}\" id=\"close-ai-window\"></i>\r\n            </div>\r\n        </div>\r\n        <hr class=\"mt-2 mb-1 mx-3\">\r\n    `;\r\n\r\n    const chatBody = `\r\n        <div class=\"chat-body\">\r\n            ${generateChatHistoryHtml(history)}\r\n        </div>\r\n    `;\r\n\r\n    const chatFooterHtml = `\r\n        <div class=\"d-flex align-items-end justify-content-end chatbox p-2\" id=\"chatFooter\">\r\n            ${chatfooter(tag)}\r\n        </div>\r\n    `;\r\n\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n\r\n    return `${closeBar}${chatBody}${chatFooterHtml}`;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function setupPromptBuilderUI(container, promptBuilderList) {\r\n\r\n    // Static template and field definitions\r\n    let preview = '';\r\n    let templateText = '';\r\n\r\n    // Field configs (can be extended)\r\n    let fieldsList = [];\r\n\r\n    // Create the form container\r\n    // Create the form container\r\n    container.innerHTML = `\r\n  <div class=\"form-group mb-3 p-3 pt-0\">\r\n    <label class='form-label'><span class=\"text-danger\">*</span> Prompt Builder Template</label>\r\n    <select id=\"promptBuilderTemplate\" class=\"form-control\">\r\n      <option value=\"\" disabled selected>Select a template</option>\r\n    </select>\r\n    <div id=\"templateError\" class=\"invalid-feedback d-none\">Type is required.</div>\r\n  </div>\r\n\r\n  <div id=\"fieldsContainer\"></div>\r\n\r\n  <div class=\"form-group mb-3 p-3 pt-0\" id=\"previewContainer\" style=\"display: none;\">\r\n    <label class=\"mb-2\">Preview</label>\r\n    <div id=\"preview\" class=\"form-control\"></div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between px-3 align-items-center mt-3\">\r\n    <span id=\"resetBtn\" class=\"text-primary fw-bold\" style=\"cursor: pointer;\">Reset</span>\r\n    <button id=\"applyBtn\" class=\"btn btn-primary text-white\" disabled>Apply Prompt</button>\r\n  </div>\r\n`;\r\n\r\n    // Element references\r\n    const templateSelect = container.querySelector('#promptBuilderTemplate') as HTMLSelectElement;\r\n    const applyBtn = container.querySelector('#applyBtn') as HTMLButtonElement;\r\n    const resetBtn = container.querySelector('#resetBtn') as HTMLSpanElement;\r\n    const previewDiv = container.querySelector('#preview') as HTMLDivElement;\r\n    const fieldsContainer = container.querySelector('#fieldsContainer') as HTMLDivElement;\r\n    const previewContainer = container.querySelector('#previewContainer') as HTMLDivElement;\r\n    const templateError = container.querySelector('#templateError') as HTMLDivElement;\r\n\r\n    // Populate template dropdown\r\n    promptBuilderList.forEach((item) => {\r\n        const option = document.createElement('option');\r\n        option.value = item.ID.toString();\r\n        option.textContent = item.Name;\r\n        templateSelect.appendChild(option);\r\n    });\r\n\r\n    templateSelect.addEventListener('change', async () => {\r\n        const templateId = templateSelect.value;\r\n        const jwt = sessionStorage.getItem('token') || '';\r\n\r\n        const data = await getPromptTemplateById(templateId, jwt);\r\n        if (data.Status && data.Data) {\r\n            fieldsList = data.Data;\r\n            preview = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n\r\n            templateText = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n        }\r\n        if (!templateId) {\r\n            templateError.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        templateError.classList.add('d-none');\r\n\r\n        renderFields();\r\n        updatePreview();\r\n    });\r\n\r\n    function renderFields() {\r\n        fieldsContainer.innerHTML = '';\r\n\r\n        fieldsList.forEach((field) => {\r\n            const div = document.createElement('div');\r\n            div.className = 'form-group mb-3 p-3 pt-0';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = field.Label;\r\n            div.appendChild(label);\r\n\r\n            if (field.Type === 1) {\r\n                const input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.className = 'form-control';\r\n                input.id = field.Label;\r\n                input.addEventListener('input', replaceKeywordsManually);\r\n                div.appendChild(input);\r\n            } else if (field.Type === 2) {\r\n                const select = document.createElement('select');\r\n                select.className = 'form-control';\r\n                select.id = field.Label;\r\n                field.PromptTemplateOptionList.forEach((opt: any) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = opt.Text;\r\n                    option.textContent = opt.Option;\r\n                    select.appendChild(option);\r\n                });\r\n                select.addEventListener('change', replaceKeywordsManually);\r\n                div.appendChild(select);\r\n            }\r\n\r\n            fieldsContainer.appendChild(div);\r\n        });\r\n    }\r\n\r\n    function replaceKeywordsManually() {\r\n        const keywordMap: { [key: string]: string } = {};\r\n\r\n        fieldsList.forEach((field) => {\r\n            const id = field.Label;\r\n            const keyword = `#${id}#`;\r\n\r\n            let value = '';\r\n            const element = document.getElementById(id) as HTMLInputElement | HTMLSelectElement;\r\n\r\n            if (element) {\r\n                value = (element instanceof HTMLInputElement || element instanceof HTMLSelectElement)\r\n                    ? element.value\r\n                    : '';\r\n            }\r\n\r\n            keywordMap[keyword] = value ? value : keyword;\r\n        });\r\n\r\n        let insertValue = templateText;\r\n        for (const [keyword, value] of Object.entries(keywordMap)) {\r\n            insertValue = insertValue.replace(new RegExp(keyword, 'g'), value);\r\n        }\r\n\r\n        preview = insertValue;\r\n        previewDiv.textContent = preview;\r\n        previewContainer.style.display = preview ? 'block' : 'none';\r\n        applyBtn.disabled = preview === '';\r\n    }\r\n\r\n    function updatePreview() {\r\n        replaceKeywordsManually();\r\n    }\r\n\r\n    function resetForm() {\r\n        // Reset only the dynamic field values\r\n        fieldsList.forEach((field) => {\r\n            const element = document.getElementById(field.Label) as HTMLInputElement | HTMLSelectElement;\r\n            if (element) {\r\n                if (element instanceof HTMLInputElement) {\r\n                    element.value = '';\r\n                } else if (element instanceof HTMLSelectElement) {\r\n                    element.selectedIndex = 0; // optional: reset to first option\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clear preview\r\n        previewDiv.textContent = templateText;\r\n        preview = templateText;\r\n    }\r\n\r\n\r\n    function applyPrompt() {\r\n        if (!preview) return;\r\n\r\n        const promptTextarea = document.getElementById('prompt') as HTMLTextAreaElement;\r\n        if (promptTextarea) {\r\n            promptTextarea.value = preview;\r\n            switchToAddTag()\r\n        }\r\n\r\n    }\r\n\r\n    resetBtn.addEventListener('click', resetForm);\r\n    applyBtn.addEventListener('click', applyPrompt);\r\n}\r\n\r\n\r\nasync function insertTagPrompt(tag: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.EditorValue === '') {\r\n                selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n            } else {\r\n                if (tag.ComponentKeyDataType === 'TABLE') {\r\n                    const parser = new DOMParser();\r\n                    const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n                    const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                    for (const node of bodyNodes) {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                            const textContent = node.textContent?.trim();\r\n                            if (textContent) {\r\n                                textContent.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                            const element = node as HTMLElement;\r\n\r\n                            if (element.tagName.toLowerCase() === 'table') {\r\n                                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                                if (rows.length === 0) {\r\n                                    selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                    continue;\r\n                                }\r\n\r\n                                const maxCols = Math.max(...rows.map(row => {\r\n                                    return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                    }, 0);\r\n                                }));\r\n\r\n                                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                                await context.sync();\r\n\r\n                                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                                table.style = \"Grid Table 4 - Accent 1\";\r\n                                await context.sync();\r\n\r\n                                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                                rows.forEach((row, rowIndex) => {\r\n                                    const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                    let cellIndex = 0;\r\n\r\n                                    cells.forEach((cell) => {\r\n                                        while (rowspanTracker[cellIndex] > 0) {\r\n                                            rowspanTracker[cellIndex]--;\r\n                                            cellIndex++;\r\n                                        }\r\n\r\n                                        const cellText = Array.from(cell.childNodes)\r\n                                            .map(node => {\r\n                                                if (node.nodeType === Node.TEXT_NODE) {\r\n                                                    return node.textContent?.trim() || '';\r\n                                                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                    return (node as HTMLElement).innerText.trim();\r\n                                                }\r\n                                                return '';\r\n                                            })\r\n                                            .filter(text => text.length > 0)\r\n                                            .join(' ');\r\n\r\n                                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                        for (let i = 1; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                            }\r\n                                        }\r\n\r\n                                        if (rowspan > 1) {\r\n                                            for (let i = 0; i < colspan; i++) {\r\n                                                if (cellIndex + i < maxCols) {\r\n                                                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        cellIndex += colspan;\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                const elementText = element.innerText.trim();\r\n                                if (elementText) {\r\n                                    elementText.split('\\n').forEach(line => {\r\n                                        if (line.trim()) {\r\n                                            insertLineWithHeadingStyle(selection, line);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let content = removeQuotes(tag.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/);\r\n                    lines.forEach(line => {\r\n                        insertLineWithHeadingStyle(selection, line)\r\n                        // selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n                const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                bookmarkRange.insertBookmark(bookmarkName);\r\n                console.log(`Bookmark added: ${bookmarkName}`);\r\n                const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n\r\n                afterBookmark.select();\r\n                start.delete()\r\n                end.delete();\r\n                afterBookmark.delete();\r\n                await context.sync();\r\n\r\n            }\r\n            toaster('Inserted successfully', 'success');\r\n\r\n        } catch (error) {\r\n            toaster('Something went wrong', 'error');\r\n\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport function initializeAIHistoryEvents(tag: any, jwt: string, availableKeys: any) {\r\n    setTimeout(() => {\r\n        tag.FilteredReportHeadAIHistoryList.forEach((chat: any, index: number) => {\r\n            // Copy buttons\r\n            document.getElementById(`copyPrompt-${index}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n            const savePromptele = document.getElementById(`savePrompt-${index}`);\r\n            if (savePromptele) {\r\n                document.getElementById(`savePrompt-${index}`)?.addEventListener('click', () => {\r\n                    const container = document.getElementById('confirmation-popup');\r\n                    if (container) {\r\n                        container.innerHTML = Confirmationpopup('Do you want to save the current prompt as a global default?');\r\n\r\n                        // Wait for DOM to update and then attach cancel button listener\r\n                        setTimeout(() => {\r\n                            document.getElementById('confirmation-popup-cancel')?.addEventListener('click', () => {\r\n                                container.innerHTML = '';\r\n                            });\r\n\r\n                            document.getElementById('confirmation-popup-confirm')?.addEventListener('click', async () => {\r\n                                try {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'true');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'true');\r\n                                    let updatedTag = JSON.parse(JSON.stringify(tag));\r\n                                    updatedTag.Prompt = chat.Prompt;\r\n                                    const data = await updatePromptTemplate(updatedTag, jwt);\r\n                                    if (data['Status']) {\r\n                                        toaster('Updated Succesfully', 'success');\r\n                                        container.innerHTML = '';\r\n                                    } else {\r\n                                        document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                        document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                        toaster('Something went wrong', 'error');\r\n\r\n\r\n                                    }\r\n                                } catch (error) {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                    toaster('Something went wrong', 'error');\r\n                                }\r\n                            });\r\n                        }, 0);\r\n                    }\r\n                });\r\n            }\r\n\r\n            const openRefferance = document.getElementById(`openRefferance-${index}`);\r\n            if (openRefferance) {\r\n                document.getElementById(`openRefferance-${index}`)?.addEventListener('click', () => {\r\n                    const container = document.getElementById('confirmation-popup');\r\n                    if (container) {\r\n                        const chatSources = chat.SourceValue.map((item: any) => {\r\n                            return sourceList.find(\r\n                                (source: any) => Number(item) === source.VectorID\r\n                            );\r\n                        });\r\n\r\n                        const sources = chatSources.filter((src: any) => !!src);\r\n                        const popupData = {\r\n                            Data: chat.Evidences,\r\n                            Name: tag.DisplayName,\r\n                            UserValue: chat.Response,\r\n                            Sources: sources\r\n                        }\r\n\r\n                        container.innerHTML = DataModalPopup(popupData);\r\n\r\n                        // Wait for DOM to update and then attach cancel button listener\r\n                        setTimeout(() => {\r\n                            document.getElementById('confirmation-popup-cancel')?.addEventListener('click', () => {\r\n                                container.innerHTML = '';\r\n                            });\r\n\r\n                            document.getElementById('confirmation-popup-confirm')?.addEventListener('click', async () => {\r\n                                try {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'true');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'true');\r\n                                    let updatedTag = JSON.parse(JSON.stringify(tag));\r\n                                    updatedTag.Prompt = chat.Prompt;\r\n                                    const data = await updatePromptTemplate(updatedTag, jwt);\r\n                                    if (data['Status']) {\r\n                                        toaster('Updated Succesfully', 'success');\r\n                                        container.innerHTML = '';\r\n                                    } else {\r\n                                        document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                        document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                        toaster('Something went wrong', 'error');\r\n\r\n\r\n                                    }\r\n                                } catch (error) {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                    toaster('Something went wrong', 'error');\r\n                                }\r\n                            });\r\n\r\n                            document.getElementById('datamodel-popup-ok')?.addEventListener('click',async() =>{\r\n                                container.innerHTML=''\r\n                            })\r\n                        }, 0);\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n            document.getElementById(`copyResponse-${index}`)?.addEventListener('click', () => copyText(chat.Response));\r\n\r\n            // Close button\r\n            document.getElementById(`close-btn-tag`)?.addEventListener('click', () => loadHomepage(availableKeys));\r\n\r\n            // Checkbox logic\r\n            const checkbox = document.getElementById(`checkbox-${index}`) as HTMLInputElement;\r\n            if (checkbox) {\r\n                checkbox.addEventListener('change', async (event: Event) => {\r\n                    const isChecked = (event.target as HTMLInputElement).checked;\r\n\r\n                    // Reset all\r\n                    tag.FilteredReportHeadAIHistoryList.forEach((_: any, otherIndex: number) => {\r\n                        const otherCheckbox = document.getElementById(`checkbox-${otherIndex}`) as HTMLInputElement;\r\n                        const responseContainer = document.getElementById(`responseContainer-${otherIndex}`);\r\n                        if (otherCheckbox) otherCheckbox.checked = false;\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.remove('ai-selected-response');\r\n                            responseContainer.classList.add('bg-light');\r\n                        }\r\n                        tag.FilteredReportHeadAIHistoryList[otherIndex].Selected = 0;\r\n                    });\r\n\r\n                    // Set selected\r\n                    if (isChecked) {\r\n                        checkbox.checked = true;\r\n                        const responseContainer = document.getElementById(`responseContainer-${index}`);\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.add('ai-selected-response');\r\n                            responseContainer.classList.remove('bg-light');\r\n                        }\r\n                        chat.Selected = 1;\r\n                    } else {\r\n                        chat.Selected = 0;\r\n                    }\r\n\r\n                    try {\r\n                        const data = await updateAiHistory(chat, jwt);\r\n                        if (data['Data']) {\r\n                            tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n                            tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n                            tag.ReportHeadAIHistoryList.forEach((historyList: any) => {\r\n                                historyList.Response = removeQuotes(historyList.Response);\r\n                                tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n                            });\r\n\r\n                            const finalResponse = chat.FormattedResponse\r\n                                ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                : chat.Response;\r\n\r\n                            tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n                            tag.UserValue = finalResponse;\r\n                            tag.EditorValue = finalResponse;\r\n                            tag.text = finalResponse;\r\n\r\n                            const currentlySelected = tag.FilteredReportHeadAIHistoryList.some((item: any) => item.Selected === 1);\r\n                            tag.IsApplied = !currentlySelected;\r\n                            availableKeys.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                    currentTag.IsApplied = tag.IsApplied;\r\n                                }\r\n                            })\r\n\r\n                            aiTagList.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n\r\n\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                    currentTag.IsApplied = tag.IsApplied;\r\n                                }\r\n                            });\r\n                        }\r\n                    } catch (err) {\r\n                        console.error('Failed to update AI history:', err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Button: Insert Tag\r\n        document.getElementById(`insertTagButton`)?.addEventListener('click', () => {\r\n            if (!tag.IsApplied) {\r\n                insertTagPrompt(tag);\r\n            }\r\n        });\r\n\r\n        // Button: Send Prompt\r\n        document.getElementById(`sendPromptButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            sendPrompt(tag, textareaValue);\r\n        });\r\n\r\n        // Button: Change Source\r\n        document.getElementById(`changeSourceButton`)?.addEventListener('click', () => {\r\n            createMultiSelectDropdown(tag);\r\n        });\r\n\r\n        // Mention dropdown\r\n        mentionDropdownFn(`chatInput`, `mention-dropdown`, 'edit');\r\n    }, 0);\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\nimport { dataUrl, storeUrl, versionLink } from \"./data\";\r\nimport { generateCheckboxHistory, initializeAIHistoryEvents, loadHomepage, setupPromptBuilderUI } from \"./components/home\";\r\nimport { applyThemeClasses, chatfooter, renderSelectedTags, swicthThemeIcon, switchToAddTag, switchToPromptBuilder, updateEditorFinalTable } from \"./functions\";\r\nimport { addtagbody, logoheader, navTabs, toaster } from \"./components/bodyelements\";\r\nimport { addAiHistory, addGroupKey, fetchGlossaryTemplate, getAiHistory, getAllClients, getAllPromptTemplates, getReportById, loginUser, updateGroupKey } from \"./api\";\r\nexport let jwt = '';\r\nexport let UserRole: any = {};\r\nlet storedUrl = storeUrl\r\nlet documentID = ''\r\nlet organizationName = ''\r\nexport let aiTagList = [];\r\nlet initialised = true;\r\nexport let availableKeys = [];\r\nlet promptBuilderList = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\nlet capturedFormatting: any = {};\r\nlet emptyFormat: boolean = false;\r\nlet isNoFormatTextAvailable: boolean = false;\r\nlet clientId = '0';\r\nlet userId = 0;\r\nlet clientList = [];\r\nlet version = versionLink;\r\nlet currentYear = new Date().getFullYear();\r\nexport let sourceList;\r\nlet filteredGlossaryTerm;\r\nexport let selectedNames = [];\r\nexport let isPendingResponse = false;\r\nexport let theme = 'Light';\r\n\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"footer\").innerText = `© ${currentYear} - TrialAssure LINK AI Assistant ${version}`\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      () => {\r\n        logBookmarksInSelection();\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      const orgName = properties.items.find(prop => prop.key === 'Organization');\r\n      if (property && orgName) {\r\n        documentID = property.value;\r\n        organizationName = orgName.value;\r\n        login()\r\n      } else {\r\n        document.getElementById('app-body').innerHTML = `\r\n        <p class=\"px-3 text-center\">Export a document from the LINK AI application to use this functionality.</p>`\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  if (sessionToken) {\r\n    UserRole = JSON.parse(sessionStorage.getItem('userRole')) || ''\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n  document.getElementById('logo-header').innerHTML = `\r\n  <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n  <div class=\"icon-nav me-3\">\r\n    <span id=\"theme-toggle\"><i class=\"fa fa-moon c-pointer me-3\"  title=\"Toggle Theme\"></i><span>\r\n  </div>\r\n`;\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-2\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary bg-primary-clr\">Login</button>\r\n        </div>\r\n      <div id=\"login-error\" class=\"mt-3 text-danger\" style=\"display: none;\"></div>\r\n\r\n      </form>\r\n    </div>\r\n  `;\r\n  document.getElementById('theme-toggle').addEventListener('click', () => {\r\n    theme = theme === 'Light' ? 'Dark' : 'Light';\r\n    applyThemeClasses(theme)\r\n\r\n    document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n    document.body.classList.toggle('light-theme', theme === 'Light');\r\n    swicthThemeIcon()\r\n  }\r\n  );\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = (document.getElementById('organization') as HTMLInputElement).value;\r\n  const username = (document.getElementById('username') as HTMLInputElement).value;\r\n  const password = (document.getElementById('password') as HTMLInputElement).value;\r\n  if (organization.toLowerCase().trim() === organizationName.toLocaleLowerCase().trim()) {\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n    try {\r\n      const data = await loginUser(organization, username, password);\r\n      if (data.Status === true && data['Data']) {\r\n        if (data['Data'].ResponseStatus) {\r\n          jwt = data.Data.Token;\r\n          UserRole = data.Data.UserRole;\r\n          sessionStorage.setItem('userRole', JSON.stringify(data.Data.UserRole));\r\n          sessionStorage.setItem('token', jwt)\r\n          sessionStorage.setItem('userId', data.Data.ID);\r\n          toaster('You are successfully logged in', 'success');\r\n          window.location.hash = '#/dashboard';\r\n        } else {\r\n          showLoginError(\"An error occurred during login. Please try again.\")\r\n        }\r\n      } else {\r\n        showLoginError(\"An error occurred during login. Please try again.\")\r\n      }\r\n    } catch (error) {\r\n      showLoginError(\"An error occurred during login. Please try again.\")\r\n      console.error('Error during login:', error);\r\n      // Handle login error (e.g., show an error message)\r\n    }\r\n  } else {\r\n    showLoginError(\"The organization specified is not associated with this document\")\r\n  }\r\n}\r\n\r\nfunction showLoginError(message) {\r\n  loadLoginPage();  // Reload the form UI\r\n  const errorDiv = document.getElementById('login-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction displayMenu() {\r\n  userId = Number(sessionStorage.getItem('userId'))\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument('Init');\r\n\r\n}\r\n\r\nasync function fetchDocument(action) {\r\n  try {\r\n\r\n    const data = await getReportById(documentID, jwt);\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML = logoheader(storedUrl);\r\n\r\n    dataList = data['Data'];\r\n    sourceList = dataList?.SourceTypeList?.filter(\r\n      (item) => item.SourceValue !== ''\r\n        && item.AIFlag === 1\r\n    ) // Filter items with an extension\r\n      .map((item) => ({\r\n        ...item, // Spread the existing properties\r\n        SourceName:decodeURIComponent(transformDocumentName(item.SourceValue))\r\n      }));\r\n    clientId = dataList.ClientID;\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n    availableKeys.forEach((key) => {\r\n      if (key.AIFlag === 1) {\r\n        const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n        let match;\r\n        if ((match = regex.exec(key.EditorValue) !== null)) {\r\n          {\r\n            key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n            key.UserValue = key.EditorValue;\r\n            key.InitialTable = true;\r\n            key.ComponentKeyDataType = 'TABLE';\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    aiTagList.forEach((key, i) => {\r\n      const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n      let match;\r\n      if ((match = regex.exec(key.EditorValue) !== null)) {\r\n        {\r\n          key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n          key.UserValue = key.EditorValue;\r\n          key.InitialTable = true;\r\n          key.ComponentKeyDataType = 'TABLE';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    );\r\n    fetchClients();\r\n    loadPromptTemplates();\r\n    loadHomepage(availableKeys);\r\n    document.getElementById('home').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        loadHomepage(availableKeys);\r\n      }\r\n    });\r\n\r\n    document.getElementById('glossary').addEventListener('click', () => {\r\n      if (emptyFormat) {\r\n        fetchGlossary();\r\n      }\r\n    });\r\n\r\n    document.getElementById('define-formatting').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        formatOptionsDisplay()\r\n      }\r\n    }\r\n    );\r\n\r\n\r\n    document.getElementById('removeFormatting').addEventListener('click', () => {\r\n      if (Object.keys(capturedFormatting).length > 0) {\r\n        removeOptionsConfirmation();\r\n      }\r\n    });\r\n\r\n\r\n    document.getElementById('theme-toggle').addEventListener('click', () => {\r\n      theme = theme === 'Light' ? 'Dark' : 'Light';\r\n      applyThemeClasses(theme)\r\n\r\n      document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n      document.body.classList.toggle('light-theme', theme === 'Light');\r\n      swicthThemeIcon()\r\n    }\r\n    );\r\n\r\n    document.getElementById('logout').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        logout()\r\n      }\r\n    }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchClients() {\r\n  try {\r\n    const userId = sessionStorage.getItem('userId') || '';\r\n\r\n\r\n    const data = await getAllClients(userId, jwt);\r\n\r\n    if (data.Status && data.Data) {\r\n      clientList = data['Data'];\r\n    } else {\r\n      console.warn(\"Failed to load clients or no clients found.\");\r\n    }\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function formatOptionsDisplay() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n               <!-- Buttons for Capture and Empty Format -->\r\n            <div class=\"d-flex justify-content-end\">\r\n              <button id=\"capture-format-btn\" class=\"btn btn-primary bg-primary-clr\"><i class=\"fa fa-border-style me-1\"></i>  Capture Format</button>\r\n            </div>\r\n            <!-- <h5 class=\"card-title\">Formatting Options</h5> -->\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div class=\"formating-checkbox\">\r\n               <input type=\"checkbox\" id=\"empty-format-checkbox\" class=\"form-check-input\">\r\n              <label for=\"empty-format-checkbox\" class=\"form-check-label empty-format-checkbox-label\" style=\"flex: 1;\">\r\n                   Skip ignoring and removing format-based text\r\n              </label>\r\n            </div>\r\n\r\n            <!-- Section to display captured formatting -->\r\n            <div id=\"format-details\">\r\n              <h5 class=\"my-3\">Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled\"></ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    if (Object.keys(capturedFormatting).length === 0) {\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // The object is not empty\r\n    }\r\n\r\n    const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n    if (!glossaryBtn.classList.contains('disabled-link')) {\r\n      glossaryBtn.classList.add('disabled-link');\r\n    }\r\n\r\n    if (emptyFormat) {\r\n      clearCapturedFormatting();\r\n    }\r\n    else {\r\n      if (capturedFormatting.Bold === null || capturedFormatting.Bold === undefined ||\r\n        capturedFormatting.Underline === 'Mixed' || capturedFormatting.Underline === undefined ||\r\n        capturedFormatting.Size === null || capturedFormatting.Size === undefined ||\r\n        capturedFormatting[\"Font Name\"] === null || capturedFormatting[\"Font Name\"] === undefined ||\r\n        capturedFormatting[\"Background Color\"] === '' || capturedFormatting[\"Background Color\"] === undefined ||\r\n        capturedFormatting[\"Text Color\"] === '' || capturedFormatting[\"Text Color\"] === undefined) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n\r\n\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    }\r\n    // Event listeners for the buttons\r\n\r\n    document.getElementById(\"capture-format-btn\").addEventListener(\"click\", captureFormatting);\r\n\r\n    const emptyFormatCheckbox = document.getElementById(\"empty-format-checkbox\") as HTMLInputElement;\r\n    if (isNoFormatTextAvailable) {\r\n      emptyFormatCheckbox.checked = true;\r\n      clearCapturedFormatting();\r\n    }\r\n\r\n    emptyFormatCheckbox.addEventListener(\"change\", () => {\r\n      if (emptyFormatCheckbox.checked) {\r\n        isNoFormatTextAvailable = true;\r\n        clearCapturedFormatting();\r\n      } else {\r\n        const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n        CaptureBtn.disabled = false;\r\n        isNoFormatTextAvailable = false;\r\n        emptyFormat = false;\r\n        const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n        if (!glossaryBtn.classList.contains('disabled-link')) {\r\n          glossaryBtn.classList.add('disabled-link');\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayCapturedFormatting() {\r\n  emptyFormat = false;\r\n  const formatList = document.getElementById(\"format-list\");\r\n  formatList.innerHTML = \"\"; // Clear the list before adding new items\r\n\r\n  for (const [key, value] of Object.entries(capturedFormatting)) {\r\n    if ((key === \"Text Color\" || key === \"Background Color\") && value) {\r\n      formatList.innerHTML += `\r\n        <li><strong>${key}:</strong>${value}\r\n          <span style=\"display:inline-block;width:15px;height:15px;background-color:${value};border:1px solid black;\"></span>\r\n        </li>\r\n      `;\r\n    } else {\r\n      formatList.innerHTML += `<li><strong>${key}:</strong> ${value}</li>`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearCapturedFormatting() {\r\n  capturedFormatting = {}; // Clear the captured formatting object\r\n  const formatDetails = document.getElementById(\"format-details\");\r\n  formatDetails.style.display = 'none';\r\n  // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n  emptyFormat = true;\r\n  const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n  glossaryBtn.classList.remove('disabled-link');\r\n  const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n  CaptureBtn.disabled = true;\r\n\r\n\r\n  const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n  if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n    removeFormatBtn.classList.add('disabled-link');\r\n  }\r\n  console.log(\"Captured formatting cleared.\");\r\n}\r\n\r\nasync function captureFormatting() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      const font = selection.font;\r\n      font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n\r\n      await context.sync();\r\n\r\n      capturedFormatting = {\r\n        Bold: font.bold,\r\n        Italic: font.italic,\r\n        Underline: font.underline,\r\n        Size: font.size,\r\n        \"Background Color\": font.highlightColor,\r\n        \"Font Name\": font.name,\r\n        'Text Color': font.color\r\n      };\r\n\r\n\r\n\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'block';\r\n\r\n      if (capturedFormatting.Bold === null ||\r\n        capturedFormatting.Underline === 'Mixed' ||\r\n        capturedFormatting.Size === null ||\r\n        capturedFormatting[\"Font Name\"] === null ||\r\n        capturedFormatting[\"Background Color\"] === '' ||\r\n        capturedFormatting[\"Text Color\"] === ''\r\n\r\n      ) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error capturing formatting:\", error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function removeOptionsConfirmation() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    } // Check if isTagUpdating is false\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Are you sure you want to remove formatted text ?</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div id=\"format-details\">\r\n              <h5>Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled mb-3\"></ul>\r\n              <small class=\"text-secondary font-italic\" id=\"warning-rem-fmt\"></small>\r\n             \r\n            </div>\r\n               <!-- Buttons for Capture and Empty Format -->\r\n\r\n            <div class=\"mt-3 d-flex justify-content-between\">\r\n              <span id=\"change-ft-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n              <button id=\"clear-ft-btn\" class=\"btn btn-primary px-3\"><i class=\"fa fa-check-circle me-2\"></i>Yes</button>\r\n\r\n            </div>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    displayCapturedFormatting();\r\n\r\n    if (capturedFormatting['Background Color'] === null &&\r\n      capturedFormatting['Text Color'] === '#000000') {\r\n      const warningEle = document.getElementById('warning-rem-fmt').innerHTML = 'Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?'\r\n    }\r\n\r\n    // Event listeners for the buttons\r\n    document.getElementById(\"clear-ft-btn\").addEventListener(\"click\", removeFormattedText);\r\n    document.getElementById(\"change-ft-btn\").addEventListener(\"click\", formatOptionsDisplay);\r\n\r\n  }\r\n}\r\n\r\nasync function removeFormattedText() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n      const iconelement = document.getElementById(`clear-ft-btn`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Yes`;\r\n      const clrBtn = document.getElementById('clear-ft-btn') as HTMLButtonElement;\r\n      clrBtn.disabled = true;\r\n\r\n      const changeBtn = document.getElementById('change-ft-btn') as HTMLButtonElement;\r\n      changeBtn.disabled = true;\r\n      const paragraphs = context.document.body.paragraphs;\r\n      paragraphs.load(\"items\"); // Load paragraphs from the body\r\n\r\n      await context.sync();\r\n\r\n      // Iterate through each paragraph in the document body\r\n      for (const paragraph of paragraphs.items) {\r\n\r\n        // Check if the paragraph contains text\r\n        if (paragraph.text.trim() !== \"\") {\r\n          const textRanges = paragraph.split([\" \"]); // Split paragraph into individual words/segments\r\n          textRanges.load(\"items, font\");\r\n\r\n          await context.sync();\r\n\r\n          for (const range of textRanges.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n\r\n            // Check if the text range matches the captured formatting\r\n            if (\r\n              font.highlightColor === capturedFormatting['Background Color'] &&\r\n              font.color === capturedFormatting['Text Color'] &&\r\n              font.bold === capturedFormatting['Bold'] &&\r\n              font.italic === capturedFormatting['Italic'] &&\r\n              font.size === capturedFormatting['Size'] &&\r\n              font.underline === capturedFormatting['Underline'] &&\r\n              font.name === capturedFormatting['Font Name']\r\n            ) {\r\n              // Clear the range whether it's a full word or part of a word\r\n              font.highlightColor = \"#FFFFFF\"; // Set new background color\r\n              font.color = \"#000000\"; // Set new text color\r\n              font.bold = false; // Reset bold if needed\r\n              font.italic = false; // Reset italic if needed\r\n              font.underline = \"None\";\r\n              paragraph.insertText(\" \", Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n      capturedFormatting = {}; // Clear the captured formatting object\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n      emptyFormat = true;\r\n      isNoFormatTextAvailable = true;\r\n      const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n      glossaryBtn.classList.remove('disabled-link');\r\n      formatOptionsDisplay()\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing formatted text:\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAIHistory(tag) {\r\n  try {\r\n\r\n    const data = await getAiHistory(tag.ID, jwt);\r\n\r\n\r\n    if (data.Status && data.Data) {\r\n      tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n      tag.FilteredReportHeadAIHistoryList = [];\r\n      tag.SourceValueID = tag.ReportHeadAIHistoryList[0].SourceValue;\r\n      const selectedSources = sourceList.filter((list) =>\r\n        tag.SourceValueID.includes(String(list.VectorID))\r\n      );\r\n\r\n      tag.SourceName = selectedSources.map((item) => {\r\n        return item.SourceName;\r\n      });\r\n      tag.Sources = tag.SourceName.join(',');\r\n      tag.TempSourceValue = selectedSources.map((item) => {\r\n        return item.VectorID ? String(item.VectorID) : item.SourceValue;\r\n      });\r\n\r\n\r\n      tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n      });\r\n      return tag.FilteredReportHeadAIHistoryList;\r\n      // Use the data here\r\n    } else {\r\n      console.warn(\"No AI history available.\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendPrompt(tag, prompt) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n\r\n    const iconelement = document.getElementById(`sendPromptButton`);\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`;\r\n\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      ThreadID: tag.ThreadID,\r\n      AssistantID: dataList.AssistantID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      VectorID: dataList.VectorID,\r\n      Selected: 0,\r\n      ID: 0,\r\n      SourceValue: tag.TempSourceValue ? tag.TempSourceValue : []\r\n    };\r\n\r\n    try {\r\n      isPendingResponse = true;\r\n      const data = await addAiHistory(payload, jwt);\r\n\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n        const chat = tag.ReportHeadAIHistoryList[0];\r\n        aiTagList.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n\r\n\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n            currentTag.IsApplied = tag.IsApplied;\r\n\r\n          }\r\n        });\r\n\r\n        availableKeys.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n            currentTag.IsApplied = tag.IsApplied;\r\n\r\n          }\r\n        })\r\n\r\n\r\n\r\n        const appbody = document.getElementById('app-body')\r\n        appbody.innerHTML = await generateCheckboxHistory(tag);\r\n        isPendingResponse = false;\r\n\r\n      }\r\n\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      document.getElementById(`chatInput`).value = '';\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      // sourceListBtn.disabled = false;\r\n\r\n    } catch (error) {\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      console.error('Error sending AI prompt:', error);\r\n    }\r\n  } else {\r\n    console.error('No empty prompt allowed');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Your existing copyText function\r\n\r\n\r\n\r\nasync function logout() {\r\n  if (isGlossaryActive) {\r\n    await removeMatchingContentControls();\r\n  }\r\n  sessionStorage.clear();\r\n  window.location.hash = '#/new';\r\n  initialised = true;\r\n  document.getElementById('logo-header').innerHTML = ``;\r\n  login();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nexport async function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n\r\n      context.load(body, 'text');\r\n      await context.sync();\r\n\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n        context.load(searchResults, 'items');\r\n        await context.sync();\r\n\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n\r\n        for (const item of searchResults.items) {\r\n          if (tag.EditorValue !== \"\" && !tag.IsApplied) {\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = item.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.ComponentKeyDataType === 'TABLE') {\r\n              const range = item.getRange();\r\n              const parser = new DOMParser();\r\n              const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n              const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n              range.delete();\r\n\r\n              for (const node of bodyNodes) {\r\n                if (node.nodeType === Node.TEXT_NODE) {\r\n                  const textContent = node.textContent?.trim();\r\n                  if (textContent) {\r\n                    textContent.split('\\n').forEach(line => {\r\n                      if (line.trim()) {\r\n                        insertLineWithHeadingStyle(range, line);\r\n                      }\r\n                    });\r\n                  }\r\n                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                  const element = node as HTMLElement;\r\n\r\n                  if (element.tagName.toLowerCase() === 'table') {\r\n                    const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                    if (rows.length === 0) {\r\n                      range.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                      continue;\r\n                    }\r\n\r\n                    const maxCols = Math.max(...rows.map(row => {\r\n                      return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                      }, 0);\r\n                    }));\r\n\r\n                    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n                    await context.sync();\r\n\r\n                    const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                    table.style = \"Grid Table 4 - Accent 1\";\r\n                    await context.sync();\r\n\r\n                    const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                    rows.forEach((row, rowIndex) => {\r\n                      const cells = Array.from(row.querySelectorAll('td, th'));\r\n                      let cellIndex = 0;\r\n\r\n                      cells.forEach((cell) => {\r\n                        while (rowspanTracker[cellIndex] > 0) {\r\n                          rowspanTracker[cellIndex]--;\r\n                          cellIndex++;\r\n                        }\r\n\r\n                        const cellText = Array.from(cell.childNodes)\r\n                          .map(node => {\r\n                            if (node.nodeType === Node.TEXT_NODE) {\r\n                              return node.textContent?.trim() || '';\r\n                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                              return (node as HTMLElement).innerText.trim();\r\n                            }\r\n                            return '';\r\n                          })\r\n                          .filter(text => text.length > 0)\r\n                          .join(' ');\r\n\r\n                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n\r\n                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                        for (let i = 1; i < colspan; i++) {\r\n                          if (cellIndex + i < maxCols) {\r\n                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                          }\r\n                        }\r\n\r\n                        if (rowspan > 1) {\r\n                          for (let i = 0; i < colspan; i++) {\r\n                            if (cellIndex + i < maxCols) {\r\n                              rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                            }\r\n                          }\r\n                        }\r\n\r\n                        cellIndex += colspan;\r\n                      });\r\n                    });\r\n                  } else {\r\n                    const elementText = element.innerText.trim();\r\n                    if (elementText) {\r\n                      elementText.split('\\n').forEach(line => {\r\n                        if (line.trim()) {\r\n                          insertLineWithHeadingStyle(range, line);\r\n                        }\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              await context.sync();\r\n            } else {\r\n              item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n              await context.sync();\r\n            }\r\n\r\n            const endMarker = item.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n              const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n              bookmarkRange.insertBookmark(bookmarkName);\r\n              console.log(`Bookmark added: ${bookmarkName}`);\r\n              const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n\r\n              afterBookmark.select();\r\n              start.delete();\r\n              end.delete();\r\n              afterBookmark.delete();\r\n              await context.sync();\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction selectResponse(tagIndex, chatIndex) {\r\n  // Handle the response selection logic here\r\n  console.log(`Response selected for tagIndex ${tagIndex}, chatIndex ${chatIndex}`);\r\n}\r\n\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n    loadGlossary()\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n      body.load(\"text\");\r\n      await context.sync(); // Sync to get the text content\r\n\r\n      const bodyText = {\r\n        \"Content\": body.text.replace(/[\\n\\r]/g, ' ')\r\n      };\r\n      try {\r\n\r\n        const data = await fetchGlossaryTemplate(dataList?.ClientID, bodyText, jwt);\r\n\r\n        layTerms = data.Data;\r\n\r\n        if (data.Data.length > 0) {\r\n          glossaryName = data.Data[0].GlossaryTemplate;\r\n          loadGlossary();\r\n        } else {\r\n          document.getElementById('app-body').innerHTML = `\r\n            <p class=\"text-center\">Data not available</p>\r\n          `;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n      }\r\n      // Sort terms by length (longest first)\r\n      layTerms.sort((a, b) => b.ClinicalTerm.length - a.ClinicalTerm.length);\r\n\r\n      const processedTerms = new Set(); // Track added larger terms\r\n\r\n      // Filter out smaller terms if they are included in a larger term\r\n      const filteredTerms = layTerms.filter(term => {\r\n        for (const biggerTerm of processedTerms) {\r\n          if (typeof biggerTerm === 'string' && biggerTerm.includes(term.ClinicalTerm.toLowerCase())) {\r\n            console.log(`Skipping \"${term.ClinicalTerm}\" because it's part of \"${biggerTerm}\"`);\r\n            return false; // Exclude this smaller term\r\n          }\r\n        }\r\n        processedTerms.add(term.ClinicalTerm.toLowerCase());\r\n        return true;\r\n      });\r\n\r\n      filteredGlossaryTerm = filteredTerms;\r\n      await removeMatchingContentControls();\r\n\r\n      const foundRanges = new Map(); // Track words already processed\r\n\r\n      const searchPromises = filteredGlossaryTerm.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      for (const searchResults of searchPromises) {\r\n\r\n        for (const range of searchResults.items) {\r\n\r\n          if (!range || !range.text) {\r\n            console.log(\"Invalid range. Skipping...\");\r\n            continue;\r\n          }\r\n\r\n          // Load existing content controls inside this range\r\n          const font = range.font;\r\n          font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n          range.load(\"contentControls\");\r\n          await context.sync();\r\n\r\n          const existingControl = range.contentControls.items.length > 0;\r\n\r\n          if (existingControl) {\r\n            console.log(`Skipping \"${range.text}\" because it already has a content control.`);\r\n            continue; // Skip if content control is already present\r\n          }\r\n          // Check if we've already processed this term at this range\r\n          if (foundRanges.has(range.text)) {\r\n            console.log(`Skipping duplicate occurrence of \"${range.text}\"`);\r\n            continue;\r\n          }\r\n          // Mark this word as processed\r\n          foundRanges.set(range.text, true);\r\n          // Remove existing content controls if any\r\n          if (range.contentControls && range.contentControls.items.length > 0) {\r\n            console.log(`Removing existing content control from: \"${range.text}\"`);\r\n            for (const control of range.contentControls.items) {\r\n              control.delete(false); // 'false' keeps the text, only removes the control\r\n            }\r\n            await context.sync(); // Ensure deletion is applied before adding a new one\r\n          }\r\n\r\n          try {\r\n            // Insert a new content control\r\n            const contentControl = range.insertContentControl();\r\n            contentControl.title = `${range.text}`;\r\n            if (font.highlightColor !== null) {\r\n              contentControl.tag = `${font.highlightColor}`;\r\n            }\r\n            contentControl.font.highlightColor = \"yellow\"; // Highlight the control\r\n            contentControl.appearance = Word.ContentControlAppearance.boundingBox;\r\n            await context.sync();\r\n          } catch (error) {\r\n            console.error(`Error inserting content control for term \"${range.text}\":`, error);\r\n          }\r\n        }\r\n      }\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      <div class=\"d-flex justify-content-center box-loader\">\r\n       <div class=\"loader\" id=\"loader\"></div></div>\r\n      \r\n`\r\n      const displayElement = document.getElementById('loader');\r\n      displayElement.style.display = 'none';\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', removeMatchingContentControls);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const loader = document.getElementById('loader');\r\n        if (loader) {\r\n          loader.style.display = 'block';\r\n        }\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        for (const searchResults of searchPromises) {\r\n\r\n          for (const range of searchResults.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n            if (\r\n              font.highlightColor !== capturedFormatting['Background Color'] ||\r\n              font.color !== capturedFormatting['Text Color'] ||\r\n              font.bold !== capturedFormatting['Bold'] ||\r\n              font.italic !== capturedFormatting['Italic'] ||\r\n              font.size !== capturedFormatting['Size'] ||\r\n              font.underline !== capturedFormatting['Underline'] ||\r\n              font.name !== capturedFormatting['Font Name']\r\n            ) {\r\n              selectedWords.push(range.text);\r\n            }\r\n\r\n          }\r\n        }\r\n        // searchPromises.forEach(searchResults => {\r\n        //   searchResults.items.forEach(item => {\r\n        //   });\r\n        // });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n    const loader = document.getElementById('loader');\r\n    loader.style.display = 'block';\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm.toLowerCase() === word.toLowerCase()) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n    loader.style.display = 'none';\r\n\r\n  }\r\n}\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  const displayElement = document.getElementById('loader');\r\n  displayElement.style.display = 'block';\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.toLowerCase().includes(clinicalTerm.toLowerCase())) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        for (const item of searchResults.items) {\r\n          // Load the font properties\r\n          item.font.load(['bold', 'italic', 'underline', 'color', 'highlightColor', 'size', 'name']);\r\n          await context.sync();  // Ensure the properties are loaded before accessing them\r\n\r\n          // Insert the layTerm while keeping the formatting\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Apply the original formatting to the new text\r\n          item.font.bold = item.font.bold;\r\n          item.font.italic = item.font.italic;\r\n          item.font.underline = item.font.underline;\r\n          item.font.color = item.font.color;\r\n          item.font.highlightColor = '#c7c7c7';\r\n          item.font.size = item.font.size;\r\n          item.font.name = item.font.name;\r\n        }\r\n\r\n        await context.sync();\r\n        displayElement.style.display = 'none';\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and preserved the original formatting.`);\r\n      } else {\r\n        displayElement.style.display = 'none';\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    displayElement.style.display = 'none';\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function removeMatchingContentControls() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <div class=\"loader\" id=\"loader\"></div>\r\n        <div id=\"highlighted-text\"></div>`;\r\n      const body = context.document.body;\r\n\r\n      // Load all content controls\r\n      const contentControls = body.contentControls;\r\n      contentControls.load(\"items\");\r\n      await context.sync();\r\n\r\n      if (contentControls.items.length === 0) {\r\n        console.log(\"No content controls found.\");\r\n        return;\r\n      }\r\n\r\n      for (const control of contentControls.items) {\r\n        if (control.title && filteredGlossaryTerm.some(term => term.ClinicalTerm.toLowerCase() === control.title.toLowerCase())) {\r\n          const range = control.getRange();\r\n          range.load(\"text\");\r\n          await context.sync();\r\n          if (control.tag && /^#[0-9A-Fa-f]{6}$/.test(control.tag)) {\r\n            range.font.highlightColor = control.tag;\r\n          } else {\r\n            range.font.highlightColor = null\r\n          }\r\n          await context.sync();\r\n          control.delete(true);\r\n        }\r\n      }\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n      `;\r\n\r\n      await context.sync();\r\n      isGlossaryActive = false;\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing content controls:\", error);\r\n  }\r\n}\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nexport async function addGenAITags() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n    let selectedClient = clientList.filter((item) => item.ID === clientId);\r\n\r\n    let sponsorOptions = clientList.map(client => {\r\n      const isSelectedClient = selectedClient.some(selected => selected.ID === client.ID);\r\n      return ` \r\n        <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" value=\"${client.ID}\" id=\"sponsor${client.ID}\" ${isSelectedClient ? 'checked disabled' : ''}>\r\n            <label class=\"form-check-label text-prewrap\" for=\"sponsor${client.ID}\">${client.Name}</label>\r\n          </div>\r\n        </li>\r\n      `;\r\n    }).join('');\r\n\r\n    document.getElementById('app-body').innerHTML = navTabs;\r\n    // Add modal HTML to the DOM \r\n    document.getElementById('add-tag-body').innerHTML = addtagbody(sponsorOptions);\r\n    const promptTemplateElement = document.getElementById('add-prompt-template')\r\n    setupPromptBuilderUI(promptTemplateElement, promptBuilderList)\r\n\r\n\r\n    document.getElementById('tag-tab').addEventListener('click', () => {\r\n      switchToAddTag()\r\n    });\r\n\r\n\r\n    document.getElementById('prompt-tab').addEventListener('click', () => {\r\n      switchToPromptBuilder()\r\n    });\r\n\r\n    //prompt starting\r\n    mentionDropdownFn('prompt', 'mention-dropdown', 'add');\r\n    //prompt end\r\n    const form = document.getElementById('genai-form');\r\n    const promptField = document.getElementById('prompt');\r\n\r\n    const nameField = document.getElementById('name');\r\n    const descriptionField = document.getElementById('description');\r\n    const saveGloballyCheckbox = document.getElementById('saveGlobally');\r\n    const availableForAllCheckbox = document.getElementById('isAvailableForAll');\r\n    const sponsorDropdownButton = document.getElementById('sponsorDropdown');\r\n    const sponsorDropdownItems = document.querySelectorAll('.dropdown-item .form-check-input');\r\n\r\n    document.getElementById('cancel-btn-gen-ai').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        loadHomepage(availableKeys)\r\n      }\r\n    });\r\n\r\n    // Check if elements exist\r\n    if (form && nameField && promptField && sponsorDropdownItems.length > 0) {\r\n      const updateDropdownLabel = () => {\r\n        if (availableForAllCheckbox.checked) {\r\n          sponsorDropdownButton.textContent = clientList.map(client => client.Name).join(\", \");\r\n        } else {\r\n          const selectedOptions = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => cb.parentElement.textContent.trim());\r\n          sponsorDropdownButton.textContent = selectedOptions.length ? selectedOptions.join(\", \") : \"Select Sponsors\";\r\n        }\r\n      };\r\n      // Form validation logic on submit\r\n      form.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n\r\n        // Reset previous validation errors\r\n        form.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));\r\n\r\n        let valid = true;\r\n\r\n        if (!(nameField as HTMLInputElement).value.trim()) {\r\n          nameField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (!(promptField as HTMLInputElement).value.trim()) {\r\n          promptField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (valid) {\r\n          // Prepare object to pass to createTextGenTag\r\n          const selectedSponsors = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => {\r\n              const client = clientList.find(client => client.ID == cb.value);\r\n              return client; // Collect the entire client object\r\n            });\r\n\r\n          const isAvailableForAll = availableForAllCheckbox.checked;\r\n          const isSaveGlobally = saveGloballyCheckbox.checked;\r\n          const aigroup = dataList.Group.find(element => element.DisplayName === 'AIGroup');\r\n          const formData = {\r\n            DisplayName: nameField.value.trim(),\r\n            Prompt: promptField.value.trim(),\r\n            Description: descriptionField.value.trim(),\r\n            GroupKeyClient: selectedSponsors, // Array of selected sponsor objects\r\n            AllClient: isAvailableForAll ? 1 : 0,\r\n            SaveGlobally: isSaveGlobally,\r\n            UserDefined: '1',\r\n            ComponentKeyDataTypeID: '1',\r\n            ComponentKeyDataAccessID: '3',\r\n            AIFlag: 1,\r\n            DocumentTypeID: dataList.DocumentTypeID,\r\n            ReportHeadID: dataList.ID,\r\n            SourceTypeID: '',\r\n            ReportHeadGroupID: aigroup.ID,\r\n            ReportHeadSourceID: ''\r\n          };\r\n\r\n          await createTextGenTag(formData);\r\n        }\r\n      });\r\n\r\n\r\n      const checkAndDisableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          if (!checkbox.disabled) {\r\n            checkbox.checked = true;\r\n            checkbox.disabled = true;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Function to enable sponsors without unchecking them\r\n      const enableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          const isSelectedClient = selectedClient.some(selected => selected.ID === parseInt(checkbox.value));\r\n          if (!isSelectedClient) {\r\n            checkbox.disabled = false;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Event listener for \"Save Globally\" checkbox\r\n\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n\r\n      saveGloballyCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n          if (this.checked) {\r\n            availableForAllCheckbox.disabled = false;\r\n            sponsorDropdownButton.disabled = false;\r\n          } else {\r\n            enableSponsors();\r\n            availableForAllCheckbox.checked = false;\r\n            availableForAllCheckbox.disabled = true;\r\n            sponsorDropdownButton.disabled = true;\r\n            sponsorDropdownItems.forEach(checkbox => {\r\n              if (!checkbox.disabled) {\r\n                checkbox.checked = false;\r\n                checkbox.disabled = false;\r\n              }\r\n            });\r\n            updateDropdownLabel();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n      availableForAllCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n\r\n          if (this.checked) {\r\n            checkAndDisableSponsors();\r\n          } else {\r\n            enableSponsors();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Add event listener to prevent dropdown close on item selection\r\n      document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', function (event) {\r\n          {\r\n            event.stopPropagation(); // Prevent dropdown from closing\r\n            const checkbox = this.querySelector('.form-check-input');\r\n            if (checkbox) {\r\n\r\n\r\n              if (checkbox.id === 'selectAll') {\r\n                const isChecked = checkbox.checked;\r\n                sponsorDropdownItems.forEach(cb => {\r\n                  if (!cb.disabled) cb.checked = isChecked;\r\n                });\r\n              }\r\n              updateDropdownLabel();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Initial label update\r\n      updateDropdownLabel();\r\n\r\n\r\n      // Clear validation errors when user types\r\n      [nameField, promptField].forEach(field => {\r\n        field.addEventListener('input', function () {\r\n          if (this.classList.contains('is-invalid') && this.value.trim()) {\r\n            this.classList.remove('is-invalid');\r\n          }\r\n          if (nameField) {\r\n            const errorDiv = document.getElementById('submition-error');\r\n            errorDiv.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('Required elements are missing or not rendered yet.');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function createTextGenTag(payload) {\r\n  try {\r\n    const iconelement = document.getElementById(`text-gen-save`);\r\n    const cancelBtnGenAi = document.getElementById('cancel-btn-gen-ai');\r\n\r\n\r\n    (cancelBtnGenAi as HTMLButtonElement).disabled = true;\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Save`;\r\n    (iconelement as HTMLButtonElement).disabled = true;\r\n    isPendingResponse = true;\r\n\r\n    const data = await addGroupKey(payload, jwt);\r\n    isPendingResponse = false;\r\n\r\n    if (data['Data'] && data['Status']) {\r\n      fetchDocument('AIpanel');\r\n      toaster('Saved successfully', 'success');\r\n    } else {\r\n      (cancelBtnGenAi as HTMLButtonElement).disabled = false;\r\n      (iconelement as HTMLButtonElement).disabled = false;\r\n      iconelement.innerHTML = `<i class=\"fa fa-check-circle me-2\"></i>Save`;\r\n      toaster('Something went wrong', 'error');\r\n      // showAddTagError(data['Data']);\r\n    }\r\n\r\n  } catch (error) {\r\n    toaster('Something went wrong', 'error');\r\n    console.error('Error creating text generation tag:', error);\r\n  }\r\n}\r\n\r\n\r\nexport function mentionDropdownFn(textareaId, DropdownId, action) {\r\n  const filterMentions = (query) => {\r\n    // Assuming availableKeys is an array of objects with DisplayName and EditorValue properties\r\n    const filtered = availableKeys.filter(item => item.AIFlag === 0).filter(item =>\r\n      item.DisplayName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    return filtered;\r\n  };\r\n  let highlightedIndex = -1;\r\n\r\n  const promptField = document.getElementById(`${textareaId}`);\r\n  const mentionDropdown = document.getElementById(`${DropdownId}`);\r\n  if (promptField) {\r\n\r\n    // Handle input events on prompt field for mentions\r\n    promptField.addEventListener('input', (e) => {\r\n      const cursorPosition = promptField.selectionStart;\r\n      const textBeforeCursor = promptField.value.slice(0, cursorPosition);\r\n      const lastHashtag = textBeforeCursor.lastIndexOf('#');\r\n      if (lastHashtag !== -1) {\r\n        const query = textBeforeCursor.slice(lastHashtag + 1).trim();\r\n        if (query.length > 0) {\r\n          const mentions = filterMentions(query);\r\n\r\n          if (mentions.length > 0) {\r\n            mentionDropdown.innerHTML = mentions.map(item => {\r\n              let editorValue = '';\r\n              if (action === 'add') {\r\n                editorValue = `#${item.DisplayName}#`;\r\n              } else {\r\n                editorValue = item.EditorValue || `#${item.DisplayName}#`;\r\n              }\r\n\r\n              return `<li class=\"dropdown-item\" data-editor-value=\"${editorValue}\">${item.DisplayName}</li>`;\r\n            }).join('');\r\n\r\n            // Get the position of the textarea and place the dropdown above it\r\n            const textareaRect = promptField.getBoundingClientRect();\r\n            mentionDropdown.style.left = `${textareaRect.left}px`;\r\n            mentionDropdown.style.bottom = `75px`; // Position above the textarea\r\n            mentionDropdown.style.display = 'block';\r\n          } else {\r\n            mentionDropdown.style.display = 'none';\r\n          }\r\n        } else {\r\n          mentionDropdown.style.display = 'none';\r\n        }\r\n      } else {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n\r\n    });\r\n\r\n    // Handle keyboard navigation in the dropdown\r\n    promptField.addEventListener('keydown', (e) => {\r\n      const items = document.querySelectorAll(`#${DropdownId} .dropdown-item`);\r\n      const totalItems = items.length;\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight down and wrap around to the top if at the end\r\n        if (highlightedIndex < totalItems - 1) {\r\n          highlightedIndex++;\r\n        } else {\r\n          highlightedIndex = 0; // Wrap to the first item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'ArrowUp') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight up and wrap around to the bottom if at the top\r\n        if (highlightedIndex > 0) {\r\n          highlightedIndex--;\r\n        } else {\r\n          highlightedIndex = totalItems - 1; // Wrap to the last item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'Enter' && highlightedIndex !== -1) {\r\n        // Select the highlighted item\r\n        const selectedItem = items[highlightedIndex];\r\n        if (selectedItem) {\r\n          selectMention(selectedItem.getAttribute('data-editor-value'));\r\n          mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n          e.preventDefault();  // Prevent form submission on Enter key\r\n        }\r\n      }\r\n    });\r\n\r\n    // Function to highlight the selected item\r\n    function updateHighlightedItem(id) {\r\n      const items = document.querySelectorAll(`#${id} .dropdown-item`);\r\n      const dropdown = document.getElementById(`${id}`);\r\n      const totalItems = items.length;\r\n\r\n      // Remove the 'active' class from all items\r\n      items.forEach(item => item.classList.remove('active'));\r\n\r\n      // Add the 'active' class to the currently highlighted item\r\n      if (highlightedIndex >= 0 && highlightedIndex < totalItems) {\r\n        const highlightedItem = items[highlightedIndex];\r\n        highlightedItem.classList.add('active');\r\n\r\n        // Ensure the highlighted item is visible within the dropdown\r\n        highlightedItem.scrollIntoView({\r\n          behavior: 'smooth',    // Smooth scroll\r\n          block: 'nearest'      // Scroll only if necessary\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Handle selecting an item from the dropdown via mouse click\r\n    mentionDropdown.addEventListener('click', (e) => {\r\n      if (e.target && e.target.matches('li')) {\r\n        const editorValue = e.target.getAttribute('data-editor-value');\r\n        selectMention(editorValue);\r\n        mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n      }\r\n    });\r\n\r\n    // Function to insert the selected mention into the prompt field\r\n    const selectMention = (editorValue) => {\r\n      const textarea = document.getElementById(`${textareaId}`);\r\n      const currentValue = textarea.value;\r\n      const cursorPosition = textarea.selectionStart;\r\n\r\n      const textBefore = currentValue.slice(0, cursorPosition);\r\n      const textAfter = currentValue.slice(cursorPosition);\r\n\r\n      const lastHashPosition = textBefore.lastIndexOf('#');\r\n      const updatedTextBefore = textBefore.slice(0, lastHashPosition); // Removing '#' symbol\r\n\r\n      textarea.value = `${updatedTextBefore}${editorValue}${textAfter}`;\r\n      const newCursorPosition = updatedTextBefore.length + editorValue.length;\r\n      textarea.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    };\r\n\r\n    // Hide the dropdown if clicked outside\r\n    document.addEventListener('click', (e) => {\r\n      if (!mentionDropdown.contains(e.target) && e.target !== promptField) {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n        const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n        for (const node of bodyNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const textContent = node.textContent?.trim();\r\n            if (textContent) {\r\n              textContent.split('\\n').forEach(line => {\r\n                if (line.trim()) {\r\n                  insertLineWithHeadingStyle(selection, line);\r\n                }\r\n              });\r\n            }\r\n          } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n            const element = node as HTMLElement;\r\n\r\n            if (element.tagName.toLowerCase() === 'table') {\r\n              const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n              if (rows.length === 0) {\r\n                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                continue;\r\n              }\r\n\r\n              const maxCols = Math.max(...rows.map(row => {\r\n                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                  return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                }, 0);\r\n              }));\r\n\r\n              const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n              await context.sync();\r\n\r\n              const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n              table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n              await context.sync();\r\n\r\n              const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n              rows.forEach((row, rowIndex) => {\r\n                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                let cellIndex = 0;\r\n\r\n                cells.forEach((cell) => {\r\n                  while (rowspanTracker[cellIndex] > 0) {\r\n                    rowspanTracker[cellIndex]--;\r\n                    cellIndex++;\r\n                  }\r\n\r\n                  const cellText = Array.from(cell.childNodes)\r\n                    .map(node => {\r\n                      if (node.nodeType === Node.TEXT_NODE) {\r\n                        return node.textContent?.trim() || '';\r\n                      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        return (node as HTMLElement).innerText.trim();\r\n                      }\r\n                      return '';\r\n                    })\r\n                    .filter(text => text.length > 0)\r\n                    .join(' ');\r\n\r\n                  const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                  const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                  // if (rowIndex === 0) {\r\n                  //   const cell = table.getCell(rowIndex, cellIndex);\r\n                  //   const paragraph = cell.body.paragraphs.getFirst();\r\n                  //   paragraph.font.bold = true;\r\n                  //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                  // }\r\n                  table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                  for (let i = 1; i < colspan; i++) {\r\n                    if (cellIndex + i < maxCols) {\r\n                      table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                    }\r\n                  }\r\n\r\n                  if (rowspan > 1) {\r\n                    for (let i = 0; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellIndex += colspan;\r\n                });\r\n              });\r\n            } else {\r\n              const elementText = element.innerText.trim();\r\n              if (elementText) {\r\n                elementText.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        if (word.EditorValue === '' || word.IsApplied) {\r\n          selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n        } else {\r\n          let content = removeQuotes(word.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\nfunction showAddTagError(message) {\r\n  const errorDiv = document.getElementById('submition-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction transformDocumentName(value: string): string {\r\n  if (!value || value.trim() === '') {\r\n    return value; // Return the input value unchanged\r\n  }\r\n\r\n  const parts = value.split('_');\r\n  if (parts.length <= 1) {\r\n    return value; // Return the input value unchanged if no underscores are present\r\n  }\r\n\r\n  return parts.slice(1).join('_').replace(/%20/g, ' ').replace(/%25/g, '%');\r\n}\r\n\r\n\r\n\r\nexport function createMultiSelectDropdown(tag) {\r\n  const isDark = theme === 'Dark';\r\n  const btnClass = isDark ? 'btn-dark text-light border-0' : 'btn-light text-dark border';\r\n  const dropdownMenuClass = isDark ? 'bg-dark text-light border-light' : 'bg-white text-dark border';\r\n  const itemClass = isDark ? 'bg-dark text-light' : 'bg-white text-dark';\r\n\r\n  // Group sources by SourceType\r\n  const groupedSources = sourceList.reduce((groups, source) => {\r\n    if (!groups[source.SourceType]) groups[source.SourceType] = [];\r\n    groups[source.SourceType].push(source);\r\n    return groups;\r\n  }, {});\r\n\r\n  const multiSelectHTML = `\r\n  <div class='p-3 w-100'>\r\n    <div class=\"mb-3\">\r\n      <label for=\"source-select\" class=\"form-label\"><span class=\"text-danger\">*</span> Select Sources</label>\r\n      <div class=\"dropdown w-100\">\r\n        <button \r\n          class=\"btn ${btnClass} w-100 text-start d-flex justify-content-between align-items-start dropdown-toggle dropdown-toggle-sources\" \r\n          type=\"button\" \r\n          id=\"sourceDropdown\" \r\n          data-bs-toggle=\"dropdown\" \r\n          aria-expanded=\"false\">\r\n          <span id=\"sourceDropdownLabel\" class='sourceDropdownLabel'></span>\r\n          <span class=\"dropdown-toggle-icon dropdown-toggle-icon-s\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu ${dropdownMenuClass} w-100 p-2\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 10000; max-height: 300px; overflow-y: auto;\">\r\n          \r\n          <!-- Select All -->\r\n          <li class=\"dropdown-item p-2 ${itemClass}\" data-checkbox-id=\"selectAll\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n              <label class=\"form-check-label w-100\" for=\"selectAll\">Select All</label>\r\n            </div>\r\n          </li>\r\n\r\n          <!-- Grouped Sources -->\r\n          ${Object.keys(groupedSources)\r\n      .map((group, groupIndex) => {\r\n        const groupItems = groupedSources[group]\r\n          .map(\r\n            (source, index) => `\r\n                  <li class=\"dropdown-item ps-4 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"source-${groupIndex}-${index}\">\r\n                    <div class=\"form-check\">\r\n                      <input class=\"form-check-input source-checkbox\" type=\"checkbox\" value=\"${source.SourceName}\" id=\"source-${groupIndex}-${index}\">\r\n                      <label class=\"form-check-label w-100 text-prewrap\" for=\"source-${groupIndex}-${index}\">${source.SourceName}</label>\r\n                    </div>\r\n                  </li>\r\n                `\r\n          )\r\n          .join('');\r\n\r\n        return `\r\n                <!-- Group Header -->\r\n                <li class=\"dropdown-item p-2 ${itemClass}\" data-group-id=\"group-${groupIndex}\">\r\n                  <div class=\"form-check\">\r\n                    <input class=\"form-check-input group-checkbox\" type=\"checkbox\" value=\"${group}\" id=\"group-${groupIndex}\">\r\n                    <label class=\"form-check-label fw-bold\" for=\"group-${groupIndex}\">${group}</label>\r\n                  </div>\r\n                </li>\r\n                ${groupItems}\r\n              `;\r\n      })\r\n      .join('')}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-3 d-flex justify-content-between\">\r\n      <span id=\"cancel-src-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n      <button id=\"ok-src-btn\" class=\"btn btn-primary\">Save</button>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  const accordionBody = document.getElementById(`chatFooter`);\r\n  accordionBody.innerHTML = multiSelectHTML;\r\n\r\n  let selectedSources = [];\r\n\r\n  const selectAllCheckbox = document.getElementById(`selectAll`);\r\n  const groupCheckboxes = document.querySelectorAll(`.group-checkbox`);\r\n  const individualCheckboxes = document.querySelectorAll(`.source-checkbox`);\r\n  const sourceDropdownLabel = document.getElementById(`sourceDropdownLabel`);\r\n\r\n  function updateLabel() {\r\n    sourceDropdownLabel.innerText = selectedSources.length > 0 ? selectedSources.join(', ') : ' ';\r\n  }\r\n\r\n  // Select All logic\r\n  selectAllCheckbox.addEventListener(\"change\", function () {\r\n    const checked = this.checked;\r\n    groupCheckboxes.forEach(cb => cb.checked = checked);\r\n    individualCheckboxes.forEach(cb => {\r\n      cb.checked = checked;\r\n      if (checked && !selectedSources.includes(cb.value)) {\r\n        selectedSources.push(cb.value);\r\n      }\r\n      if (!checked) {\r\n        selectedSources = [];\r\n      }\r\n    });\r\n    updateLabel();\r\n  });\r\n\r\n  // Group checkbox logic\r\n  groupCheckboxes.forEach(groupCb => {\r\n    groupCb.addEventListener(\"change\", function () {\r\n      const groupIndex = this.id.split('-')[1];\r\n      const groupItems = document.querySelectorAll(`[data-checkbox-id^=\"source-${groupIndex}-\"] .source-checkbox`);\r\n\r\n      groupItems.forEach(cb => {\r\n        cb.checked = this.checked;\r\n        if (this.checked && !selectedSources.includes(cb.value)) {\r\n          selectedSources.push(cb.value);\r\n        }\r\n        if (!this.checked) {\r\n          selectedSources = selectedSources.filter(s => s !== cb.value);\r\n        }\r\n      });\r\n\r\n      // Update Select All state\r\n      selectAllCheckbox.checked = Array.from(individualCheckboxes).every(child => child.checked);\r\n      updateLabel();\r\n    });\r\n  });\r\n\r\n  // Individual checkbox logic\r\n  individualCheckboxes.forEach(cb => {\r\n    cb.addEventListener(\"change\", function () {\r\n      if (cb.checked) {\r\n        if (!selectedSources.includes(cb.value)) selectedSources.push(cb.value);\r\n      } else {\r\n        selectedSources = selectedSources.filter(s => s !== cb.value);\r\n      }\r\n\r\n      // Update parent group checkbox\r\n      const groupIndex = cb.id.split(\"-\")[1];\r\n      const groupItems = document.querySelectorAll(`[data-checkbox-id^=\"source-${groupIndex}-\"] .source-checkbox`);\r\n      const groupCheckbox = document.getElementById(`group-${groupIndex}`);\r\n      groupCheckbox.checked = Array.from(groupItems).every(child => child.checked);\r\n\r\n      // Update Select All checkbox\r\n      selectAllCheckbox.checked = Array.from(individualCheckboxes).every(child => child.checked);\r\n\r\n      updateLabel();\r\n    });\r\n  });\r\n\r\n  // Initialize with pre-selected sources\r\n  if (tag.Sources && tag.Sources.length > 0) {\r\n    individualCheckboxes.forEach(cb => {\r\n      if (tag.Sources.includes(cb.value)) {\r\n        cb.checked = true;\r\n        selectedSources.push(cb.value);\r\n      }\r\n    });\r\n\r\n    // Update group checkboxes\r\n    groupCheckboxes.forEach(groupCb => {\r\n      const groupIndex = groupCb.id.split(\"-\")[1];\r\n      const groupItems = document.querySelectorAll(`[data-checkbox-id^=\"source-${groupIndex}-\"] .source-checkbox`);\r\n      groupCb.checked = Array.from(groupItems).every(child => child.checked);\r\n    });\r\n\r\n    // Update Select All\r\n    selectAllCheckbox.checked = Array.from(individualCheckboxes).every(child => child.checked);\r\n    updateLabel();\r\n  }\r\n\r\n  // Save\r\n  document.getElementById(`ok-src-btn`).addEventListener(\"click\", function () {\r\n    tag.Sources = [...selectedSources];\r\n    const receivedEntry = sourceList.filter(source => selectedSources.includes(source.SourceName));\r\n    tag.TempSourceValue = receivedEntry.map((item) => {\r\n      return item.VectorID ? String(item.VectorID) : item.SourceValue;\r\n    });\r\n\r\n    tag.SourceName = receivedEntry.map((item) => {\r\n      return item.SourceName;\r\n    });\r\n\r\n    tag.SourceValueID = receivedEntry.map((item) => {\r\n      return String(item.VectorID);\r\n    });\r\n\r\n    tag.SourceValue = receivedEntry\r\n      .map(source => source.SourceValue);\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n\r\n  // Cancel\r\n  document.getElementById(`cancel-src-btn`).addEventListener(\"click\", function () {\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n}\r\n\r\n\r\n\r\nasync function loadPromptTemplates() {\r\n  try {\r\n    const data = await getAllPromptTemplates(jwt);\r\n    if (data.Status && data.Data) {\r\n      promptBuilderList = data.Data;\r\n    }\r\n    // Do something with the data\r\n  } catch (error) {\r\n    console.error('Error fetching prompt templates:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function logBookmarksInSelection() {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n\r\n    // Get bookmarks in the selection\r\n    let bookmarks = range.getBookmarks(); // Returns ClientResult<string[]>\r\n\r\n    await context.sync(); // Ensure bookmarks are retrieved\r\n    if (bookmarks.value.length > 0) {\r\n      selectedNames = []\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n      }\r\n      bookmarks.value.forEach((bookmarkName) => {\r\n        let processedName = bookmarkName.split(\"_Split_\")[0];\r\n        processedName = processedName.replace(/_/g, \" \");\r\n        selectedNames.push(processedName)\r\n        const container = document.getElementById('tags-in-selected-text');\r\n        if (container) {\r\n          renderSelectedTags(selectedNames, availableKeys)// Trigger function when selection changes\r\n        }\r\n      });\r\n    } else {\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-block');\r\n        badgeWrapper.classList.add('d-none');\r\n      }\r\n    }\r\n  });\r\n}\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","baseUrl","async","updatePromptTemplate","payload","jwt","response","fetch","method","headers","body","JSON","stringify","ok","json","toaster","message","type","getElementById","innerHTML","setTimeout","navTabs","insertLineWithHeadingStyle","range","line","Word","run","style","text","startsWith","substring","trim","paragraph","insertParagraph","InsertLocation","before","regex","match","lastIndex","exec","index","insertText","end","content","bold","italic","underline","formattedRange","font","UnderlineType","single","none","context","sync","removeQuotes","value","copyText","tempTextArea","createElement","appendChild","select","execCommand","removeChild","switchToAddTag","querySelector","classList","remove","add","updateEditorFinalTable","data","tables","parsedContent","parse","push","jsonToHtmlTable","error","console","tableIndex","jsonData","Array","isArray","Set","rows","flattenObject","prefix","result","keys","forEach","newKey","map","item","entries","k","v","join","flattenedItem","table","header","row","chatfooter","tag","theme","Sources","renderSelectedTags","selectedNames","availableKeys","badgeWrapper","name","toLowerCase","lowerName","find","aiTag","mention","AIFlag","ID","DisplayName","badge","className","cursor","addEventListener","displayName","bookmarks","getSelection","getBookmarks","targetBookmarkName","bookmark","split","getBookmarkRangeOrNullObject","load","isNullObject","selectMatchingBookmarkFromSelection","appBody","generateCheckboxHistory","then","html","applyThemeClasses","isDark","isLight","safeApplyClass","selector","darkClasses","lightClasses","elements","querySelectorAll","darkClassList","lightClassList","elem","swicthThemeIcon","icon","sessionStorage","setItem","loadHomepage","searchBoxClass","searchBox","suggestionList","updateSuggestions","searchTerm","replaceChildren","filteredMentions","filter","includes","nonAITags","aiTags","createSection","labelText","mentions","isAISection","themeClasses","itemClass","labelClass","label","textContent","listItem","onclick","catch","word","selection","newSelection","doc","DOMParser","parseFromString","EditorValue","bodyNodes","from","childNodes","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","element","tagName","maxCols","Math","max","reduce","sum","cell","parseInt","getAttribute","insertTable","after","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","innerText","colspan","rowspan","getCell","elementText","IsApplied","nextLineParagraph","replaceMention","ComponentKeyDataType","debounceTimeout","clearTimeout","isPendingResponse","addGenAITags","applyAITagFn","FilteredReportHeadAIHistoryList","fetchAIHistory","history","closeBtnClass","closeBar","chatBody","chatList","promptclass","globalPromptUpdate","UserRole","UserRoleEntityAccessList","UserRoleEntity","chat","includeSaveIcon","UserRoleAccessID","Prompt","Selected","Response","generateChatHistoryHtml","chatFooterHtml","initializeAIHistoryEvents","container","Confirmationpopup","setAttribute","updatedTag","sources","SourceValue","sourceList","source","Number","VectorID","popupData","Data","Evidences","Name","UserValue","selectedData","FileName","PageNumber","Sentence","DataModalPopup","checkbox","isChecked","event","target","checked","_","otherIndex","otherCheckbox","responseContainer","updateAiHistory","ReportHeadAIHistoryList","historyList","unshift","finalResponse","FormattedResponse","currentlySelected","some","currentTag","isTable","aiTagList","err","bookmarkName","Date","getTime","markers","paragraphs","start","items","getRange","expandTo","insertBookmark","log","afterBookmark","delete","insertTagPrompt","textareaValue","sendPrompt","createMultiSelectDropdown","mentionDropdownFn","filteredGlossaryTerm","storedUrl","documentID","organizationName","initialised","promptBuilderList","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","capturedFormatting","emptyFormat","isNoFormatTextAvailable","clientId","userId","clientList","currentYear","getFullYear","login","sessionToken","getItem","loadLoginPage","toggle","handleLogin","preventDefault","organization","username","password","toLocaleLowerCase","ClientName","Username","Password","loginUser","Status","ResponseStatus","Token","showLoginError","errorDiv","display","fetchDocument","action","getReportById","logoheader","SourceTypeList","SourceName","decodeURIComponent","transformDocumentName","ClientID","aiGroup","Group","GroupKey","GroupKeyAll","InitialTable","getAllClients","warn","fetchClients","getAllPromptTemplates","loadPromptTemplates","removeMatchingContentControls","loadGlossary","fetchGlossary","formatOptionsDisplay","htmlBody","displayCapturedFormatting","removeFormattedText","removeOptionsConfirmation","clear","logout","glossaryBtn","contains","clearCapturedFormatting","Bold","Underline","Size","removeFormatBtn","captureFormatting","emptyFormatCheckbox","disabled","formatList","Italic","size","highlightColor","color","textRanges","tagId","getAiHistory","SourceValueID","selectedSources","list","TempSourceValue","prompt","iconelement","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","ThreadID","AssistantID","Container","PromptType","addAiHistory","searchResults","search","matchCase","matchWholeWord","applyglossary","bodyText","fetchGlossaryTemplate","GlossaryTemplate","sort","ClinicalTerm","processedTerms","filteredTerms","term","biggerTerm","foundRanges","Map","searchPromises","contentControls","has","set","control","contentControl","insertContentControl","title","appearance","ContentControlAppearance","boundingBox","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","loader","selectedWords","words","displayElement","groupedTerms","LayTerm","clinicalTerm","mainBox","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","selectedClient","sponsorOptions","client","isSelectedClient","selected","addtagbody","preview","templateText","fieldsList","templateSelect","applyBtn","resetBtn","previewDiv","fieldsContainer","previewContainer","templateError","replaceKeywordsManually","keywordMap","field","id","Label","keyword","HTMLInputElement","HTMLSelectElement","insertValue","RegExp","option","toString","templateId","getPromptTemplateById","Template","div","Type","input","PromptTemplateOptionList","opt","Text","Option","selectedIndex","promptTextarea","setupPromptBuilderUI","form","promptField","nameField","descriptionField","saveGloballyCheckbox","availableForAllCheckbox","sponsorDropdownButton","sponsorDropdownItems","updateDropdownLabel","selectedOptions","cb","parentElement","valid","selectedSponsors","isAvailableForAll","isSaveGlobally","aigroup","formData","Description","GroupKeyClient","AllClient","SaveGlobally","UserDefined","ComponentKeyDataTypeID","ComponentKeyDataAccessID","DocumentTypeID","SourceTypeID","ReportHeadGroupID","ReportHeadSourceID","cancelBtnGenAi","addGroupKey","createTextGenTag","checkAndDisableSponsors","enableSponsors","stopPropagation","textareaId","DropdownId","highlightedIndex","mentionDropdown","updateHighlightedItem","totalItems","highlightedItem","scrollIntoView","behavior","block","cursorPosition","selectionStart","textBeforeCursor","slice","lastHashtag","lastIndexOf","query","filterMentions","editorValue","textareaRect","getBoundingClientRect","left","bottom","selectedItem","selectMention","matches","textarea","currentValue","textBefore","textAfter","lastHashPosition","updatedTextBefore","newCursorPosition","setSelectionRange","parts","btnClass","dropdownMenuClass","groupedSources","groups","SourceType","multiSelectHTML","group","groupIndex","groupItems","accordionBody","selectAllCheckbox","groupCheckboxes","individualCheckboxes","sourceDropdownLabel","updateLabel","groupCb","s","every","child","receivedEntry","onReady","info","host","HostType","properties","customProperties","property","orgName","retrieveDocumentProperties","processedName","logBookmarksInSelection","URL"],"sourceRoot":""}