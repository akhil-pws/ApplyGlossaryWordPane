{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/index.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/data.ts","webpack://office-addin-taskpane/./src/taskpane/api.ts","webpack://office-addin-taskpane/./src/taskpane/components/bodyelements.ts","webpack://office-addin-taskpane/./src/taskpane/functions.ts","webpack://office-addin-taskpane/./src/taskpane/components/home.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./css/bootstrap3.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Link addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" integrity=\\\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> <\" + \"script src=\\\"https://kit.fontawesome.com/5aabee8816.js\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\" integrity=\\\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <div id=\\\"header-nav\\\"> <div class=\\\"logo-header d-flex w-100 justify-content-between align-items-center bg-light\\\" id=\\\"logo-header\\\"> </div> </div> <main id=\\\"app-body\\\" class=\\\"d-block mh-34\\\"> <div id=\\\"ai-tag-list-container\\\" class=\\\"accordion\\\"></div> </main> <section id=\\\"confirmation-popup\\\"></section> <section id=\\\"toastr\\\"></section> <div id=\\\"footer\\\" class=\\\"py-2 text-center footer\\\"> </div> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","const dataUrl='https://plsdevapp.azurewebsites.net'\r\nconst storeUrl='https://akhil-pws.github.io/ApplyGlossaryWordPane'\r\nconst versionLink='2.0.2'\r\nexport {dataUrl,storeUrl,versionLink};","import { dataUrl } from \"./data\";\r\n\r\n// api.ts\r\nconst baseUrl = dataUrl // Set your actual base URL\r\n\r\nexport async function loginUser(organization: string, username: string, password: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/user/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      ClientName: organization,\r\n      Username: username,\r\n      Password: password\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\n// api.ts\r\n\r\nexport async function getReportById(documentID: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/id/${documentID}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAllClients(userId: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/client/all/${userId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAiHistory(tagId: string, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/${tagId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${jwt}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function updateGroupKey(tag: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/head/groupkey`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(tag)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function addAiHistory(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/add`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function updateAiHistory(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/ai-history/update`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function fetchGlossaryTemplate(clientId: string, bodyText: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/glossary-template/client-id/${clientId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(bodyText)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function addGroupKey(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/report/group-key/add`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getAllPromptTemplates(jwt): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/prompt-template/all`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\n\r\nexport async function getPromptTemplateById(id: string, jwt): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/prompt-template/${id}/data`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function updatePromptTemplate(payload: any, jwt: string): Promise<any> {\r\n  const response = await fetch(`${baseUrl}/api/groupkey/update-prompt`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${jwt}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok.');\r\n  }\r\n\r\n  const data: any = await response.json();\r\n  return data;\r\n}\r\n","import { theme } from \"../taskpane\";\r\n\r\nfunction addtagbody(sponsorOptions) {\r\n  const body = `<div class=\"modal-dialog\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-body p-3 pt-0\">\r\n      <form id=\"genai-form\" autocomplete=\"off\" novalidate>\r\n        <!-- Name Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"name\" class=\"form-label\"><span class=\"text-danger\">*</span> Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" required>\r\n          <div class=\"invalid-feedback\">Name is required.</div>\r\n          <div id=\"submition-error\" class=\"invalid-feedback\" style=\"display: none;\"></div>\r\n\r\n        </div>\r\n\r\n        <!-- Description Field -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" rows=\"6\"></textarea>\r\n        </div>\r\n\r\n        <!-- Prompt Field -->\r\n        <div class=\"mb-3 prompt-box\">\r\n          <label for=\"prompt\" class=\"form-label\"><span class=\"text-danger\">*</span> Prompt \r\n            <small class=\"text-secondary\">(Note: Use # tag for content suggestions)</small>\r\n          </label>\r\n          <textarea class=\"form-control\" id=\"prompt\" rows=\"6\"  required></textarea>\r\n          <div class=\"invalid-feedback\">Prompt is required.</div>\r\n          <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n        </div>\r\n\r\n        <!-- Save Globally Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"saveGlobally\">\r\n          <label class=\"form-check-label\" for=\"saveGlobally\">Save Globally</label>\r\n        </div>\r\n\r\n        <!-- Available to All Sponsors Checkbox -->\r\n        <div class=\"form-check mb-3\">\r\n          <input type=\"checkbox\" class=\"form-check-input\" id=\"isAvailableForAll\" disabled>\r\n          <label class=\"form-check-label\" for=\"isAvailableForAll\">Available to All Sponsors</label>\r\n        </div>\r\n\r\n        <!-- Sponsor Dropdown -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"sponsor\" class=\"form-label\"><span class=\"text-danger\">*</span> Sponsor</label>\r\n          <div class=\"dropdown w-100\">\r\n            <button \r\n              class=\"btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle\" \r\n              type=\"button\" \r\n              id=\"sponsorDropdown\" \r\n              data-bs-toggle=\"dropdown\" \r\n              aria-expanded=\"false\" \r\n              disabled>\r\n              <span id=\"sponsorDropdownLabel\">Select Sponsors</span>\r\n              <span class=\"dropdown-toggle-icon\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu w-100 p-2\" aria-labelledby=\"sponsorDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\r\n              <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n                  <label class=\"form-check-label\" for=\"selectAll\">Select All</label>\r\n                </div>\r\n              </li>\r\n              ${sponsorOptions}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-btn-gen-ai\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"text-gen-save\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n  return body\r\n}\r\n\r\n\r\nfunction Confirmationpopup(content: string) {\r\n  const body = `<div class=\"modal show d-block\" tabindex=\"-1\" style=\"background: rgba(0,0,0,0.5);\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title fw-bold\">Confirmation</h5>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <p>${content}</p>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-link text-primary\" id=\"confirmation-popup-cancel\">Cancel</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" id=\"confirmation-popup-confirm\">Ok</button>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>`\r\n\r\n\r\n  return body;\r\n}\r\n\r\n\r\nfunction toaster(message: string, type:string) {\r\n  const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';\r\n  // const color = type === 'success' ? '#28a745' : '#dc3545';\r\n  const color = `#ffffff`\r\n  const body = `<div class=\"toast show\" style=\"position: fixed; top: 10px; right: 10px; z-index: 1050; max-width: fit-content; background-color: #808080; color: #ffffff;\">\r\n    <div class=\"toast-body\">\r\n         <i class=\"fa ${icon} me-2\" style=\"color: ${color};\"></i> ${message}\r\n    </div>\r\n  </div>`;\r\n\r\n  document.getElementById('toastr').innerHTML = body;\r\n  setTimeout(() => {\r\n    document.getElementById('toastr').innerHTML = ``;\r\n  }, 4000);\r\n}\r\n\r\nfunction logoheader(storedUrl) {\r\n  const themeicon = theme === 'Dark' ? 'fa-sun' : 'fa-moon'\r\n  const body = `\r\n    <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n    <div class=\"icon-nav me-3\">\r\n      <i class=\"fa fa-home c-pointer me-3\" title=\"Home\" id=\"home\"></i>\r\n      <div class=\"dropdown d-inline\">\r\n        <i class=\"fa fa-tools c-pointer me-3\" id=\"settingsDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" title=\"Settings\"></i>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"settingsDropdown\">\r\n          <li>\r\n            <a class=\"dropdown-item\" href=\"#\" id=\"define-formatting\">\r\n              <i class=\"fa fa-sliders-h me-2\" aria-hidden=\"true\"></i> Define Formatting\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"glossary\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-book me-2\" aria-hidden=\"true\"></i> Apply Glossary\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a class=\"dropdown-item disabled-link\" href=\"#\" id=\"removeFormatting\" tabindex=\"-1\" aria-disabled=\"true\">\r\n              <i class=\"fa fa-eraser me-2\" aria-hidden=\"true\"></i> Remove Formatting\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Theme Toggle Icon -->\r\n      <span id=\"theme-toggle\"><i class=\"fa ${themeicon} c-pointer me-3\" title=\"Toggle Theme\"></i></span>\r\n\r\n      <i class=\"fa fa-sign-out c-pointer me-3\" id=\"logout\" title=\"Logout\"></i>\r\n    </div>    \r\n  `\r\n  return body;\r\n}\r\n\r\nconst navTabs = `<ul class=\"nav nav-tabs\" id=\"tabList\" role=\"tablist\">\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link active\" id=\"tag-tab\" data-bs-toggle=\"tab\" href=\"#tag\" role=\"tab\">Tag</a>\r\n  </li>\r\n  <li class=\"nav-item\">\r\n    <a class=\"nav-link\" id=\"prompt-tab\" data-bs-toggle=\"tab\" href=\"#prompt\" role=\"tab\">Prompt builder</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content p-3 border border-top-0\">\r\n  <div class=\"tab-pane fade show active\" id=\"add-tag-body\" role=\"tabpanel\" aria-labelledby=\"tag-tab\">\r\n  </div>\r\n  <div class=\"tab-pane fade\" id=\"add-prompt-template\" role=\"tabpanel\" aria-labelledby=\"prompt-tab\">\r\n  </div>\r\n</div>\r\n`\r\n\r\n\r\n\r\n\r\n\r\nexport { navTabs, addtagbody, logoheader, Confirmationpopup,toaster };","import { toaster } from \"./components/bodyelements\";\r\nimport { generateCheckboxHistory } from \"./components/home\";\r\nimport { theme, UserRole } from \"./taskpane\";\r\n\r\nexport async function insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  await Word.run(async (context) => {\r\n    let style = \"Normal\";\r\n    let text = line;\r\n\r\n    if (line.startsWith('###### ')) {\r\n      style = \"Heading 6\";\r\n      text = line.substring(7).trim();\r\n    } else if (line.startsWith('##### ')) {\r\n      style = \"Heading 5\";\r\n      text = line.substring(6).trim();\r\n    } else if (line.startsWith('#### ')) {\r\n      style = \"Heading 4\";\r\n      text = line.substring(5).trim();\r\n    } else if (line.startsWith('### ')) {\r\n      style = \"Heading 3\";\r\n      text = line.substring(4).trim();\r\n    } else if (line.startsWith('## ')) {\r\n      style = \"Heading 2\";\r\n      text = line.substring(3).trim();\r\n    } else if (line.startsWith('# ')) {\r\n      style = \"Heading 1\";\r\n      text = line.substring(2).trim();\r\n    }\r\n\r\n    // Create an empty paragraph with the desired style\r\n    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n    paragraph.style = style;\r\n\r\n    // Combine all markdown patterns in a single regex\r\n    const regex = /(\\*\\*(.+?)\\*\\*)|(\\*(.+?)\\*)|(_(.+?)_)/g;\r\n    let lastIndex = 0;\r\n    let match;\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n      // Insert plain text before the match\r\n      if (match.index > lastIndex) {\r\n        paragraph.insertText(text.substring(lastIndex, match.index), Word.InsertLocation.end);\r\n      }\r\n\r\n      // Extract the actual content and formatting\r\n      let content = \"\";\r\n      let bold = false;\r\n      let italic = false;\r\n      let underline = false;\r\n\r\n      if (match[1]) { // **bold**\r\n        content = match[2];\r\n        bold = true;\r\n      } else if (match[3]) { // *italic*\r\n        content = match[4];\r\n        italic = true;\r\n      } else if (match[5]) { // _underline_\r\n        content = match[6];\r\n        underline = true;\r\n      }\r\n\r\n      const formattedRange = paragraph.insertText(content, Word.InsertLocation.end);\r\n      formattedRange.font.bold = bold;\r\n      formattedRange.font.italic = italic;\r\n      formattedRange.font.underline = underline ? Word.UnderlineType.single : Word.UnderlineType.none;\r\n\r\n      lastIndex = regex.lastIndex;\r\n    }\r\n\r\n    // Insert any remaining text after last formatting\r\n    if (lastIndex < text.length) {\r\n      paragraph.insertText(text.substring(lastIndex), Word.InsertLocation.end);\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\nexport function removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\n\r\n\r\nexport function copyText(text: string) {\r\n  // Copy text to clipboard logic\r\n  const tempTextArea = document.createElement('textarea');\r\n  tempTextArea.value = text;\r\n  document.body.appendChild(tempTextArea);\r\n  tempTextArea.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(tempTextArea);\r\n  toaster('Copied to clipboard successfully!', 'success')\r\n\r\n}\r\n\r\n\r\nexport function switchToPromptBuilder() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('prompt-tab').classList.add('active');\r\n  document.getElementById('add-prompt-template').classList.add('show', 'active');\r\n}\r\n\r\n\r\nexport function switchToAddTag() {\r\n  // Remove active class from current tab\r\n  document.querySelector('.nav-link.active')?.classList.remove('active');\r\n  document.querySelector('.tab-pane.show.active')?.classList.remove('show', 'active');\r\n\r\n  // Add active class to Prompt Builder tab\r\n  document.getElementById('tag-tab').classList.add('active');\r\n  document.getElementById('add-tag-body').classList.add('show', 'active');\r\n}\r\n\r\nexport function updateEditorFinalTable(data) {\r\n  const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n  let match;\r\n  let tables = [];\r\n\r\n  while ((match = regex.exec(data)) !== null) {\r\n    try {\r\n      const parsedContent = JSON.parse(match[1]);\r\n      tables.push(jsonToHtmlTable(parsedContent));\r\n    } catch (error) {\r\n      console.error(\"Failed to parse JSON:\", error, match[1]);\r\n    }\r\n  }\r\n\r\n  let tableIndex = 0;\r\n  return data.replace(regex, () => tables[tableIndex++] || \"\");\r\n}\r\n\r\nfunction jsonToHtmlTable(jsonData) {\r\n  if (!jsonData || (Array.isArray(jsonData) && jsonData.length === 0)) {\r\n    return '<p>No data available</p>';\r\n  }\r\n\r\n  let headers = new Set();\r\n  let rows = [];\r\n\r\n  function flattenObject(obj, prefix = \"\", result = {}) {\r\n    Object.keys(obj).forEach(key => {\r\n      const value = obj[key];\r\n      const newKey = prefix ? `${prefix} > ${key}` : key;\r\n\r\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n        flattenObject(value, newKey, result);\r\n      } else if (Array.isArray(value)) {\r\n        result[newKey] = value.map(item => {\r\n          return typeof item === 'object'\r\n            ? Object.entries(item).map(([k, v]) => `<strong>${k}:</strong> ${v}`).join('<br>')\r\n            : item;\r\n        }).join('<br>');\r\n      } else {\r\n        result[newKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  if (!Array.isArray(jsonData)) {\r\n    jsonData = Object.entries(jsonData).map(([key, value]) => ({ [key]: value }));\r\n  }\r\n\r\n  jsonData.forEach(item => {\r\n    let flattenedItem = flattenObject(item);\r\n    Object.keys(flattenedItem).forEach(key => headers.add(key));\r\n    rows.push(flattenedItem);\r\n  });\r\n\r\n  let table = '<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">';\r\n  table += '<tr>' + [...headers].map(header => `<th>${header}</th>`).join('') + '</tr>';\r\n  rows.forEach(row => {\r\n    table += '<tr>' + [...headers].map(header => `<td>${row[header]}</td>`).join('') + '</tr>';\r\n  });\r\n\r\n  table += '</table>';\r\n  return table;\r\n}\r\n\r\n\r\n\r\nexport function generateChatHistoryHtml(chatList: any[]): string {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const globalPromptUpdate = UserRole.UserRoleEntityAccessList.find(\r\n    (item: any) => item.UserRoleEntity === 'Global Prompt Update'\r\n  );\r\n\r\n  return chatList.map((chat, index) => {\r\n    const includeSaveIcon = globalPromptUpdate?.UserRoleAccessID === 3;\r\n\r\n    return `\r\n      <div class=\"row chat-entry m-0 p-0\">\r\n        <div class=\"col-md-12 mt-2 p-2\">\r\n          <div class=\"d-flex justify-content-between align-items-start\">\r\n            <!-- Prompt Box -->\r\n            <div class=\"form-control h-34 d-flex align-items-center dynamic-height prompt-text ${promptclass}\" style=\"width: 95%;\">\r\n              ${chat.Prompt}\r\n            </div>\r\n\r\n            <!-- Icons Stack -->\r\n            <div class=\"d-flex flex-column align-items-center ms-2\">\r\n              <i class=\"fa fa-copy text-secondary c-pointer mb-2\" title=\"Copy Prompt\" id=\"copyPrompt-${index}\"></i>\r\n              ${includeSaveIcon ? `<i class=\"fa fa-save text-secondary c-pointer\" title=\"Save Prompt\" id=\"savePrompt-${index}\"></i>` : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-12 mb-2 p-2 d-flex\">\r\n          <span class=\"d-flex align-items-baseline w-100\">\r\n            <div class=\"flex-grow-1 c-pointer ai-response-container px-2 pe-3 pt-3 ai-selected-response\" id=\"responseContainer-${index}\">\r\n              <input\r\n                class=\"form-check-input c-pointer me-2 response-checkbox\"\r\n                type=\"checkbox\"\r\n                id=\"checkbox-${index}\"\r\n                ${chat.Selected === 1 ? 'checked' : ''}>\r\n              <span id=\"responseText-${index}\">${chat.Response}</span>\r\n              <i class=\"fa fa-copy text-secondary c-pointer ms-2\"\r\n                title=\"Copy Response\"\r\n                id=\"copyResponse-${index}\"></i>\r\n            </div>\r\n          </span>\r\n        </div>\r\n      </div>`;\r\n  }).join('');\r\n}\r\n\r\n\r\n\r\nexport function chatfooter(tag: any) {\r\n  const promptclass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n  const tooltipButton = tag.Sources && tag.Sources.length > 0\r\n    ? `  <span class=\"tooltiptext\">${tag.Sources}</span>`\r\n    : '<span class=\"tooltiptext\">Source</span>';\r\n  return ` <textarea class=\"form-control ${promptclass}\"\r\n                      rows=\"5\"\r\n                      id=\"chatInput\"\r\n                      ></textarea>\r\n            <div id=\"mention-dropdown\" class=\"dropdown-menu\"></div>\r\n            <div class=\"d-flex flex-column align-self-end me-3\">\r\n              <button class=\"btn btn-secondary text-light ms-2 mb-2 ngb-tooltip\" id=\"insertTagButton\">\r\n                <span class=\"tooltiptext\">Insert</span>\r\n                <i class=\"fa fa-plus text-light c-pointer\"></i>\r\n              </button>\r\n              <button class=\"btn btn-secondary ms-2 mb-2 text-white ngb-tooltip\" id=\"changeSourceButton\">\r\n              ${tooltipButton}\r\n                <i class=\"fa fa-file-lines text-white\"></i>\r\n              </button>\r\n              <button type=\"submit\" class=\"btn btn-primary bg-primary-clr ms-2 text-white ngb-tooltip\" id=\"sendPromptButton\">\r\n                <span class=\"tooltiptext\">Send</span>\r\n                <i class=\"fa fa-paper-plane text-white\"></i>\r\n              </button>\r\n            </div>`\r\n}\r\n\r\nexport function renderSelectedTags(selectedNames, availableKeys) {\r\n  const badgeWrapper = document.getElementById('tag-badge-wrapper');\r\n  badgeWrapper.innerHTML = '';\r\n  // Filter out duplicates (case-insensitive)\r\n  const uniqueNames = [...new Set(\r\n    selectedNames.map(name => name.toLowerCase())\r\n  )].map(lowerName =>\r\n    selectedNames.find(name => name.toLowerCase() === lowerName)\r\n  );\r\n\r\n\r\n  uniqueNames.forEach(name => {\r\n    let aiTag;\r\n\r\n    if (/^ID\\d+$/i.test(name)) {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && `id${mention.ID}`.toLowerCase() === name.toLowerCase()\r\n      );\r\n    } else {\r\n      aiTag = availableKeys.find(\r\n        mention => mention.AIFlag === 1 && mention.DisplayName.toLowerCase() === name.toLowerCase()\r\n      );\r\n    }\r\n    const badge = document.createElement('span');\r\n    badge.className = 'badge rounded-pill border bg-white text-dark px-3 py-2 shadow-sm d-flex align-items-center badge-clickable';\r\n    badge.style.cursor = 'pointer';\r\n    badge.innerHTML = `${aiTag.DisplayName} <i class=\"fa-solid fa-microchip-ai ms-2 text-muted\" aria-label=\"AI Suggested\"></i>`;\r\n\r\n    badge.addEventListener('click', async () => {\r\n      await selectMatchingBookmarkFromSelection(name);\r\n\r\n      if (aiTag) {\r\n        const appBody = document.getElementById('app-body');\r\n        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n\r\n        generateCheckboxHistory(aiTag).then(html => {\r\n          appBody.innerHTML = html;\r\n        });\r\n      }\r\n    });\r\n\r\n\r\n    badgeWrapper.appendChild(badge);\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function applyThemeClasses(theme) {\r\n  const isDark = theme === 'Dark';\r\n  const isLight = theme === 'Light';\r\n\r\n  const safeApplyClass = (selector, darkClasses, lightClasses) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    const darkClassList = darkClasses.split(' ');\r\n    const lightClassList = lightClasses.split(' ');\r\n\r\n    elements.forEach(elem => {\r\n      if (!elem) return;\r\n      // Remove all related theme classes\r\n      elem.classList.remove(...darkClassList);\r\n      elem.classList.remove(...lightClassList);\r\n      // Add only the relevant set\r\n      if (isDark) elem.classList.add(...darkClassList);\r\n      if (isLight) elem.classList.add(...lightClassList);\r\n    });\r\n  };\r\n\r\n  // Now use it for different elements\r\n  safeApplyClass('#app-body', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('#search-box', 'bg-secondary text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-menu', 'bg-dark text-light border-light', 'bg-white text-dark border');\r\n  safeApplyClass('.list-group-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  safeApplyClass('.dropdown-toggle', 'bg-dark text-light border-0', 'bg-white text-dark border');\r\n  safeApplyClass('.dropdown-item', 'bg-dark text-light', 'bg-white text-dark');\r\n  // container for the suggestion list\r\n  safeApplyClass(\r\n    '.list-group-item-action',\r\n    'bg-dark text-light list-hover-dark',\r\n    'bg-light text-dark list-hover-light'\r\n  );\r\n\r\n  safeApplyClass('#close-ai-window', 'fa-solid fa-circle-xmark bg-dark text-light', 'fa-solid fa-circle-xmark bg-light text-dark');\r\n  safeApplyClass('#chatInput', 'bg-secondary text-light', 'bg-white text-dark');\r\n  safeApplyClass('.prompt-text', 'bg-secondary text-light', 'bg-white text-dark');\r\n\r\n\r\n}\r\n\r\nexport function swicthThemeIcon() {\r\n  const themeToggle = document.getElementById('theme-toggle');\r\n  const icon = themeToggle.querySelector('i');\r\n\r\n  if (theme === 'Dark') {\r\n    icon.classList.remove('fa-moon');\r\n    icon.classList.add('fa-sun');\r\n  } else if (theme === 'Light') {\r\n    icon.classList.remove('fa-sun');\r\n    icon.classList.add('fa-moon');\r\n  }\r\n}\r\n\r\nasync function selectMatchingBookmarkFromSelection(displayName) {\r\n  return Word.run(async (context) => {\r\n    const selection = context.document.getSelection();\r\n    const bookmarks = selection.getBookmarks(); // ClientResult<string[]>\r\n    await context.sync();\r\n\r\n    const targetBookmarkName = bookmarks.value.find(bookmark => {\r\n      const cleanName = bookmark.split('_Split_')[0].replace(/_/g, ' ');\r\n      return cleanName.toLowerCase() === displayName.toLowerCase();\r\n    });\r\n\r\n    if (targetBookmarkName) {\r\n      const range = context.document.getBookmarkRangeOrNullObject(targetBookmarkName);\r\n      range.load('isNullObject');\r\n      await context.sync();\r\n\r\n      if (!range.isNullObject) {\r\n        range.select(); // Select the entire bookmark\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n","import { getPromptTemplateById, updateGroupKey, updateAiHistory, updatePromptTemplate } from \"../api\";\r\nimport { chatfooter, copyText, generateChatHistoryHtml, insertLineWithHeadingStyle, removeQuotes, renderSelectedTags, switchToAddTag, updateEditorFinalTable } from \"../functions\";\r\nimport { addGenAITags, aiTagList, applyAITagFn, availableKeys, createMultiSelectDropdown, fetchAIHistory, isPendingResponse, jwt, mentionDropdownFn, selectedNames, sendPrompt, theme } from \"../taskpane\";\r\nimport { Confirmationpopup, toaster } from \"./bodyelements\";\r\n\r\nlet preview = '';\r\n\r\n\r\nexport function loadHomepage(availableKeys) {\r\n    const searchBoxClass = theme === 'Dark' ? 'bg-secondary text-light' : 'bg-white text-dark';\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-3\">\r\n        <div class=\"d-flex justify-content-end px-2\">\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Action\r\n                </button>\r\n                <ul class=\"dropdown-menu\">\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"add-btn-tag\">\r\n                            <i class=\"fa fa-plus me-2\" aria-hidden=\"true\"></i> Add\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"dropdown-item\" href=\"#\" id=\"apply-btn-tag\">\r\n                            <i class=\"fa-solid fa-circle-check me-2\"></i> Apply\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group px-2 pt-2\">\r\n            <input type=\"text\" id=\"search-box\" class=\"form-control ${searchBoxClass}\" placeholder=\"Search Tags...\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <ul id=\"suggestion-list\" class=\"list-group mt-2 px-2\"></ul>\r\n        \r\n        <div id=\"tags-in-selected-text\" class=\"mt-2 px-2 selected-text-box d-none\">\r\n            <label class=\"form-label mb-2 fw-bold\">Tags in Selected Text</label>\r\n            <div class=\"tag-panel d-flex flex-wrap gap-2\" id=\"tag-badge-wrapper\"></div>\r\n        </div>\r\n    </div>`;\r\n\r\n    const searchBox = document.getElementById('search-box');\r\n    const suggestionList = document.getElementById('suggestion-list');\r\n\r\n    function updateSuggestions() {\r\n        const searchTerm = searchBox.value.trim().toLowerCase();\r\n        suggestionList.replaceChildren(); // Clear previous results\r\n        if (searchTerm === '') {\r\n            suggestionList.innerHTML = ''\r\n            return;\r\n        }\r\n\r\n        const filteredMentions = availableKeys.filter(mention =>\r\n            mention.DisplayName.toLowerCase().includes(searchTerm)\r\n        );\r\n\r\n        const nonAITags = filteredMentions.filter(m => m.AIFlag === 0);\r\n        const aiTags = filteredMentions.filter(m => m.AIFlag === 1);\r\n\r\n        const createSection = (labelText, mentions, isAISection = false) => {\r\n            if (mentions.length === 0) return;\r\n\r\n            // Define the theme classes based on the current theme\r\n            const themeClasses = theme === 'Dark'\r\n                ? { itemClass: 'bg-dark text-light list-hover-dark', labelClass: 'bg-dark text-light' }\r\n                : { itemClass: 'bg-light text-dark list-hover-light', labelClass: 'bg-light text-dark' };\r\n\r\n\r\n            // Create the section label\r\n            const label = document.createElement('li');\r\n            label.className = `list-group-item fw-bold text-secondary ${themeClasses.labelClass}`;\r\n            label.textContent = labelText;\r\n            suggestionList.appendChild(label);\r\n\r\n            // Loop through mentions and create the list items\r\n            mentions.forEach(mention => {\r\n                const listItem = document.createElement('li');\r\n                listItem.className = `list-group-item list-group-item-action ${themeClasses.itemClass}`; // Apply the theme classes\r\n\r\n                // Create the icon for AI or non-AI tags\r\n                const icon = isAISection\r\n                    ? `<i class=\"fa-solid fa-microchip-ai text-muted me-2\"></i>`\r\n                    : `<i class=\"fa-solid fa-layer-group text-muted me-2\"></i>`;\r\n\r\n                listItem.innerHTML = `${icon} ${mention.DisplayName}`;\r\n\r\n                listItem.onclick = () => {\r\n                    if (isAISection) {\r\n                        const appBody = document.getElementById('app-body');\r\n                        appBody.innerHTML = '<div class=\"text-muted p-2\">Loading...</div>';\r\n                        generateCheckboxHistory(mention).catch(error => {\r\n                            appBody.innerHTML = '<div class=\"text-danger p-2\">Error loading data</div>';\r\n                        }).then(html => {\r\n                            appBody.innerHTML = html;\r\n                        });\r\n                    } else {\r\n                        replaceMention(mention, mention.ComponentKeyDataType);\r\n                        suggestionList.replaceChildren();\r\n                    }\r\n                };\r\n\r\n                suggestionList.appendChild(listItem);\r\n            });\r\n        };\r\n\r\n        // Call the function for each section\r\n        createSection('Properties', nonAITags, false);\r\n        createSection('AI Tags', aiTags, true);\r\n\r\n    }\r\n    if (selectedNames.length > 0) {\r\n        const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n        renderSelectedTags(selectedNames, availableKeys);\r\n    }\r\n\r\n    // Add input event listener to the search box\r\n    let debounceTimeout;\r\n    searchBox.addEventListener('input', () => {\r\n        clearTimeout(debounceTimeout);\r\n        debounceTimeout = setTimeout(updateSuggestions, 300); // Delay input handling by 300ms\r\n    });\r\n\r\n    document.getElementById('add-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            addGenAITags();\r\n        }\r\n    });\r\n\r\n    document.getElementById('apply-btn-tag').addEventListener('click', () => {\r\n        if (!isPendingResponse) {\r\n            applyAITagFn();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n            let newSelection = selection;\r\n\r\n            if (type === 'TABLE') {\r\n                const parser = new DOMParser();\r\n                const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n                const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                await context.sync();\r\n\r\n                for (const node of bodyNodes) {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        const textContent = node.textContent?.trim();\r\n                        if (textContent) {\r\n                            textContent.split('\\n').forEach(line => {\r\n                                if (line.trim()) {\r\n                                    insertLineWithHeadingStyle(selection, line);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        const element = node as HTMLElement;\r\n\r\n                        if (element.tagName.toLowerCase() === 'table') {\r\n                            const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                            if (rows.length === 0) {\r\n                                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                continue;\r\n                            }\r\n\r\n                            const maxCols = Math.max(...rows.map(row => {\r\n                                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                    return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                }, 0);\r\n                            }));\r\n\r\n                            const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                            await context.sync();\r\n\r\n                            const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                            table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n                            await context.sync();\r\n\r\n                            const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                            rows.forEach((row, rowIndex) => {\r\n                                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                let cellIndex = 0;\r\n\r\n                                cells.forEach((cell) => {\r\n                                    while (rowspanTracker[cellIndex] > 0) {\r\n                                        rowspanTracker[cellIndex]--;\r\n                                        cellIndex++;\r\n                                    }\r\n\r\n                                    const cellText = Array.from(cell.childNodes)\r\n                                        .map(node => {\r\n                                            if (node.nodeType === Node.TEXT_NODE) {\r\n                                                return node.textContent?.trim() || '';\r\n                                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                return (node as HTMLElement).innerText.trim();\r\n                                            }\r\n                                            return '';\r\n                                        })\r\n                                        .filter(text => text.length > 0)\r\n                                        .join(' ');\r\n\r\n                                    const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                    const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                    table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                    for (let i = 1; i < colspan; i++) {\r\n                                        if (cellIndex + i < maxCols) {\r\n                                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                        }\r\n                                    }\r\n\r\n                                    if (rowspan > 1) {\r\n                                        for (let i = 0; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    cellIndex += colspan;\r\n                                });\r\n                            });\r\n\r\n                            newSelection = table.getCell(0, 0); // Set the cursor to the start of the table\r\n                        } else {\r\n                            const elementText = element.innerText.trim();\r\n                            if (elementText) {\r\n                                elementText.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                            newSelection = selection; // If it's not a table, just use the existing selection.\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (word.EditorValue === '' || word.IsApplied) {\r\n                    selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n                } else {\r\n                    let content = removeQuotes(word.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n                    lines.forEach(line => {\r\n                        selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n                newSelection = selection; // After inserting the text, set selection to it.\r\n            }\r\n\r\n            // Move the cursor to the next line after content insertion\r\n            const nextLineParagraph = selection.insertParagraph(\"\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            // Set the new cursor position after content\r\n            newSelection = nextLineParagraph;\r\n            selection.select(); // Select the new paragraph where the cursor will be\r\n            await context.sync();\r\n\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport async function openAITag(tag) {\r\n    tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n    });\r\n\r\n\r\n}\r\n\r\nexport async function generateCheckboxHistory(tag) {\r\n    if (!tag.FilteredReportHeadAIHistoryList || tag.FilteredReportHeadAIHistoryList.length === 0) {\r\n        await fetchAIHistory(tag);\r\n    }\r\n\r\n    const history = tag.FilteredReportHeadAIHistoryList;\r\n\r\n    if (history.length === 0) {\r\n        return '<div>No AI history available.</div>';\r\n    }\r\n\r\n    // Check current theme\r\n    const isDark = theme === 'Dark';\r\n    const closeBtnClass = isDark\r\n        ? 'fa-solid fa-circle-xmark bg-dark text-light'\r\n        : 'fa-solid fa-circle-xmark bg-light text-dark';\r\n\r\n    const closeBar = `\r\n        <div class=\"d-flex justify-content-between align-items-center px-2 pt-3\">\r\n            <div class=\"d-flex align-items-center ms-3\">\r\n                <i class=\"fa fa-microchip-ai text-muted me-2\"></i>\r\n                <span class=\"fw-bold\">${tag.DisplayName}</span>\r\n            </div>\r\n            <div class=\"d-flex justify-content-center align-items-center me-3 c-pointer\" id=\"close-btn-tag\">\r\n                <i class=\"${closeBtnClass}\" id=\"close-ai-window\"></i>\r\n            </div>\r\n        </div>\r\n        <hr class=\"mt-2 mb-1 mx-3\">\r\n    `;\r\n\r\n    const chatBody = `\r\n        <div class=\"chat-body\">\r\n            ${generateChatHistoryHtml(history)}\r\n        </div>\r\n    `;\r\n\r\n    const chatFooterHtml = `\r\n        <div class=\"d-flex align-items-end justify-content-end chatbox p-2\" id=\"chatFooter\">\r\n            ${chatfooter(tag)}\r\n        </div>\r\n    `;\r\n\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);  // Make sure jwt and availableKeys are in scope\r\n\r\n    return `${closeBar}${chatBody}${chatFooterHtml}`;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function setupPromptBuilderUI(container, promptBuilderList) {\r\n\r\n    // Static template and field definitions\r\n    let preview = '';\r\n    let templateText = '';\r\n\r\n    // Field configs (can be extended)\r\n    let fieldsList = [];\r\n\r\n    // Create the form container\r\n    // Create the form container\r\n    container.innerHTML = `\r\n  <div class=\"form-group mb-3 p-3 pt-0\">\r\n    <label class='form-label'><span class=\"text-danger\">*</span> Prompt Builder Template</label>\r\n    <select id=\"promptBuilderTemplate\" class=\"form-control\">\r\n      <option value=\"\" disabled selected>Select a template</option>\r\n    </select>\r\n    <div id=\"templateError\" class=\"invalid-feedback d-none\">Type is required.</div>\r\n  </div>\r\n\r\n  <div id=\"fieldsContainer\"></div>\r\n\r\n  <div class=\"form-group mb-3 p-3 pt-0\" id=\"previewContainer\" style=\"display: none;\">\r\n    <label class=\"mb-2\">Preview</label>\r\n    <div id=\"preview\" class=\"form-control\"></div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-between px-3 align-items-center mt-3\">\r\n    <span id=\"resetBtn\" class=\"text-primary fw-bold\" style=\"cursor: pointer;\">Reset</span>\r\n    <button id=\"applyBtn\" class=\"btn btn-primary text-white\" disabled>Apply Prompt</button>\r\n  </div>\r\n`;\r\n\r\n    // Element references\r\n    const templateSelect = container.querySelector('#promptBuilderTemplate') as HTMLSelectElement;\r\n    const applyBtn = container.querySelector('#applyBtn') as HTMLButtonElement;\r\n    const resetBtn = container.querySelector('#resetBtn') as HTMLSpanElement;\r\n    const previewDiv = container.querySelector('#preview') as HTMLDivElement;\r\n    const fieldsContainer = container.querySelector('#fieldsContainer') as HTMLDivElement;\r\n    const previewContainer = container.querySelector('#previewContainer') as HTMLDivElement;\r\n    const templateError = container.querySelector('#templateError') as HTMLDivElement;\r\n\r\n    // Populate template dropdown\r\n    promptBuilderList.forEach((item) => {\r\n        const option = document.createElement('option');\r\n        option.value = item.ID.toString();\r\n        option.textContent = item.Name;\r\n        templateSelect.appendChild(option);\r\n    });\r\n\r\n    templateSelect.addEventListener('change', async () => {\r\n        const templateId = templateSelect.value;\r\n        const jwt = sessionStorage.getItem('token') || '';\r\n\r\n        const data = await getPromptTemplateById(templateId, jwt);\r\n        if (data.Status && data.Data) {\r\n            fieldsList = data.Data;\r\n            preview = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n\r\n            templateText = promptBuilderList.find((item) => item.ID.toString() === templateId).Template;\r\n        }\r\n        if (!templateId) {\r\n            templateError.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        templateError.classList.add('d-none');\r\n\r\n        renderFields();\r\n        updatePreview();\r\n    });\r\n\r\n    function renderFields() {\r\n        fieldsContainer.innerHTML = '';\r\n\r\n        fieldsList.forEach((field) => {\r\n            const div = document.createElement('div');\r\n            div.className = 'form-group mb-3 p-3 pt-0';\r\n\r\n            const label = document.createElement('label');\r\n            label.textContent = field.Label;\r\n            div.appendChild(label);\r\n\r\n            if (field.Type === 1) {\r\n                const input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.className = 'form-control';\r\n                input.id = field.Label;\r\n                input.addEventListener('input', replaceKeywordsManually);\r\n                div.appendChild(input);\r\n            } else if (field.Type === 2) {\r\n                const select = document.createElement('select');\r\n                select.className = 'form-control';\r\n                select.id = field.Label;\r\n                field.PromptTemplateOptionList.forEach((opt: any) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = opt.Text;\r\n                    option.textContent = opt.Option;\r\n                    select.appendChild(option);\r\n                });\r\n                select.addEventListener('change', replaceKeywordsManually);\r\n                div.appendChild(select);\r\n            }\r\n\r\n            fieldsContainer.appendChild(div);\r\n        });\r\n    }\r\n\r\n    function replaceKeywordsManually() {\r\n        const keywordMap: { [key: string]: string } = {};\r\n\r\n        fieldsList.forEach((field) => {\r\n            const id = field.Label;\r\n            const keyword = `#${id}#`;\r\n\r\n            let value = '';\r\n            const element = document.getElementById(id) as HTMLInputElement | HTMLSelectElement;\r\n\r\n            if (element) {\r\n                value = (element instanceof HTMLInputElement || element instanceof HTMLSelectElement)\r\n                    ? element.value\r\n                    : '';\r\n            }\r\n\r\n            keywordMap[keyword] = value ? value : keyword;\r\n        });\r\n\r\n        let insertValue = templateText;\r\n        for (const [keyword, value] of Object.entries(keywordMap)) {\r\n            insertValue = insertValue.replace(new RegExp(keyword, 'g'), value);\r\n        }\r\n\r\n        preview = insertValue;\r\n        previewDiv.textContent = preview;\r\n        previewContainer.style.display = preview ? 'block' : 'none';\r\n        applyBtn.disabled = preview === '';\r\n    }\r\n\r\n    function updatePreview() {\r\n        replaceKeywordsManually();\r\n    }\r\n\r\n    function resetForm() {\r\n        // Reset only the dynamic field values\r\n        fieldsList.forEach((field) => {\r\n            const element = document.getElementById(field.Label) as HTMLInputElement | HTMLSelectElement;\r\n            if (element) {\r\n                if (element instanceof HTMLInputElement) {\r\n                    element.value = '';\r\n                } else if (element instanceof HTMLSelectElement) {\r\n                    element.selectedIndex = 0; // optional: reset to first option\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clear preview\r\n        previewDiv.textContent = templateText;\r\n        preview = templateText;\r\n    }\r\n\r\n\r\n    function applyPrompt() {\r\n        if (!preview) return;\r\n\r\n        const promptTextarea = document.getElementById('prompt') as HTMLTextAreaElement;\r\n        if (promptTextarea) {\r\n            promptTextarea.value = preview;\r\n            switchToAddTag()\r\n        }\r\n\r\n    }\r\n\r\n    resetBtn.addEventListener('click', resetForm);\r\n    applyBtn.addEventListener('click', applyPrompt);\r\n}\r\n\r\n\r\nasync function insertTagPrompt(tag: any) {\r\n    return Word.run(async (context) => {\r\n        try {\r\n            const selection = context.document.getSelection();\r\n            await context.sync();\r\n\r\n            if (!selection) {\r\n                throw new Error('Selection is invalid or not found.');\r\n            }\r\n\r\n\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = selection.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.EditorValue === '') {\r\n                selection.insertParagraph(`#${tag.DisplayName}#`, Word.InsertLocation.before);\r\n            } else {\r\n                if (tag.ComponentKeyDataType === 'TABLE') {\r\n                    const parser = new DOMParser();\r\n                    const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n                    const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n                    for (const node of bodyNodes) {\r\n                        if (node.nodeType === Node.TEXT_NODE) {\r\n                            const textContent = node.textContent?.trim();\r\n                            if (textContent) {\r\n                                textContent.split('\\n').forEach(line => {\r\n                                    if (line.trim()) {\r\n                                        insertLineWithHeadingStyle(selection, line);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                            const element = node as HTMLElement;\r\n\r\n                            if (element.tagName.toLowerCase() === 'table') {\r\n                                const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                                if (rows.length === 0) {\r\n                                    selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                                    continue;\r\n                                }\r\n\r\n                                const maxCols = Math.max(...rows.map(row => {\r\n                                    return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                                    }, 0);\r\n                                }));\r\n\r\n                                const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n                                await context.sync();\r\n\r\n                                const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                                table.style = \"Grid Table 4 - Accent 1\";\r\n                                await context.sync();\r\n\r\n                                const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                                rows.forEach((row, rowIndex) => {\r\n                                    const cells = Array.from(row.querySelectorAll('td, th'));\r\n                                    let cellIndex = 0;\r\n\r\n                                    cells.forEach((cell) => {\r\n                                        while (rowspanTracker[cellIndex] > 0) {\r\n                                            rowspanTracker[cellIndex]--;\r\n                                            cellIndex++;\r\n                                        }\r\n\r\n                                        const cellText = Array.from(cell.childNodes)\r\n                                            .map(node => {\r\n                                                if (node.nodeType === Node.TEXT_NODE) {\r\n                                                    return node.textContent?.trim() || '';\r\n                                                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                                    return (node as HTMLElement).innerText.trim();\r\n                                                }\r\n                                                return '';\r\n                                            })\r\n                                            .filter(text => text.length > 0)\r\n                                            .join(' ');\r\n\r\n                                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                                        for (let i = 1; i < colspan; i++) {\r\n                                            if (cellIndex + i < maxCols) {\r\n                                                table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                                            }\r\n                                        }\r\n\r\n                                        if (rowspan > 1) {\r\n                                            for (let i = 0; i < colspan; i++) {\r\n                                                if (cellIndex + i < maxCols) {\r\n                                                    rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        cellIndex += colspan;\r\n                                    });\r\n                                });\r\n                            } else {\r\n                                const elementText = element.innerText.trim();\r\n                                if (elementText) {\r\n                                    elementText.split('\\n').forEach(line => {\r\n                                        if (line.trim()) {\r\n                                            insertLineWithHeadingStyle(selection, line);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    let content = removeQuotes(tag.EditorValue);\r\n                    let lines = content.split(/\\r?\\n/);\r\n                    lines.forEach(line => {\r\n                        insertLineWithHeadingStyle(selection, line)\r\n                        // selection.insertParagraph(line, Word.InsertLocation.before);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const endMarker = selection.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n                const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n                bookmarkRange.insertBookmark(bookmarkName);\r\n                console.log(`Bookmark added: ${bookmarkName}`);\r\n                const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n\r\n                afterBookmark.select();\r\n                start.delete()\r\n                end.delete();\r\n                afterBookmark.delete();\r\n                await context.sync();\r\n\r\n            }\r\n            toaster('Inserted successfully', 'success');\r\n\r\n        } catch (error) {\r\n            toaster('Something went wrong', 'error');\r\n\r\n            console.error('Detailed error:', error);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nexport function initializeAIHistoryEvents(tag: any, jwt: string, availableKeys: any) {\r\n    setTimeout(() => {\r\n        tag.FilteredReportHeadAIHistoryList.forEach((chat: any, index: number) => {\r\n            // Copy buttons\r\n            document.getElementById(`copyPrompt-${index}`)?.addEventListener('click', () => copyText(chat.Prompt));\r\n            const savePromptele = document.getElementById(`savePrompt-${index}`);\r\n            if (savePromptele) {\r\n                document.getElementById(`savePrompt-${index}`)?.addEventListener('click', () => {\r\n                    const container = document.getElementById('confirmation-popup');\r\n                    if (container) {\r\n                        container.innerHTML = Confirmationpopup('Do you want to save the current prompt as a global default?');\r\n\r\n                        // Wait for DOM to update and then attach cancel button listener\r\n                        setTimeout(() => {\r\n                            document.getElementById('confirmation-popup-cancel')?.addEventListener('click', () => {\r\n                                container.innerHTML = '';\r\n                            });\r\n\r\n                            document.getElementById('confirmation-popup-confirm')?.addEventListener('click', async () => {\r\n                                try {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'true');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'true');\r\n                                    let updatedTag = JSON.parse(JSON.stringify(tag));\r\n                                    updatedTag.Prompt = chat.Prompt;\r\n                                    const data = await updatePromptTemplate(updatedTag, jwt);\r\n                                    if (data['Status']) {\r\n                                        toaster('Updated Succesfully', 'success');\r\n                                        container.innerHTML = '';\r\n                                    } else {\r\n                                        document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                        document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                        toaster('Something went wrong', 'error');\r\n\r\n\r\n                                    }\r\n                                } catch (error) {\r\n                                    document.getElementById('confirmation-popup-cancel')?.setAttribute('disabled', 'false');\r\n                                    document.getElementById('confirmation-popup-confirm')?.setAttribute('disabled', 'false');\r\n                                    toaster('Something went wrong', 'error');\r\n                                }\r\n                            });\r\n                        }, 0);\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n            document.getElementById(`copyResponse-${index}`)?.addEventListener('click', () => copyText(chat.Response));\r\n\r\n            // Close button\r\n            document.getElementById(`close-btn-tag`)?.addEventListener('click', () => loadHomepage(availableKeys));\r\n\r\n            // Checkbox logic\r\n            const checkbox = document.getElementById(`checkbox-${index}`) as HTMLInputElement;\r\n            if (checkbox) {\r\n                checkbox.addEventListener('change', async (event: Event) => {\r\n                    const isChecked = (event.target as HTMLInputElement).checked;\r\n\r\n                    // Reset all\r\n                    tag.FilteredReportHeadAIHistoryList.forEach((_: any, otherIndex: number) => {\r\n                        const otherCheckbox = document.getElementById(`checkbox-${otherIndex}`) as HTMLInputElement;\r\n                        const responseContainer = document.getElementById(`responseContainer-${otherIndex}`);\r\n                        if (otherCheckbox) otherCheckbox.checked = false;\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.remove('ai-selected-response');\r\n                            responseContainer.classList.add('bg-light');\r\n                        }\r\n                        tag.FilteredReportHeadAIHistoryList[otherIndex].Selected = 0;\r\n                    });\r\n\r\n                    // Set selected\r\n                    if (isChecked) {\r\n                        checkbox.checked = true;\r\n                        const responseContainer = document.getElementById(`responseContainer-${index}`);\r\n                        if (responseContainer) {\r\n                            responseContainer.classList.add('ai-selected-response');\r\n                            responseContainer.classList.remove('bg-light');\r\n                        }\r\n                        chat.Selected = 1;\r\n                    } else {\r\n                        chat.Selected = 0;\r\n                    }\r\n\r\n                    try {\r\n                        const data = await updateAiHistory(chat, jwt);\r\n                        if (data['Data']) {\r\n                            tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n                            tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n                            tag.ReportHeadAIHistoryList.forEach((historyList: any) => {\r\n                                historyList.Response = removeQuotes(historyList.Response);\r\n                                tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n                            });\r\n\r\n                            const finalResponse = chat.FormattedResponse\r\n                                ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                : chat.Response;\r\n\r\n                            tag.ComponentKeyDataType = chat.FormattedResponse ? 'TABLE' : 'TEXT';\r\n                            tag.UserValue = finalResponse;\r\n                            tag.EditorValue = finalResponse;\r\n                            tag.text = finalResponse;\r\n\r\n                            const currentlySelected = tag.FilteredReportHeadAIHistoryList.some((item: any) => item.Selected === 1);\r\n                            tag.IsApplied = !currentlySelected;\r\n                            availableKeys.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                    currentTag.IsApplied = tag.IsApplied;\r\n                                }\r\n                            })\r\n\r\n                            aiTagList.forEach(currentTag => {\r\n                                if (currentTag.ID === tag.ID) {\r\n                                    const isTable = chat.FormattedResponse !== '';\r\n                                    const finalResponse = chat.FormattedResponse\r\n                                        ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n                                        : chat.Response;\r\n\r\n\r\n                                    currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n                                    currentTag.UserValue = finalResponse;\r\n                                    currentTag.EditorValue = finalResponse;\r\n                                    currentTag.text = finalResponse;\r\n                                    currentTag.IsApplied = tag.IsApplied;\r\n                                }\r\n                            });\r\n                        }\r\n                    } catch (err) {\r\n                        console.error('Failed to update AI history:', err);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Button: Insert Tag\r\n        document.getElementById(`insertTagButton`)?.addEventListener('click', () => {\r\n            if (!tag.IsApplied) {\r\n                insertTagPrompt(tag);\r\n            }\r\n        });\r\n\r\n        // Button: Send Prompt\r\n        document.getElementById(`sendPromptButton`)?.addEventListener('click', () => {\r\n            const textareaValue = (document.getElementById(`chatInput`) as HTMLTextAreaElement).value;\r\n            sendPrompt(tag, textareaValue);\r\n        });\r\n\r\n        // Button: Change Source\r\n        document.getElementById(`changeSourceButton`)?.addEventListener('click', () => {\r\n            createMultiSelectDropdown(tag);\r\n        });\r\n\r\n        // Mention dropdown\r\n        mentionDropdownFn(`chatInput`, `mention-dropdown`, 'edit');\r\n    }, 0);\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\nimport { dataUrl, storeUrl, versionLink } from \"./data\";\r\nimport { generateCheckboxHistory, initializeAIHistoryEvents, loadHomepage, setupPromptBuilderUI } from \"./components/home\";\r\nimport { applyThemeClasses, chatfooter, copyText, renderSelectedTags, swicthThemeIcon, switchToAddTag, switchToPromptBuilder, updateEditorFinalTable } from \"./functions\";\r\nimport { addtagbody, logoheader, navTabs, toaster } from \"./components/bodyelements\";\r\nimport { addAiHistory, addGroupKey, fetchGlossaryTemplate, getAiHistory, getAllClients, getAllPromptTemplates, getReportById, loginUser, updateGroupKey } from \"./api\";\r\nexport let jwt = '';\r\nexport let UserRole :any= {};\r\nlet storedUrl = storeUrl\r\nlet documentID = ''\r\nlet organizationName = ''\r\nexport let aiTagList = [];\r\nlet initialised = true;\r\nexport let availableKeys = [];\r\nlet promptBuilderList = [];\r\nlet glossaryName = ''\r\nlet isGlossaryActive: boolean = false;\r\nlet GroupName: string = '';\r\nlet layTerms = [];\r\nlet dataList: any = []\r\nlet isTagUpdating: boolean = false;\r\nlet capturedFormatting: any = {};\r\nlet emptyFormat: boolean = false;\r\nlet isNoFormatTextAvailable: boolean = false;\r\nlet clientId = '0';\r\nlet userId = 0;\r\nlet clientList = [];\r\nlet version = versionLink;\r\nlet currentYear = new Date().getFullYear();\r\nlet sourceList;\r\nlet filteredGlossaryTerm;\r\nexport let selectedNames = [];\r\nexport let isPendingResponse = false;\r\nexport let theme = 'Light';\r\n\r\n\r\n/* global document, Office, Word */\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const hash = window.location.hash;\r\n  if (hash === '#/dashboard' && initialised) {\r\n    initialised = false;\r\n    displayMenu();\r\n\r\n  }\r\n});\r\n\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Word) {\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"footer\").innerText = `© ${currentYear} - TrialAssure LINK AI Assistant ${version}`\r\n    const editor = document.getElementById('editor');\r\n\r\n    window.location.hash = '#/login';\r\n    retrieveDocumentProperties()\r\n\r\n    Office.context.document.addHandlerAsync(\r\n      Office.EventType.DocumentSelectionChanged,\r\n      () => {\r\n        logBookmarksInSelection();\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n\r\n// Example usage:\r\n\r\n\r\n\r\nasync function retrieveDocumentProperties() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const properties = context.document.properties.customProperties;\r\n      properties.load(\"items\");\r\n\r\n      await context.sync();\r\n      const property = properties.items.find(prop => prop.key === 'DocumentID');\r\n      const orgName = properties.items.find(prop => prop.key === 'Organization');\r\n      if (property && orgName) {\r\n        documentID = property.value;\r\n        organizationName = orgName.value;\r\n        login()\r\n      } else {\r\n        document.getElementById('app-body').innerHTML = `\r\n        <p class=\"px-3 text-center\">Export a document from the LINK AI application to use this functionality.</p>`\r\n        console.log(`Custom property \"documentID\" not found.`);\r\n        return null;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error retrieving custom property:\", error);\r\n  }\r\n\r\n}\r\n\r\nasync function login() {\r\n  // document.getElementById('header').innerHTML = ``\r\n  const sessionToken = sessionStorage.getItem('token');\r\n  if (sessionToken) {\r\n    UserRole = JSON.parse(sessionStorage.getItem('userRole')) || ''\r\n    jwt = sessionToken;\r\n    window.location.hash = '#/dashboard';\r\n  } else {\r\n    loadLoginPage();\r\n  }\r\n}\r\n\r\nfunction loadLoginPage() {\r\n\r\n  document.getElementById('logo-header').innerHTML = `\r\n  <img id=\"main-logo\" src=\"${storedUrl}/assets/logo.png\" alt=\"\" class=\"logo\">\r\n  <div class=\"icon-nav me-3\">\r\n    <span id=\"theme-toggle\"><i class=\"fa fa-moon c-pointer me-3\"  title=\"Toggle Theme\"></i><span>\r\n  </div>\r\n`;\r\n\r\n  document.getElementById('app-body').innerHTML = `\r\n    <div class=\"container pt-2\">\r\n      <form id=\"login-form\" class=\"p-4 border rounded\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"organization\" class=\"form-label fw-bold\">Organization</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"organization\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label fw-bold\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label fw-bold\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary bg-primary-clr\">Login</button>\r\n        </div>\r\n      <div id=\"login-error\" class=\"mt-3 text-danger\" style=\"display: none;\"></div>\r\n\r\n      </form>\r\n    </div>\r\n  `;\r\n  document.getElementById('theme-toggle').addEventListener('click', () => {\r\n    theme = theme === 'Light' ? 'Dark' : 'Light';\r\n    applyThemeClasses(theme)\r\n\r\n    document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n    document.body.classList.toggle('light-theme', theme === 'Light');\r\n    swicthThemeIcon()\r\n  }\r\n  );\r\n  document.getElementById('login-form').addEventListener('submit', handleLogin);\r\n}\r\n\r\nasync function handleLogin(event) {\r\n  event.preventDefault();\r\n\r\n  // Get the values from the form fields\r\n  const organization = (document.getElementById('organization') as HTMLInputElement).value;\r\n  const username = (document.getElementById('username') as HTMLInputElement).value;\r\n  const password = (document.getElementById('password') as HTMLInputElement).value;\r\n  if (organization.toLowerCase().trim() === organizationName.toLocaleLowerCase().trim()) {\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n          </div\r\n`\r\n    try {\r\n      const data = await loginUser(organization, username, password);\r\n      if (data.Status === true && data['Data']) {\r\n        if (data['Data'].ResponseStatus) {\r\n          jwt = data.Data.Token;\r\n          UserRole = data.Data.UserRole;\r\n          sessionStorage.setItem('userRole', JSON.stringify(data.Data.UserRole));\r\n          sessionStorage.setItem('token', jwt)\r\n          sessionStorage.setItem('userId', data.Data.ID);\r\n          toaster('You are successfully logged in', 'success');\r\n          window.location.hash = '#/dashboard';\r\n        } else {\r\n          showLoginError(\"An error occurred during login. Please try again.\")\r\n        }\r\n      } else {\r\n        showLoginError(\"An error occurred during login. Please try again.\")\r\n      }\r\n    } catch (error) {\r\n      showLoginError(\"An error occurred during login. Please try again.\")\r\n      console.error('Error during login:', error);\r\n      // Handle login error (e.g., show an error message)\r\n    }\r\n  } else {\r\n    showLoginError(\"The organization specified is not associated with this document\")\r\n  }\r\n}\r\n\r\nfunction showLoginError(message) {\r\n  loadLoginPage();  // Reload the form UI\r\n  const errorDiv = document.getElementById('login-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction displayMenu() {\r\n  userId = Number(sessionStorage.getItem('userId'))\r\n  // document.getElementById('aitag').addEventListener('click', redirectAI);\r\n  fetchDocument('Init');\r\n\r\n}\r\n\r\nasync function fetchDocument(action) {\r\n  try {\r\n\r\n    const data = await getReportById(documentID, jwt);\r\n    document.getElementById('app-body').innerHTML = ``\r\n    document.getElementById('logo-header').innerHTML = logoheader(storedUrl);\r\n\r\n    dataList = data['Data'];\r\n    sourceList = dataList?.SourceTypeList?.filter(\r\n      (item) => item.SourceValue !== ''\r\n        && item.AIFlag === 1\r\n    ) // Filter items with an extension\r\n      .map((item) => ({\r\n        ...item, // Spread the existing properties\r\n        SourceName: transformDocumentName(item.SourceValue)\r\n      }));\r\n    clientId = dataList.ClientID;\r\n    const aiGroup = data['Data'].Group.find(element => element.DisplayName === 'AIGroup');\r\n    GroupName = aiGroup ? aiGroup.Name : '';\r\n    aiTagList = aiGroup ? aiGroup.GroupKey : [];\r\n\r\n    availableKeys = data['Data'].GroupKeyAll.filter(element => element.ComponentKeyDataType === 'TABLE' || element.ComponentKeyDataType === 'TEXT');\r\n    availableKeys.forEach((key) => {\r\n      if (key.AIFlag === 1) {\r\n        const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n        let match;\r\n        if ((match = regex.exec(key.EditorValue) !== null)) {\r\n          {\r\n            key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n            key.UserValue = key.EditorValue;\r\n            key.InitialTable = true;\r\n            key.ComponentKeyDataType = 'TABLE';\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    aiTagList.forEach((key, i) => {\r\n      const regex = /<TableStart>([\\s\\S]*?)<TableEnd>/gi;\r\n\r\n      let match;\r\n      if ((match = regex.exec(key.EditorValue) !== null)) {\r\n        {\r\n          key.EditorValue = updateEditorFinalTable(key.EditorValue);\r\n          key.UserValue = key.EditorValue;\r\n          key.InitialTable = true;\r\n          key.ComponentKeyDataType = 'TABLE';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    );\r\n    fetchClients();\r\n    loadPromptTemplates();\r\n    loadHomepage(availableKeys);\r\n    document.getElementById('home').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        loadHomepage(availableKeys);\r\n      }\r\n    });\r\n\r\n    document.getElementById('glossary').addEventListener('click', () => {\r\n      if (emptyFormat) {\r\n        fetchGlossary();\r\n      }\r\n    });\r\n\r\n    document.getElementById('define-formatting').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        formatOptionsDisplay()\r\n      }\r\n    }\r\n    );\r\n\r\n\r\n    document.getElementById('removeFormatting').addEventListener('click', () => {\r\n      if (Object.keys(capturedFormatting).length > 0) {\r\n        removeOptionsConfirmation();\r\n      }\r\n    });\r\n\r\n\r\n    document.getElementById('theme-toggle').addEventListener('click', () => {\r\n      theme = theme === 'Light' ? 'Dark' : 'Light';\r\n      applyThemeClasses(theme)\r\n\r\n      document.body.classList.toggle('dark-theme', theme === 'Dark');\r\n      document.body.classList.toggle('light-theme', theme === 'Light');\r\n      swicthThemeIcon()\r\n    }\r\n    );\r\n\r\n    document.getElementById('logout').addEventListener('click', async () => {\r\n      if (!isPendingResponse) {\r\n        if (isGlossaryActive) {\r\n          await removeMatchingContentControls();\r\n        }\r\n\r\n        logout()\r\n      }\r\n    }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching glossary data:', error);\r\n  }\r\n}\r\n\r\nasync function fetchClients() {\r\n  try {\r\n    const userId = sessionStorage.getItem('userId') || '';\r\n\r\n\r\n    const data = await getAllClients(userId, jwt);\r\n\r\n    if (data.Status && data.Data) {\r\n      clientList = data['Data'];\r\n    } else {\r\n      console.warn(\"Failed to load clients or no clients found.\");\r\n    }\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function formatOptionsDisplay() {\r\n  if (!isTagUpdating) { // Check if isTagUpdating is false\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n               <!-- Buttons for Capture and Empty Format -->\r\n            <div class=\"d-flex justify-content-end\">\r\n              <button id=\"capture-format-btn\" class=\"btn btn-primary bg-primary-clr\"><i class=\"fa fa-border-style me-1\"></i>  Capture Format</button>\r\n            </div>\r\n            <!-- <h5 class=\"card-title\">Formatting Options</h5> -->\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div class=\"formating-checkbox\">\r\n               <input type=\"checkbox\" id=\"empty-format-checkbox\" class=\"form-check-input\">\r\n              <label for=\"empty-format-checkbox\" class=\"form-check-label empty-format-checkbox-label\" style=\"flex: 1;\">\r\n                   Skip ignoring and removing format-based text\r\n              </label>\r\n            </div>\r\n\r\n            <!-- Section to display captured formatting -->\r\n            <div id=\"format-details\">\r\n              <h5 class=\"my-3\">Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled\"></ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    if (Object.keys(capturedFormatting).length === 0) {\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // The object is not empty\r\n    }\r\n\r\n    const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n    if (!glossaryBtn.classList.contains('disabled-link')) {\r\n      glossaryBtn.classList.add('disabled-link');\r\n    }\r\n\r\n    if (emptyFormat) {\r\n      clearCapturedFormatting();\r\n    }\r\n    else {\r\n      if (capturedFormatting.Bold === null || capturedFormatting.Bold === undefined ||\r\n        capturedFormatting.Underline === 'Mixed' || capturedFormatting.Underline === undefined ||\r\n        capturedFormatting.Size === null || capturedFormatting.Size === undefined ||\r\n        capturedFormatting[\"Font Name\"] === null || capturedFormatting[\"Font Name\"] === undefined ||\r\n        capturedFormatting[\"Background Color\"] === '' || capturedFormatting[\"Background Color\"] === undefined ||\r\n        capturedFormatting[\"Text Color\"] === '' || capturedFormatting[\"Text Color\"] === undefined) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n\r\n\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    }\r\n    // Event listeners for the buttons\r\n\r\n    document.getElementById(\"capture-format-btn\").addEventListener(\"click\", captureFormatting);\r\n\r\n    const emptyFormatCheckbox = document.getElementById(\"empty-format-checkbox\") as HTMLInputElement;\r\n    if (isNoFormatTextAvailable) {\r\n      emptyFormatCheckbox.checked = true;\r\n      clearCapturedFormatting();\r\n    }\r\n\r\n    emptyFormatCheckbox.addEventListener(\"change\", () => {\r\n      if (emptyFormatCheckbox.checked) {\r\n        isNoFormatTextAvailable = true;\r\n        clearCapturedFormatting();\r\n      } else {\r\n        const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n        CaptureBtn.disabled = false;\r\n        isNoFormatTextAvailable = false;\r\n        emptyFormat = false;\r\n        const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n        if (!glossaryBtn.classList.contains('disabled-link')) {\r\n          glossaryBtn.classList.add('disabled-link');\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayCapturedFormatting() {\r\n  emptyFormat = false;\r\n  const formatList = document.getElementById(\"format-list\");\r\n  formatList.innerHTML = \"\"; // Clear the list before adding new items\r\n\r\n  for (const [key, value] of Object.entries(capturedFormatting)) {\r\n    if ((key === \"Text Color\" || key === \"Background Color\") && value) {\r\n      formatList.innerHTML += `\r\n        <li><strong>${key}:</strong>${value}\r\n          <span style=\"display:inline-block;width:15px;height:15px;background-color:${value};border:1px solid black;\"></span>\r\n        </li>\r\n      `;\r\n    } else {\r\n      formatList.innerHTML += `<li><strong>${key}:</strong> ${value}</li>`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearCapturedFormatting() {\r\n  capturedFormatting = {}; // Clear the captured formatting object\r\n  const formatDetails = document.getElementById(\"format-details\");\r\n  formatDetails.style.display = 'none';\r\n  // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n  emptyFormat = true;\r\n  const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n  glossaryBtn.classList.remove('disabled-link');\r\n  const CaptureBtn = document.getElementById('capture-format-btn') as HTMLButtonElement;\r\n  CaptureBtn.disabled = true;\r\n\r\n\r\n  const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n  if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n    removeFormatBtn.classList.add('disabled-link');\r\n  }\r\n  console.log(\"Captured formatting cleared.\");\r\n}\r\n\r\nasync function captureFormatting() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n      const font = selection.font;\r\n      font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n\r\n      await context.sync();\r\n\r\n      capturedFormatting = {\r\n        Bold: font.bold,\r\n        Italic: font.italic,\r\n        Underline: font.underline,\r\n        Size: font.size,\r\n        \"Background Color\": font.highlightColor,\r\n        \"Font Name\": font.name,\r\n        'Text Color': font.color\r\n      };\r\n\r\n\r\n\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'block';\r\n\r\n      if (capturedFormatting.Bold === null ||\r\n        capturedFormatting.Underline === 'Mixed' ||\r\n        capturedFormatting.Size === null ||\r\n        capturedFormatting[\"Font Name\"] === null ||\r\n        capturedFormatting[\"Background Color\"] === '' ||\r\n        capturedFormatting[\"Text Color\"] === ''\r\n\r\n      ) {\r\n        const formatList = document.getElementById(\"format-list\");\r\n        formatList.innerHTML = \"<p>Multiple style values found. Try again</p>\";\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        if (!removeFormatBtn.classList.contains('disabled-link')) {\r\n          removeFormatBtn.classList.add('disabled-link');\r\n        }\r\n\r\n      } else {\r\n        const removeFormatBtn = document.getElementById('removeFormatting') as HTMLButtonElement;\r\n        removeFormatBtn.classList.remove('disabled-link');\r\n        displayCapturedFormatting();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error capturing formatting:\", error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function removeOptionsConfirmation() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    } // Check if isTagUpdating is false\r\n    const htmlBody = `\r\n      <div class=\"container pt-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Are you sure you want to remove formatted text ?</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n          <div id=\"format-details\">\r\n              <h5>Selected Formatting:</h5>\r\n              <ul id=\"format-list\" class=\"list-unstyled mb-3\"></ul>\r\n              <small class=\"text-secondary font-italic\" id=\"warning-rem-fmt\"></small>\r\n             \r\n            </div>\r\n               <!-- Buttons for Capture and Empty Format -->\r\n\r\n            <div class=\"mt-3 d-flex justify-content-between\">\r\n              <span id=\"change-ft-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n              <button id=\"clear-ft-btn\" class=\"btn btn-primary px-3\"><i class=\"fa fa-check-circle me-2\"></i>Yes</button>\r\n\r\n            </div>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n\r\n\r\n    document.getElementById('app-body').innerHTML = htmlBody;\r\n    displayCapturedFormatting();\r\n\r\n    if (capturedFormatting['Background Color'] === null &&\r\n      capturedFormatting['Text Color'] === '#000000') {\r\n      const warningEle = document.getElementById('warning-rem-fmt').innerHTML = 'Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?'\r\n    }\r\n\r\n    // Event listeners for the buttons\r\n    document.getElementById(\"clear-ft-btn\").addEventListener(\"click\", removeFormattedText);\r\n    document.getElementById(\"change-ft-btn\").addEventListener(\"click\", formatOptionsDisplay);\r\n\r\n  }\r\n}\r\n\r\nasync function removeFormattedText() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n\r\n      const iconelement = document.getElementById(`clear-ft-btn`);\r\n      iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Yes`;\r\n      const clrBtn = document.getElementById('clear-ft-btn') as HTMLButtonElement;\r\n      clrBtn.disabled = true;\r\n\r\n      const changeBtn = document.getElementById('change-ft-btn') as HTMLButtonElement;\r\n      changeBtn.disabled = true;\r\n      const paragraphs = context.document.body.paragraphs;\r\n      paragraphs.load(\"items\"); // Load paragraphs from the body\r\n\r\n      await context.sync();\r\n\r\n      // Iterate through each paragraph in the document body\r\n      for (const paragraph of paragraphs.items) {\r\n\r\n        // Check if the paragraph contains text\r\n        if (paragraph.text.trim() !== \"\") {\r\n          const textRanges = paragraph.split([\" \"]); // Split paragraph into individual words/segments\r\n          textRanges.load(\"items, font\");\r\n\r\n          await context.sync();\r\n\r\n          for (const range of textRanges.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n\r\n            // Check if the text range matches the captured formatting\r\n            if (\r\n              font.highlightColor === capturedFormatting['Background Color'] &&\r\n              font.color === capturedFormatting['Text Color'] &&\r\n              font.bold === capturedFormatting['Bold'] &&\r\n              font.italic === capturedFormatting['Italic'] &&\r\n              font.size === capturedFormatting['Size'] &&\r\n              font.underline === capturedFormatting['Underline'] &&\r\n              font.name === capturedFormatting['Font Name']\r\n            ) {\r\n              // Clear the range whether it's a full word or part of a word\r\n              font.highlightColor = \"#FFFFFF\"; // Set new background color\r\n              font.color = \"#000000\"; // Set new text color\r\n              font.bold = false; // Reset bold if needed\r\n              font.italic = false; // Reset italic if needed\r\n              font.underline = \"None\";\r\n              paragraph.insertText(\" \", Word.InsertLocation.replace);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n      capturedFormatting = {}; // Clear the captured formatting object\r\n      const formatDetails = document.getElementById(\"format-details\");\r\n      formatDetails.style.display = 'none';\r\n      // formatList.innerHTML = `<li>No formatting selected.</li>`;\r\n      emptyFormat = true;\r\n      isNoFormatTextAvailable = true;\r\n      const glossaryBtn = document.getElementById('glossary') as HTMLButtonElement;\r\n      glossaryBtn.classList.remove('disabled-link');\r\n      formatOptionsDisplay()\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing formatted text:\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAIHistory(tag) {\r\n  try {\r\n\r\n    const data = await getAiHistory(tag.ID, jwt);\r\n\r\n\r\n    if (data.Status && data.Data) {\r\n      tag.ReportHeadAIHistoryList = data['Data'] || [];\r\n      tag.FilteredReportHeadAIHistoryList = [];\r\n      tag.ReportHeadAIHistoryList.forEach((historyList, i) => {\r\n        historyList.Response = removeQuotes(historyList.Response);\r\n        tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n\r\n      });\r\n      return tag.FilteredReportHeadAIHistoryList;\r\n      // Use the data here\r\n    } else {\r\n      console.warn(\"No AI history available.\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching AI history:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendPrompt(tag, prompt) {\r\n  if (prompt !== '' && !isTagUpdating) {\r\n\r\n    isTagUpdating = true;\r\n\r\n    const iconelement = document.getElementById(`sendPromptButton`);\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white\"></i>`;\r\n\r\n    const payload = {\r\n      ReportHeadID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadID,\r\n      DocumentID: dataList.NCTID,\r\n      DocumentType: dataList.DocumentType,\r\n      TextSetting: dataList.TextSetting,\r\n      DocumentTemplate: dataList.ReportTemplate,\r\n      ReportHeadGroupKeyID: tag.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,\r\n      ThreadID: tag.ThreadID,\r\n      AssistantID: dataList.AssistantID,\r\n      Container: dataList.Container,\r\n      GroupName: GroupName,\r\n      Prompt: prompt,\r\n      PromptType: 1,\r\n      Response: '',\r\n      VectorID: dataList.VectorID,\r\n      Selected: 0,\r\n      ID: 0,\r\n      SourceValue: tag.SourceValue ? tag.SourceValue : []\r\n    };\r\n\r\n    try {\r\n      isPendingResponse = true;\r\n      const data = await addAiHistory(payload, jwt);\r\n\r\n      if (data['Data'] && data['Data'] !== 'false') {\r\n        tag.ReportHeadAIHistoryList = JSON.parse(JSON.stringify(data['Data']));\r\n        tag.FilteredReportHeadAIHistoryList = [];\r\n\r\n        tag.ReportHeadAIHistoryList.forEach((historyList) => {\r\n          historyList.Response = removeQuotes(historyList.Response);\r\n          tag.FilteredReportHeadAIHistoryList.unshift(historyList);\r\n        });\r\n        const chat = tag.ReportHeadAIHistoryList[0];\r\n        aiTagList.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n\r\n\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n            currentTag.IsApplied = tag.IsApplied;\r\n\r\n          }\r\n        });\r\n\r\n        availableKeys.forEach(currentTag => {\r\n          if (currentTag.ID === tag.ID) {\r\n            const isTable = chat.FormattedResponse !== '';\r\n            const finalResponse = chat.FormattedResponse\r\n              ? '\\n' + updateEditorFinalTable(chat.FormattedResponse)\r\n              : chat.Response;\r\n            currentTag.ComponentKeyDataType = isTable ? 'TABLE' : 'TEXT';\r\n            currentTag.UserValue = finalResponse;\r\n            currentTag.EditorValue = finalResponse;\r\n            currentTag.text = finalResponse;\r\n            currentTag.IsApplied = tag.IsApplied;\r\n\r\n          }\r\n        })\r\n\r\n\r\n\r\n        const appbody = document.getElementById('app-body')\r\n        appbody.innerHTML = await generateCheckboxHistory(tag);\r\n        isPendingResponse = false;\r\n\r\n      }\r\n\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      document.getElementById(`chatInput`).value = '';\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      // sourceListBtn.disabled = false;\r\n\r\n    } catch (error) {\r\n      iconelement.innerHTML = `<i class=\"fa fa-paper-plane text-white\"></i>`;\r\n      isTagUpdating = false;\r\n      isPendingResponse = false;\r\n      console.error('Error sending AI prompt:', error);\r\n    }\r\n  } else {\r\n    console.error('No empty prompt allowed');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Your existing copyText function\r\n\r\n\r\n\r\nasync function logout() {\r\n  if (isGlossaryActive) {\r\n    await removeMatchingContentControls();\r\n  }\r\n  sessionStorage.clear();\r\n  window.location.hash = '#/new';\r\n  initialised = true;\r\n  document.getElementById('logo-header').innerHTML = ``;\r\n  login();\r\n}\r\n\r\nfunction addAccordionListeners() {\r\n  const accordionButtons = document.querySelectorAll('.accordion-button');\r\n\r\n  accordionButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n      const collapseElement = this.nextElementSibling;\r\n\r\n      // Check if the element exists before accessing its classList\r\n      if (collapseElement && collapseElement.classList) {\r\n        collapseElement.classList.toggle('show');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction addCopyListeners() {\r\n  const copyIcons = document.querySelectorAll('.fa-copy');\r\n  copyIcons.forEach(icon => {\r\n    icon.addEventListener('click', function () {\r\n      const textToCopy = this.closest('.p-2').querySelector('.form-control').textContent;\r\n    });\r\n  });\r\n}\r\n\r\nexport async function applyAITagFn() {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const body = context.document.body;\r\n\r\n      context.load(body, 'text');\r\n      await context.sync();\r\n\r\n      for (let i = 0; i < aiTagList.length; i++) {\r\n        const tag = aiTagList[i];\r\n        tag.EditorValue = removeQuotes(tag.EditorValue);\r\n\r\n        const searchResults = body.search(`#${tag.DisplayName}#`, {\r\n          matchCase: false,\r\n          matchWholeWord: false,\r\n        });\r\n        context.load(searchResults, 'items');\r\n        await context.sync();\r\n\r\n        console.log(`Found ${searchResults.items.length} instances of #${tag.DisplayName}#`);\r\n\r\n        for (const item of searchResults.items) {\r\n          if (tag.EditorValue !== \"\" && !tag.IsApplied) {\r\n            const cleanDisplayName = tag.ID;\r\n            const uniqueStr = new Date().getTime();\r\n            const bookmarkName = `ID${cleanDisplayName}_Split_${uniqueStr}`;\r\n\r\n            const startMarker = item.insertParagraph(\"[[BOOKMARK_START]]\", Word.InsertLocation.before);\r\n            await context.sync();\r\n\r\n            if (tag.ComponentKeyDataType === 'TABLE') {\r\n              const range = item.getRange();\r\n              const parser = new DOMParser();\r\n              const doc = parser.parseFromString(tag.EditorValue, 'text/html');\r\n              const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n              range.delete();\r\n\r\n              for (const node of bodyNodes) {\r\n                if (node.nodeType === Node.TEXT_NODE) {\r\n                  const textContent = node.textContent?.trim();\r\n                  if (textContent) {\r\n                    textContent.split('\\n').forEach(line => {\r\n                      if (line.trim()) {\r\n                        insertLineWithHeadingStyle(range, line);\r\n                      }\r\n                    });\r\n                  }\r\n                } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                  const element = node as HTMLElement;\r\n\r\n                  if (element.tagName.toLowerCase() === 'table') {\r\n                    const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n                    if (rows.length === 0) {\r\n                      range.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                      continue;\r\n                    }\r\n\r\n                    const maxCols = Math.max(...rows.map(row => {\r\n                      return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                        return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                      }, 0);\r\n                    }));\r\n\r\n                    const paragraph = range.insertParagraph(\"\", Word.InsertLocation.before);\r\n                    await context.sync();\r\n\r\n                    const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n                    table.style = \"Grid Table 4 - Accent 1\";\r\n                    await context.sync();\r\n\r\n                    const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n                    rows.forEach((row, rowIndex) => {\r\n                      const cells = Array.from(row.querySelectorAll('td, th'));\r\n                      let cellIndex = 0;\r\n\r\n                      cells.forEach((cell) => {\r\n                        while (rowspanTracker[cellIndex] > 0) {\r\n                          rowspanTracker[cellIndex]--;\r\n                          cellIndex++;\r\n                        }\r\n\r\n                        const cellText = Array.from(cell.childNodes)\r\n                          .map(node => {\r\n                            if (node.nodeType === Node.TEXT_NODE) {\r\n                              return node.textContent?.trim() || '';\r\n                            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                              return (node as HTMLElement).innerText.trim();\r\n                            }\r\n                            return '';\r\n                          })\r\n                          .filter(text => text.length > 0)\r\n                          .join(' ');\r\n\r\n                        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                        const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n\r\n                        table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                        for (let i = 1; i < colspan; i++) {\r\n                          if (cellIndex + i < maxCols) {\r\n                            table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                          }\r\n                        }\r\n\r\n                        if (rowspan > 1) {\r\n                          for (let i = 0; i < colspan; i++) {\r\n                            if (cellIndex + i < maxCols) {\r\n                              rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                            }\r\n                          }\r\n                        }\r\n\r\n                        cellIndex += colspan;\r\n                      });\r\n                    });\r\n                  } else {\r\n                    const elementText = element.innerText.trim();\r\n                    if (elementText) {\r\n                      elementText.split('\\n').forEach(line => {\r\n                        if (line.trim()) {\r\n                          insertLineWithHeadingStyle(range, line);\r\n                        }\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              await context.sync();\r\n            } else {\r\n              item.insertText(tag.EditorValue, Word.InsertLocation.replace);\r\n              await context.sync();\r\n            }\r\n\r\n            const endMarker = item.insertParagraph(\"[[BOOKMARK_END]]\", Word.InsertLocation.after);\r\n            await context.sync();\r\n\r\n            const markers = context.document.body.paragraphs;\r\n            context.load(markers, 'text');\r\n            await context.sync();\r\n\r\n            const start = markers.items.find(p => p.text === '[[BOOKMARK_START]]');\r\n            const end = markers.items.find(p => p.text === '[[BOOKMARK_END]]');\r\n\r\n            if (start && end) {\r\n              const bookmarkRange = start.getRange('Start').expandTo(end.getRange('End'));\r\n              bookmarkRange.insertBookmark(bookmarkName);\r\n              console.log(`Bookmark added: ${bookmarkName}`);\r\n              const afterBookmark = end.insertParagraph(\"\", Word.InsertLocation.after);\r\n\r\n              afterBookmark.select();\r\n              start.delete();\r\n              end.delete();\r\n              afterBookmark.delete();\r\n              await context.sync();\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (err) {\r\n      console.error(\"Error during tag application:\", err);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction selectResponse(tagIndex, chatIndex) {\r\n  // Handle the response selection logic here\r\n  console.log(`Response selected for tagIndex ${tagIndex}, chatIndex ${chatIndex}`);\r\n}\r\n\r\n\r\nasync function fetchGlossary() {\r\n  if (!isTagUpdating) {\r\n\r\n    document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n    loadGlossary()\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction loadGlossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n        <div id=\"button-container\">\r\n          <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n        </div>\r\n  `\r\n  document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport async function applyglossary() {\r\n  document.getElementById('app-body').innerHTML = `\r\n  <div id=\"button-container\">\r\n\r\n          <div class=\"loader\" id=\"loader\"></div>\r\n\r\n        <div id=\"highlighted-text\"></div>`\r\n\r\n  try {\r\n\r\n    await Word.run(async (context) => {\r\n\r\n\r\n      const body = context.document.body;\r\n      body.load(\"text\");\r\n      await context.sync(); // Sync to get the text content\r\n\r\n      const bodyText = {\r\n        \"Content\": body.text.replace(/[\\n\\r]/g, ' ')\r\n      };\r\n      try {\r\n\r\n        const data = await fetchGlossaryTemplate(dataList?.ClientID, bodyText, jwt);\r\n\r\n        layTerms = data.Data;\r\n\r\n        if (data.Data.length > 0) {\r\n          glossaryName = data.Data[0].GlossaryTemplate;\r\n          loadGlossary();\r\n        } else {\r\n          document.getElementById('app-body').innerHTML = `\r\n            <p class=\"text-center\">Data not available</p>\r\n          `;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching glossary data:', error);\r\n      }\r\n      // Sort terms by length (longest first)\r\n      layTerms.sort((a, b) => b.ClinicalTerm.length - a.ClinicalTerm.length);\r\n\r\n      const processedTerms = new Set(); // Track added larger terms\r\n\r\n      // Filter out smaller terms if they are included in a larger term\r\n      const filteredTerms = layTerms.filter(term => {\r\n        for (const biggerTerm of processedTerms) {\r\n          if (typeof biggerTerm === 'string' && biggerTerm.includes(term.ClinicalTerm.toLowerCase())) {\r\n            console.log(`Skipping \"${term.ClinicalTerm}\" because it's part of \"${biggerTerm}\"`);\r\n            return false; // Exclude this smaller term\r\n          }\r\n        }\r\n        processedTerms.add(term.ClinicalTerm.toLowerCase());\r\n        return true;\r\n      });\r\n\r\n      filteredGlossaryTerm = filteredTerms;\r\n      await removeMatchingContentControls();\r\n\r\n      const foundRanges = new Map(); // Track words already processed\r\n\r\n      const searchPromises = filteredGlossaryTerm.map(term => {\r\n        const searchResults = body.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load(\"items\");\r\n        return searchResults;\r\n      });\r\n\r\n      await context.sync();\r\n\r\n      for (const searchResults of searchPromises) {\r\n\r\n        for (const range of searchResults.items) {\r\n\r\n          if (!range || !range.text) {\r\n            console.log(\"Invalid range. Skipping...\");\r\n            continue;\r\n          }\r\n\r\n          // Load existing content controls inside this range\r\n          const font = range.font;\r\n          font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", 'color']);\r\n          range.load(\"contentControls\");\r\n          await context.sync();\r\n\r\n          const existingControl = range.contentControls.items.length > 0;\r\n\r\n          if (existingControl) {\r\n            console.log(`Skipping \"${range.text}\" because it already has a content control.`);\r\n            continue; // Skip if content control is already present\r\n          }\r\n          // Check if we've already processed this term at this range\r\n          if (foundRanges.has(range.text)) {\r\n            console.log(`Skipping duplicate occurrence of \"${range.text}\"`);\r\n            continue;\r\n          }\r\n          // Mark this word as processed\r\n          foundRanges.set(range.text, true);\r\n          // Remove existing content controls if any\r\n          if (range.contentControls && range.contentControls.items.length > 0) {\r\n            console.log(`Removing existing content control from: \"${range.text}\"`);\r\n            for (const control of range.contentControls.items) {\r\n              control.delete(false); // 'false' keeps the text, only removes the control\r\n            }\r\n            await context.sync(); // Ensure deletion is applied before adding a new one\r\n          }\r\n\r\n          try {\r\n            // Insert a new content control\r\n            const contentControl = range.insertContentControl();\r\n            contentControl.title = `${range.text}`;\r\n            if (font.highlightColor !== null) {\r\n              contentControl.tag = `${font.highlightColor}`;\r\n            }\r\n            contentControl.font.highlightColor = \"yellow\"; // Highlight the control\r\n            contentControl.appearance = Word.ContentControlAppearance.boundingBox;\r\n            await context.sync();\r\n          } catch (error) {\r\n            console.error(`Error inserting content control for term \"${range.text}\":`, error);\r\n          }\r\n        }\r\n      }\r\n      // document.getElementById('glossarycheck').style.display='block';\r\n      isGlossaryActive = true;\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 clear-glossary btn-sm\" id=\"clearGlossary\">Clear Glossary</button>\r\n      </div>\r\n\r\n      <div id=\"highlighted-text\"></div>\r\n      <div class=\"d-flex justify-content-center box-loader\">\r\n       <div class=\"loader\" id=\"loader\"></div></div>\r\n      \r\n`\r\n      const displayElement = document.getElementById('loader');\r\n      displayElement.style.display = 'none';\r\n      await context.sync();\r\n      document.getElementById('clearGlossary').addEventListener('click', removeMatchingContentControls);\r\n      Office.context.document.addHandlerAsync(\r\n        Office.EventType.DocumentSelectionChanged,\r\n        handleSelectionChange\r\n      );\r\n\r\n\r\n    });\r\n\r\n    // Optional: Notify user of completion\r\n    console.log('Glossary applied successfully');\r\n  } catch (error) {\r\n    console.error('Error applying glossary:', error);\r\n    // Optional: Notify user of error\r\n    console.log('Error applying glossary. Please try again.');\r\n  }\r\n}\r\n\r\n\r\nasync function handleSelectionChange() {\r\n  await checkGlossary();\r\n}\r\n\r\nexport async function checkGlossary() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      const selection = context.document.getSelection();\r\n\r\n      selection.load(\"text, font.highlightColor\");\r\n\r\n      await context.sync();\r\n\r\n\r\n\r\n      if (selection.text) {\r\n        const loader = document.getElementById('loader');\r\n        if (loader) {\r\n          loader.style.display = 'block';\r\n        }\r\n        const searchPromises = layTerms.map(term => {\r\n          const searchResults = selection.search(term.ClinicalTerm, { matchCase: false, matchWholeWord: false });\r\n          searchResults.load(\"items\");\r\n          return searchResults;\r\n        });\r\n\r\n        await context.sync();\r\n        const selectedWords = []\r\n        for (const searchResults of searchPromises) {\r\n\r\n          for (const range of searchResults.items) {\r\n            const font = range.font;\r\n            font.load([\"bold\", \"italic\", \"underline\", \"size\", \"highlightColor\", \"name\", \"color\"]);\r\n\r\n            await context.sync();\r\n            if (\r\n              font.highlightColor !== capturedFormatting['Background Color'] ||\r\n              font.color !== capturedFormatting['Text Color'] ||\r\n              font.bold !== capturedFormatting['Bold'] ||\r\n              font.italic !== capturedFormatting['Italic'] ||\r\n              font.size !== capturedFormatting['Size'] ||\r\n              font.underline !== capturedFormatting['Underline'] ||\r\n              font.name !== capturedFormatting['Font Name']\r\n            ) {\r\n              selectedWords.push(range.text);\r\n            }\r\n\r\n          }\r\n        }\r\n        // searchPromises.forEach(searchResults => {\r\n        //   searchResults.items.forEach(item => {\r\n        //   });\r\n        // });\r\n        displayHighlightedText(selectedWords)\r\n\r\n        await context.sync();\r\n\r\n\r\n\r\n\r\n        // const highlightColor = selection.font.highlightColor;\r\n\r\n        // if (highlightColor === \"red\") {\r\n        //   displayHighlightedText(selection.text);\r\n        // } else {\r\n        //   console.log('Selected text is not highlighted.');\r\n        // }\r\n      } else {\r\n        console.log('No text is selected.');\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error displaying glossary:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction displayHighlightedText(words: string[]) {\r\n\r\n  const displayElement = document.getElementById('highlighted-text');\r\n\r\n  if (displayElement) {\r\n    displayElement.innerHTML = ''; // Clear previous content\r\n    const loader = document.getElementById('loader');\r\n    loader.style.display = 'block';\r\n    // Group lay terms by their clinical term\r\n    const groupedTerms: { [clinicalTerm: string]: string[] } = {};\r\n\r\n    words.forEach(word => {\r\n      layTerms.forEach(term => {\r\n        if (term.ClinicalTerm.toLowerCase() === word.toLowerCase()) {\r\n          if (!groupedTerms[term.ClinicalTerm]) {\r\n            groupedTerms[term.ClinicalTerm] = [];\r\n          }\r\n          if (!groupedTerms[term.ClinicalTerm].includes(term.LayTerm)) {\r\n            groupedTerms[term.ClinicalTerm].push(term.LayTerm);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create a box for each clinical term\r\n    Object.keys(groupedTerms).forEach(clinicalTerm => {\r\n      // Create the main box for the clinical term\r\n      const mainBox = document.createElement('div');\r\n      mainBox.className = 'box'; // Add box class for styling\r\n\r\n      // Create a heading for the clinical term\r\n      const heading = document.createElement('h3');\r\n      heading.textContent = `${clinicalTerm} (${glossaryName})`;\r\n      mainBox.appendChild(heading);\r\n\r\n      // Create sub-boxes for each lay term\r\n      groupedTerms[clinicalTerm].forEach(layTerm => {\r\n        const subBox = document.createElement('div');\r\n        subBox.className = 'sub-box'; // Add class for sub-box styling\r\n        subBox.textContent = layTerm;\r\n\r\n        // Add click event listener to replace ClinicalTerm with LayTerm\r\n        subBox.addEventListener('click', async () => {\r\n          await replaceClinicalTerm(clinicalTerm, layTerm);\r\n\r\n          // Remove the main box containing the clicked sub-box\r\n          mainBox.remove();\r\n        });\r\n\r\n        mainBox.appendChild(subBox);\r\n      });\r\n\r\n      displayElement.appendChild(mainBox);\r\n    });\r\n    loader.style.display = 'none';\r\n\r\n  }\r\n}\r\nasync function replaceClinicalTerm(clinicalTerm: string, layTerm: string) {\r\n  const displayElement = document.getElementById('loader');\r\n  displayElement.style.display = 'block';\r\n\r\n  try {\r\n    await Word.run(async (context) => {\r\n      // Get the current selection\r\n      const selection = context.document.getSelection();\r\n      selection.load('text');\r\n      await context.sync();\r\n\r\n      if (selection.text.toLowerCase().includes(clinicalTerm.toLowerCase())) {\r\n        // Search for the clinicalTerm in the document\r\n        const searchResults = selection.search(clinicalTerm, { matchCase: false, matchWholeWord: false });\r\n        searchResults.load('items');\r\n\r\n        await context.sync();\r\n\r\n        // Replace each occurrence of the clinicalTerm with the layTerm\r\n        for (const item of searchResults.items) {\r\n          // Load the font properties\r\n          item.font.load(['bold', 'italic', 'underline', 'color', 'highlightColor', 'size', 'name']);\r\n          await context.sync();  // Ensure the properties are loaded before accessing them\r\n\r\n          // Insert the layTerm while keeping the formatting\r\n          item.insertText(layTerm, 'replace');\r\n\r\n          // Apply the original formatting to the new text\r\n          item.font.bold = item.font.bold;\r\n          item.font.italic = item.font.italic;\r\n          item.font.underline = item.font.underline;\r\n          item.font.color = item.font.color;\r\n          item.font.highlightColor = '#c7c7c7';\r\n          item.font.size = item.font.size;\r\n          item.font.name = item.font.name;\r\n        }\r\n\r\n        await context.sync();\r\n        displayElement.style.display = 'none';\r\n        console.log(`Replaced '${clinicalTerm}' with '${layTerm}' and preserved the original formatting.`);\r\n      } else {\r\n        displayElement.style.display = 'none';\r\n        console.log(`Selected text does not contain '${clinicalTerm}'.`);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    displayElement.style.display = 'none';\r\n    console.error('Error replacing term:', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function removeMatchingContentControls() {\r\n  try {\r\n    await Word.run(async (context) => {\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <div class=\"loader\" id=\"loader\"></div>\r\n        <div id=\"highlighted-text\"></div>`;\r\n      const body = context.document.body;\r\n\r\n      // Load all content controls\r\n      const contentControls = body.contentControls;\r\n      contentControls.load(\"items\");\r\n      await context.sync();\r\n\r\n      if (contentControls.items.length === 0) {\r\n        console.log(\"No content controls found.\");\r\n        return;\r\n      }\r\n\r\n      for (const control of contentControls.items) {\r\n        if (control.title && filteredGlossaryTerm.some(term => term.ClinicalTerm.toLowerCase() === control.title.toLowerCase())) {\r\n          const range = control.getRange();\r\n          range.load(\"text\");\r\n          await context.sync();\r\n          if (control.tag && /^#[0-9A-Fa-f]{6}$/.test(control.tag)) {\r\n            range.font.highlightColor = control.tag;\r\n          } else {\r\n            range.font.highlightColor = null\r\n          }\r\n          await context.sync();\r\n          control.delete(true);\r\n        }\r\n      }\r\n\r\n      document.getElementById('app-body').innerHTML = `\r\n      <div id=\"button-container\">\r\n        <button class=\"btn btn-secondary me-2 mark-glossary btn-sm\" id=\"applyglossary\">Apply Glossary</button>\r\n      </div>\r\n      `;\r\n\r\n      await context.sync();\r\n      isGlossaryActive = false;\r\n      document.getElementById('applyglossary').addEventListener('click', applyglossary);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error removing content controls:\", error);\r\n  }\r\n}\r\n\r\n\r\nasync function displayMentions() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nexport async function addGenAITags() {\r\n  if (!isTagUpdating) {\r\n    if (isGlossaryActive) {\r\n      await removeMatchingContentControls();\r\n    }\r\n\r\n    let selectedClient = clientList.filter((item) => item.ID === clientId);\r\n\r\n    let sponsorOptions = clientList.map(client => {\r\n      const isSelectedClient = selectedClient.some(selected => selected.ID === client.ID);\r\n      return ` \r\n        <li class=\"dropdown-item p-2\" style=\"cursor: pointer;\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" value=\"${client.ID}\" id=\"sponsor${client.ID}\" ${isSelectedClient ? 'checked disabled' : ''}>\r\n            <label class=\"form-check-label text-prewrap\" for=\"sponsor${client.ID}\">${client.Name}</label>\r\n          </div>\r\n        </li>\r\n      `;\r\n    }).join('');\r\n\r\n    document.getElementById('app-body').innerHTML = navTabs;\r\n    // Add modal HTML to the DOM \r\n    document.getElementById('add-tag-body').innerHTML = addtagbody(sponsorOptions);\r\n    const promptTemplateElement = document.getElementById('add-prompt-template')\r\n    setupPromptBuilderUI(promptTemplateElement, promptBuilderList)\r\n\r\n\r\n    document.getElementById('tag-tab').addEventListener('click', () => {\r\n      switchToAddTag()\r\n    });\r\n\r\n\r\n    document.getElementById('prompt-tab').addEventListener('click', () => {\r\n      switchToPromptBuilder()\r\n    });\r\n\r\n    //prompt starting\r\n    mentionDropdownFn('prompt', 'mention-dropdown', 'add');\r\n    //prompt end\r\n    const form = document.getElementById('genai-form');\r\n    const promptField = document.getElementById('prompt');\r\n\r\n    const nameField = document.getElementById('name');\r\n    const descriptionField = document.getElementById('description');\r\n    const saveGloballyCheckbox = document.getElementById('saveGlobally');\r\n    const availableForAllCheckbox = document.getElementById('isAvailableForAll');\r\n    const sponsorDropdownButton = document.getElementById('sponsorDropdown');\r\n    const sponsorDropdownItems = document.querySelectorAll('.dropdown-item .form-check-input');\r\n\r\n    document.getElementById('cancel-btn-gen-ai').addEventListener('click', () => {\r\n      if (!isPendingResponse) {\r\n        loadHomepage(availableKeys)\r\n      }\r\n    });\r\n\r\n    // Check if elements exist\r\n    if (form && nameField && promptField && sponsorDropdownItems.length > 0) {\r\n      const updateDropdownLabel = () => {\r\n        if (availableForAllCheckbox.checked) {\r\n          sponsorDropdownButton.textContent = clientList.map(client => client.Name).join(\", \");\r\n        } else {\r\n          const selectedOptions = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => cb.parentElement.textContent.trim());\r\n          sponsorDropdownButton.textContent = selectedOptions.length ? selectedOptions.join(\", \") : \"Select Sponsors\";\r\n        }\r\n      };\r\n      // Form validation logic on submit\r\n      form.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n\r\n        // Reset previous validation errors\r\n        form.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));\r\n\r\n        let valid = true;\r\n\r\n        if (!(nameField as HTMLInputElement).value.trim()) {\r\n          nameField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (!(promptField as HTMLInputElement).value.trim()) {\r\n          promptField.classList.add('is-invalid');\r\n          valid = false;\r\n        }\r\n\r\n        if (valid) {\r\n          // Prepare object to pass to createTextGenTag\r\n          const selectedSponsors = Array.from(sponsorDropdownItems)\r\n            .filter(cb => cb.checked && cb.id !== 'selectAll')\r\n            .map(cb => {\r\n              const client = clientList.find(client => client.ID == cb.value);\r\n              return client; // Collect the entire client object\r\n            });\r\n\r\n          const isAvailableForAll = availableForAllCheckbox.checked;\r\n          const isSaveGlobally = saveGloballyCheckbox.checked;\r\n          const aigroup = dataList.Group.find(element => element.DisplayName === 'AIGroup');\r\n          const formData = {\r\n            DisplayName: nameField.value.trim(),\r\n            Prompt: promptField.value.trim(),\r\n            Description: descriptionField.value.trim(),\r\n            GroupKeyClient: selectedSponsors, // Array of selected sponsor objects\r\n            AllClient: isAvailableForAll ? 1 : 0,\r\n            SaveGlobally: isSaveGlobally,\r\n            UserDefined: '1',\r\n            ComponentKeyDataTypeID: '1',\r\n            ComponentKeyDataAccessID: '3',\r\n            AIFlag: 1,\r\n            DocumentTypeID: dataList.DocumentTypeID,\r\n            ReportHeadID: dataList.ID,\r\n            SourceTypeID: '',\r\n            ReportHeadGroupID: aigroup.ID,\r\n            ReportHeadSourceID: ''\r\n          };\r\n\r\n          await createTextGenTag(formData);\r\n        }\r\n      });\r\n\r\n\r\n      const checkAndDisableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          if (!checkbox.disabled) {\r\n            checkbox.checked = true;\r\n            checkbox.disabled = true;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Function to enable sponsors without unchecking them\r\n      const enableSponsors = () => {\r\n        sponsorDropdownItems.forEach(checkbox => {\r\n          const isSelectedClient = selectedClient.some(selected => selected.ID === parseInt(checkbox.value));\r\n          if (!isSelectedClient) {\r\n            checkbox.disabled = false;\r\n          }\r\n        });\r\n        updateDropdownLabel();\r\n      };\r\n\r\n      // Event listener for \"Save Globally\" checkbox\r\n\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n\r\n      saveGloballyCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n          if (this.checked) {\r\n            availableForAllCheckbox.disabled = false;\r\n            sponsorDropdownButton.disabled = false;\r\n          } else {\r\n            enableSponsors();\r\n            availableForAllCheckbox.checked = false;\r\n            availableForAllCheckbox.disabled = true;\r\n            sponsorDropdownButton.disabled = true;\r\n            sponsorDropdownItems.forEach(checkbox => {\r\n              if (!checkbox.disabled) {\r\n                checkbox.checked = false;\r\n                checkbox.disabled = false;\r\n              }\r\n            });\r\n            updateDropdownLabel();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for \"Available to All Sponsors\" checkbox\r\n      availableForAllCheckbox.addEventListener('change', function () {\r\n        if (!isPendingResponse) {\r\n\r\n          if (this.checked) {\r\n            checkAndDisableSponsors();\r\n          } else {\r\n            enableSponsors();\r\n          }\r\n        }\r\n      });\r\n\r\n      // Add event listener to prevent dropdown close on item selection\r\n      document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', function (event) {\r\n          {\r\n            event.stopPropagation(); // Prevent dropdown from closing\r\n            const checkbox = this.querySelector('.form-check-input');\r\n            if (checkbox) {\r\n\r\n\r\n              if (checkbox.id === 'selectAll') {\r\n                const isChecked = checkbox.checked;\r\n                sponsorDropdownItems.forEach(cb => {\r\n                  if (!cb.disabled) cb.checked = isChecked;\r\n                });\r\n              }\r\n              updateDropdownLabel();\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Initial label update\r\n      updateDropdownLabel();\r\n\r\n\r\n      // Clear validation errors when user types\r\n      [nameField, promptField].forEach(field => {\r\n        field.addEventListener('input', function () {\r\n          if (this.classList.contains('is-invalid') && this.value.trim()) {\r\n            this.classList.remove('is-invalid');\r\n          }\r\n          if (nameField) {\r\n            const errorDiv = document.getElementById('submition-error');\r\n            errorDiv.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('Required elements are missing or not rendered yet.');\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function createTextGenTag(payload) {\r\n  try {\r\n    const iconelement = document.getElementById(`text-gen-save`);\r\n    const cancelBtnGenAi = document.getElementById('cancel-btn-gen-ai');\r\n\r\n\r\n    (cancelBtnGenAi as HTMLButtonElement).disabled = true;\r\n    iconelement.innerHTML = `<i class=\"fa fa-spinner fa-spin text-white me-2\"></i>Save`;\r\n    (iconelement as HTMLButtonElement).disabled = true;\r\n    isPendingResponse = true;\r\n\r\n    const data = await addGroupKey(payload, jwt);\r\n    isPendingResponse = false;\r\n\r\n    if (data['Data'] && data['Status']) {\r\n      fetchDocument('AIpanel');\r\n      toaster('Saved successfully', 'success');\r\n    } else {\r\n      (cancelBtnGenAi as HTMLButtonElement).disabled = false;\r\n      (iconelement as HTMLButtonElement).disabled = false;\r\n      iconelement.innerHTML = `<i class=\"fa fa-check-circle me-2\"></i>Save`;\r\n      toaster('Something went wrong', 'error');\r\n      // showAddTagError(data['Data']);\r\n    }\r\n\r\n  } catch (error) {\r\n    toaster('Something went wrong', 'error');\r\n    console.error('Error creating text generation tag:', error);\r\n  }\r\n}\r\n\r\n\r\nexport function mentionDropdownFn(textareaId, DropdownId, action) {\r\n  const filterMentions = (query) => {\r\n    // Assuming availableKeys is an array of objects with DisplayName and EditorValue properties\r\n    const filtered = availableKeys.filter(item => item.AIFlag === 0).filter(item =>\r\n      item.DisplayName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    return filtered;\r\n  };\r\n  let highlightedIndex = -1;\r\n\r\n  const promptField = document.getElementById(`${textareaId}`);\r\n  const mentionDropdown = document.getElementById(`${DropdownId}`);\r\n  if (promptField) {\r\n\r\n    // Handle input events on prompt field for mentions\r\n    promptField.addEventListener('input', (e) => {\r\n      const cursorPosition = promptField.selectionStart;\r\n      const textBeforeCursor = promptField.value.slice(0, cursorPosition);\r\n      const lastHashtag = textBeforeCursor.lastIndexOf('#');\r\n      if (lastHashtag !== -1) {\r\n        const query = textBeforeCursor.slice(lastHashtag + 1).trim();\r\n        if (query.length > 0) {\r\n          const mentions = filterMentions(query);\r\n\r\n          if (mentions.length > 0) {\r\n            mentionDropdown.innerHTML = mentions.map(item => {\r\n              let editorValue = '';\r\n              if (action === 'add') {\r\n                editorValue = `#${item.DisplayName}#`;\r\n              } else {\r\n                editorValue = item.EditorValue || `#${item.DisplayName}#`;\r\n              }\r\n\r\n              return `<li class=\"dropdown-item\" data-editor-value=\"${editorValue}\">${item.DisplayName}</li>`;\r\n            }).join('');\r\n\r\n            // Get the position of the textarea and place the dropdown above it\r\n            const textareaRect = promptField.getBoundingClientRect();\r\n            mentionDropdown.style.left = `${textareaRect.left}px`;\r\n            mentionDropdown.style.bottom = `75px`; // Position above the textarea\r\n            mentionDropdown.style.display = 'block';\r\n          } else {\r\n            mentionDropdown.style.display = 'none';\r\n          }\r\n        } else {\r\n          mentionDropdown.style.display = 'none';\r\n        }\r\n      } else {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n\r\n    });\r\n\r\n    // Handle keyboard navigation in the dropdown\r\n    promptField.addEventListener('keydown', (e) => {\r\n      const items = document.querySelectorAll(`#${DropdownId} .dropdown-item`);\r\n      const totalItems = items.length;\r\n\r\n      if (e.key === 'ArrowDown') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight down and wrap around to the top if at the end\r\n        if (highlightedIndex < totalItems - 1) {\r\n          highlightedIndex++;\r\n        } else {\r\n          highlightedIndex = 0; // Wrap to the first item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'ArrowUp') {\r\n        // Prevent default behavior to stop cursor from moving\r\n        e.preventDefault();\r\n\r\n        // Move the highlight up and wrap around to the bottom if at the top\r\n        if (highlightedIndex > 0) {\r\n          highlightedIndex--;\r\n        } else {\r\n          highlightedIndex = totalItems - 1; // Wrap to the last item\r\n        }\r\n        updateHighlightedItem(`${DropdownId}`);\r\n      } else if (e.key === 'Enter' && highlightedIndex !== -1) {\r\n        // Select the highlighted item\r\n        const selectedItem = items[highlightedIndex];\r\n        if (selectedItem) {\r\n          selectMention(selectedItem.getAttribute('data-editor-value'));\r\n          mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n          e.preventDefault();  // Prevent form submission on Enter key\r\n        }\r\n      }\r\n    });\r\n\r\n    // Function to highlight the selected item\r\n    function updateHighlightedItem(id) {\r\n      const items = document.querySelectorAll(`#${id} .dropdown-item`);\r\n      const dropdown = document.getElementById(`${id}`);\r\n      const totalItems = items.length;\r\n\r\n      // Remove the 'active' class from all items\r\n      items.forEach(item => item.classList.remove('active'));\r\n\r\n      // Add the 'active' class to the currently highlighted item\r\n      if (highlightedIndex >= 0 && highlightedIndex < totalItems) {\r\n        const highlightedItem = items[highlightedIndex];\r\n        highlightedItem.classList.add('active');\r\n\r\n        // Ensure the highlighted item is visible within the dropdown\r\n        highlightedItem.scrollIntoView({\r\n          behavior: 'smooth',    // Smooth scroll\r\n          block: 'nearest'      // Scroll only if necessary\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Handle selecting an item from the dropdown via mouse click\r\n    mentionDropdown.addEventListener('click', (e) => {\r\n      if (e.target && e.target.matches('li')) {\r\n        const editorValue = e.target.getAttribute('data-editor-value');\r\n        selectMention(editorValue);\r\n        mentionDropdown.style.display = 'none';  // Hide the dropdown after selection\r\n      }\r\n    });\r\n\r\n    // Function to insert the selected mention into the prompt field\r\n    const selectMention = (editorValue) => {\r\n      const textarea = document.getElementById(`${textareaId}`);\r\n      const currentValue = textarea.value;\r\n      const cursorPosition = textarea.selectionStart;\r\n\r\n      const textBefore = currentValue.slice(0, cursorPosition);\r\n      const textAfter = currentValue.slice(cursorPosition);\r\n\r\n      const lastHashPosition = textBefore.lastIndexOf('#');\r\n      const updatedTextBefore = textBefore.slice(0, lastHashPosition); // Removing '#' symbol\r\n\r\n      textarea.value = `${updatedTextBefore}${editorValue}${textAfter}`;\r\n      const newCursorPosition = updatedTextBefore.length + editorValue.length;\r\n      textarea.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    };\r\n\r\n    // Hide the dropdown if clicked outside\r\n    document.addEventListener('click', (e) => {\r\n      if (!mentionDropdown.contains(e.target) && e.target !== promptField) {\r\n        mentionDropdown.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function replaceMention(word: any, type: any) {\r\n  return Word.run(async (context) => {\r\n    try {\r\n      const selection = context.document.getSelection();\r\n      await context.sync();\r\n\r\n      if (!selection) {\r\n        throw new Error('Selection is invalid or not found.');\r\n      }\r\n\r\n      if (type === 'TABLE') {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(word.EditorValue, 'text/html');\r\n\r\n        const bodyNodes = Array.from(doc.body.childNodes);\r\n\r\n        for (const node of bodyNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const textContent = node.textContent?.trim();\r\n            if (textContent) {\r\n              textContent.split('\\n').forEach(line => {\r\n                if (line.trim()) {\r\n                  insertLineWithHeadingStyle(selection, line);\r\n                }\r\n              });\r\n            }\r\n          } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n            const element = node as HTMLElement;\r\n\r\n            if (element.tagName.toLowerCase() === 'table') {\r\n              const rows = Array.from(element.querySelectorAll('tr'));\r\n\r\n              if (rows.length === 0) {\r\n                selection.insertParagraph(\"[Empty Table]\", Word.InsertLocation.before);\r\n                continue;\r\n              }\r\n\r\n              const maxCols = Math.max(...rows.map(row => {\r\n                return Array.from(row.querySelectorAll('td, th')).reduce((sum, cell) => {\r\n                  return sum + (parseInt(cell.getAttribute('colspan') || '1', 10));\r\n                }, 0);\r\n              }));\r\n\r\n              const paragraph = selection.insertParagraph(\"\", Word.InsertLocation.before);\r\n              await context.sync();\r\n\r\n              const table = paragraph.insertTable(rows.length, maxCols, Word.InsertLocation.after);\r\n              table.style = \"Grid Table 4 - Accent 1\";  // Apply built-in Word table style\r\n\r\n              await context.sync();\r\n\r\n              const rowspanTracker: number[] = new Array(maxCols).fill(0);\r\n\r\n              rows.forEach((row, rowIndex) => {\r\n                const cells = Array.from(row.querySelectorAll('td, th'));\r\n                let cellIndex = 0;\r\n\r\n                cells.forEach((cell) => {\r\n                  while (rowspanTracker[cellIndex] > 0) {\r\n                    rowspanTracker[cellIndex]--;\r\n                    cellIndex++;\r\n                  }\r\n\r\n                  const cellText = Array.from(cell.childNodes)\r\n                    .map(node => {\r\n                      if (node.nodeType === Node.TEXT_NODE) {\r\n                        return node.textContent?.trim() || '';\r\n                      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                        return (node as HTMLElement).innerText.trim();\r\n                      }\r\n                      return '';\r\n                    })\r\n                    .filter(text => text.length > 0)\r\n                    .join(' ');\r\n\r\n                  const colspan = parseInt(cell.getAttribute('colspan') || '1', 10);\r\n                  const rowspan = parseInt(cell.getAttribute('rowspan') || '1', 10);\r\n                  // if (rowIndex === 0) {\r\n                  //   const cell = table.getCell(rowIndex, cellIndex);\r\n                  //   const paragraph = cell.body.paragraphs.getFirst();\r\n                  //   paragraph.font.bold = true;\r\n                  //   paragraph.font.highlightColor = \"lightGray\";  // This works!\r\n                  // }\r\n                  table.getCell(rowIndex, cellIndex).value = cellText;\r\n\r\n                  for (let i = 1; i < colspan; i++) {\r\n                    if (cellIndex + i < maxCols) {\r\n                      table.getCell(rowIndex, cellIndex + i).value = \"\";\r\n                    }\r\n                  }\r\n\r\n                  if (rowspan > 1) {\r\n                    for (let i = 0; i < colspan; i++) {\r\n                      if (cellIndex + i < maxCols) {\r\n                        rowspanTracker[cellIndex + i] = rowspan - 1;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellIndex += colspan;\r\n                });\r\n              });\r\n            } else {\r\n              const elementText = element.innerText.trim();\r\n              if (elementText) {\r\n                elementText.split('\\n').forEach(line => {\r\n                  if (line.trim()) {\r\n                    insertLineWithHeadingStyle(selection, line);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        if (word.EditorValue === '' || word.IsApplied) {\r\n          selection.insertParagraph(`#${word.DisplayName}#`, Word.InsertLocation.before);\r\n        } else {\r\n          let content = removeQuotes(word.EditorValue);\r\n          let lines = content.split(/\\r?\\n/); // Handle both \\r\\n and \\n\r\n\r\n          lines.forEach(line => {\r\n            selection.insertParagraph(line, Word.InsertLocation.before);\r\n          });\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction insertLineWithHeadingStyle(range: Word.Range, line: string) {\r\n  let style = \"Normal\";\r\n  let text = line;\r\n\r\n  if (line.startsWith('###### ')) {\r\n    style = \"Heading 6\";\r\n    text = line.substring(7).trim();\r\n  } else if (line.startsWith('##### ')) {\r\n    style = \"Heading 5\";\r\n    text = line.substring(6).trim();\r\n  } else if (line.startsWith('#### ')) {\r\n    style = \"Heading 4\";\r\n    text = line.substring(5).trim();\r\n  } else if (line.startsWith('### ')) {\r\n    style = \"Heading 3\";\r\n    text = line.substring(4).trim();\r\n  } else if (line.startsWith('## ')) {\r\n    style = \"Heading 2\";\r\n    text = line.substring(3).trim();\r\n  } else if (line.startsWith('# ')) {\r\n    style = \"Heading 1\";\r\n    text = line.substring(2).trim();\r\n  }\r\n\r\n  const paragraph = range.insertParagraph(text, Word.InsertLocation.before);\r\n  paragraph.style = style;\r\n}\r\n\r\n\r\n\r\nfunction removeQuotes(value: string): string {\r\n  return value\r\n    ? value\r\n      .replace(/^\"|\"$/g, '')\r\n      .replace(/\\\\n/g, '')\r\n      .replace(/\\*\\*/g, '')\r\n      .replace(/\\\\r/g, '')\r\n    : '';\r\n}\r\n\r\nfunction showAddTagError(message) {\r\n  const errorDiv = document.getElementById('submition-error');\r\n  errorDiv.style.display = 'block';\r\n  errorDiv.textContent = message;\r\n}\r\n\r\nfunction transformDocumentName(value: string): string {\r\n  if (!value || value.trim() === '') {\r\n    return value; // Return the input value unchanged\r\n  }\r\n\r\n  const parts = value.split('_');\r\n  if (parts.length <= 1) {\r\n    return value; // Return the input value unchanged if no underscores are present\r\n  }\r\n\r\n  return parts.slice(1).join('_').replace(/%20/g, ' ').replace(/%25/g, '%');\r\n}\r\n\r\n\r\n\r\nexport function createMultiSelectDropdown(tag) {\r\n  const isDark = theme === 'Dark';\r\n  const btnClass = isDark ? 'btn-dark text-light border-0' : 'btn-light text-dark border';\r\n  const dropdownMenuClass = isDark ? 'bg-dark text-light border-light' : 'bg-white text-dark border';\r\n  const itemClass = isDark ? 'bg-dark text-light' : 'bg-white text-dark';\r\n  const cancelBtnClass = isDark ? 'btn-danger bg-danger-clr text-light' : 'btn-danger bg-danger-clr text-white';\r\n  const saveBtnClass = isDark ? 'btn-success bg-success-clr text-light' : 'btn-success bg-success-clr text-white';\r\n\r\n  const multiSelectHTML = `\r\n  <div class='p-3 w-100'>\r\n    <div class=\"mb-3\">\r\n      <label for=\"source-select\" class=\"form-label\"><span class=\"text-danger\">*</span> Select Sources</label>\r\n      <div class=\"dropdown w-100\">\r\n        <button \r\n          class=\"btn ${btnClass} w-100 text-start d-flex justify-content-between align-items-start dropdown-toggle dropdown-toggle-sources\" \r\n          type=\"button\" \r\n          id=\"sourceDropdown\" \r\n          data-bs-toggle=\"dropdown\" \r\n          aria-expanded=\"false\">\r\n          <span id=\"sourceDropdownLabel\" class='sourceDropdownLabel'></span>\r\n          <span class=\"dropdown-toggle-icon dropdown-toggle-icon-s\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu ${dropdownMenuClass} w-100 p-2\" aria-labelledby=\"sourceDropdown\" style=\"box-shadow: 0 4px 8px rgba(0,0,0,0.1); z-index: 10000;\">\r\n          <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"selectAll\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"selectAll\" id=\"selectAll\">\r\n              <label class=\"form-check-label w-100\" for=\"selectAll\">Select All</label>\r\n            </div>\r\n          </li>\r\n          ${sourceList\r\n      .map(\r\n        (source, index) => `\r\n              <li class=\"dropdown-item p-2 ${itemClass}\" style=\"cursor: pointer;\" data-checkbox-id=\"source-${index}\">\r\n                <div class=\"form-check\">\r\n                  <input class=\"form-check-input source-checkbox\" type=\"checkbox\" value=\"${source.SourceName}\" id=\"source-${index}\">\r\n                  <label class=\"form-check-label w-100 text-prewrap\" for=\"source-${index}\">${source.SourceName}</label>\r\n                </div>\r\n              </li>\r\n            `\r\n      )\r\n      .join('')}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-3 d-flex justify-content-between\">\r\n          <span id=\"cancel-src-btn\" class=\"fw-bold text-primary my-auto c-pointer\">Cancel</span>\r\n      <button id=\"ok-src-btn\" class=\"btn btn-primary\">Save</button>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  const accordionBody = document.getElementById(`chatFooter`);\r\n  accordionBody.innerHTML = multiSelectHTML;\r\n\r\n  let selectedSources = [];\r\n\r\n  const selectAllCheckbox = document.getElementById(`selectAll`);\r\n  const individualCheckboxes = document.querySelectorAll(`.source-checkbox`);\r\n  const sourceDropdownLabel = document.getElementById(`sourceDropdownLabel`);\r\n\r\n  function updateLabel() {\r\n    const selectedSourceNames = selectedSources;\r\n    if (selectedSourceNames.length > 0) {\r\n      sourceDropdownLabel.innerText = selectedSourceNames.join(', ');\r\n    } else {\r\n      sourceDropdownLabel.innerText = ' ';\r\n    }\r\n  }\r\n\r\n  selectAllCheckbox.addEventListener(\"change\", function () {\r\n    const checkboxes = document.querySelectorAll(`.source-checkbox`);\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.checked = this.checked;\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n    });\r\n\r\n    updateLabel();\r\n  });\r\n\r\n  const selectAllItem = document.querySelector(`.dropdown-item[data-checkbox-id=\"selectAll\"]`);\r\n  selectAllItem.addEventListener(\"click\", function (event) {\r\n    event.stopPropagation();\r\n  });\r\n\r\n  individualCheckboxes.forEach((checkbox) => {\r\n    checkbox.addEventListener(\"change\", function () {\r\n      if (checkbox.checked) {\r\n        if (!selectedSources.includes(checkbox.value)) {\r\n          selectedSources.push(checkbox.value);\r\n        }\r\n      } else {\r\n        selectedSources = selectedSources.filter((source) => source !== checkbox.value);\r\n      }\r\n\r\n      const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n      selectAllCheckbox.checked = allChecked;\r\n\r\n      updateLabel();\r\n    });\r\n\r\n    const listItem = checkbox.closest(\"li\");\r\n    listItem.addEventListener(\"click\", function (event) {\r\n      event.stopPropagation();\r\n    });\r\n  });\r\n\r\n  if (tag.Sources && tag.Sources.length > 0) {\r\n    individualCheckboxes.forEach((checkbox) => {\r\n      if (tag.Sources.includes(checkbox.value)) {\r\n        checkbox.checked = true;\r\n        selectedSources.push(checkbox.value);\r\n      }\r\n    });\r\n\r\n    const allChecked = Array.from(individualCheckboxes).every((checkbox) => checkbox.checked);\r\n    selectAllCheckbox.checked = allChecked;\r\n    updateLabel();\r\n  }\r\n\r\n  document.getElementById(`ok-src-btn`).addEventListener(\"click\", function () {\r\n    tag.Sources = [...selectedSources];\r\n    tag.SourceValue = sourceList\r\n      .filter(source => selectedSources.includes(source.SourceName))\r\n      .map(source => source.SourceValue);\r\n\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n\r\n  document.getElementById(`cancel-src-btn`).addEventListener(\"click\", function () {\r\n    accordionBody.innerHTML = chatfooter(tag);\r\n    initializeAIHistoryEvents(tag, jwt, availableKeys);\r\n  });\r\n}\r\n\r\n\r\nasync function loadPromptTemplates() {\r\n  try {\r\n    const data = await getAllPromptTemplates(jwt);\r\n    if (data.Status && data.Data) {\r\n      promptBuilderList = data.Data;\r\n    }\r\n    // Do something with the data\r\n  } catch (error) {\r\n    console.error('Error fetching prompt templates:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function logBookmarksInSelection() {\r\n  return Word.run(async (context) => {\r\n    let range = context.document.getSelection();\r\n    await context.sync(); // Ensure selection is ready\r\n\r\n\r\n    // Get bookmarks in the selection\r\n    let bookmarks = range.getBookmarks(); // Returns ClientResult<string[]>\r\n\r\n    await context.sync(); // Ensure bookmarks are retrieved\r\n    if (bookmarks.value.length > 0) {\r\n      selectedNames = []\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-none');\r\n        badgeWrapper.classList.add('d-block');\r\n      }\r\n      bookmarks.value.forEach((bookmarkName) => {\r\n        let processedName = bookmarkName.split(\"_Split_\")[0];\r\n        processedName = processedName.replace(/_/g, \" \");\r\n        selectedNames.push(processedName)\r\n        const container = document.getElementById('tags-in-selected-text');\r\n        if (container) {\r\n          renderSelectedTags(selectedNames, availableKeys)// Trigger function when selection changes\r\n        }\r\n      });\r\n    } else {\r\n      const badgeWrapper = document.getElementById('tags-in-selected-text');\r\n      if (badgeWrapper) {\r\n        badgeWrapper.classList.remove('d-block');\r\n        badgeWrapper.classList.add('d-none');\r\n      }\r\n    }\r\n  });\r\n}\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","baseUrl","toaster","message","type","body","getElementById","innerHTML","setTimeout","navTabs","async","insertLineWithHeadingStyle","range","line","Word","run","style","text","startsWith","substring","trim","paragraph","insertParagraph","InsertLocation","before","regex","match","lastIndex","exec","index","insertText","end","content","bold","italic","underline","formattedRange","font","UnderlineType","single","none","context","sync","removeQuotes","value","copyText","tempTextArea","createElement","appendChild","select","execCommand","removeChild","switchToAddTag","querySelector","classList","remove","add","updateEditorFinalTable","data","tables","parsedContent","JSON","parse","push","jsonToHtmlTable","error","console","tableIndex","jsonData","Array","isArray","headers","Set","rows","flattenObject","prefix","result","keys","forEach","newKey","map","item","entries","k","v","join","flattenedItem","table","header","row","chatfooter","tag","theme","Sources","renderSelectedTags","selectedNames","availableKeys","badgeWrapper","name","toLowerCase","lowerName","find","aiTag","mention","AIFlag","ID","DisplayName","badge","className","cursor","addEventListener","displayName","bookmarks","getSelection","getBookmarks","targetBookmarkName","bookmark","split","getBookmarkRangeOrNullObject","load","isNullObject","selectMatchingBookmarkFromSelection","appBody","generateCheckboxHistory","then","html","applyThemeClasses","isDark","isLight","safeApplyClass","selector","darkClasses","lightClasses","elements","querySelectorAll","darkClassList","lightClassList","elem","swicthThemeIcon","icon","loadHomepage","searchBoxClass","searchBox","suggestionList","updateSuggestions","searchTerm","replaceChildren","filteredMentions","filter","includes","nonAITags","aiTags","createSection","labelText","mentions","isAISection","themeClasses","itemClass","labelClass","label","textContent","listItem","onclick","catch","word","selection","newSelection","doc","DOMParser","parseFromString","EditorValue","bodyNodes","from","childNodes","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","element","tagName","maxCols","Math","max","reduce","sum","cell","parseInt","getAttribute","insertTable","after","rowspanTracker","fill","rowIndex","cells","cellIndex","cellText","innerText","colspan","rowspan","getCell","elementText","IsApplied","nextLineParagraph","replaceMention","ComponentKeyDataType","debounceTimeout","clearTimeout","isPendingResponse","addGenAITags","applyAITagFn","FilteredReportHeadAIHistoryList","fetchAIHistory","history","closeBtnClass","closeBar","chatBody","chatList","promptclass","globalPromptUpdate","UserRole","UserRoleEntityAccessList","UserRoleEntity","chat","includeSaveIcon","UserRoleAccessID","Prompt","Selected","Response","generateChatHistoryHtml","chatFooterHtml","initializeAIHistoryEvents","jwt","container","setAttribute","updatedTag","stringify","payload","response","fetch","method","ok","json","updatePromptTemplate","checkbox","isChecked","event","target","checked","_","otherIndex","otherCheckbox","responseContainer","updateAiHistory","ReportHeadAIHistoryList","historyList","unshift","finalResponse","FormattedResponse","UserValue","currentlySelected","some","currentTag","isTable","aiTagList","err","bookmarkName","Date","getTime","markers","paragraphs","start","items","getRange","expandTo","insertBookmark","log","afterBookmark","delete","insertTagPrompt","textareaValue","sendPrompt","createMultiSelectDropdown","mentionDropdownFn","sourceList","filteredGlossaryTerm","storedUrl","documentID","organizationName","initialised","promptBuilderList","glossaryName","isGlossaryActive","GroupName","layTerms","dataList","isTagUpdating","capturedFormatting","emptyFormat","isNoFormatTextAvailable","clientId","userId","clientList","currentYear","getFullYear","login","sessionToken","sessionStorage","getItem","loadLoginPage","toggle","handleLogin","preventDefault","organization","username","password","toLocaleLowerCase","ClientName","Username","Password","loginUser","Status","ResponseStatus","Data","Token","setItem","showLoginError","errorDiv","display","fetchDocument","action","getReportById","logoheader","SourceTypeList","SourceValue","SourceName","transformDocumentName","ClientID","aiGroup","Group","Name","GroupKey","GroupKeyAll","InitialTable","getAllClients","warn","fetchClients","getAllPromptTemplates","loadPromptTemplates","removeMatchingContentControls","loadGlossary","fetchGlossary","formatOptionsDisplay","htmlBody","displayCapturedFormatting","removeFormattedText","removeOptionsConfirmation","clear","logout","glossaryBtn","contains","clearCapturedFormatting","Bold","Underline","Size","removeFormatBtn","captureFormatting","emptyFormatCheckbox","disabled","formatList","Italic","size","highlightColor","color","textRanges","tagId","getAiHistory","prompt","iconelement","ReportHeadID","DocumentID","NCTID","DocumentType","TextSetting","DocumentTemplate","ReportTemplate","ReportHeadGroupKeyID","ThreadID","AssistantID","Container","PromptType","VectorID","addAiHistory","searchResults","search","matchCase","matchWholeWord","applyglossary","bodyText","fetchGlossaryTemplate","GlossaryTemplate","sort","ClinicalTerm","processedTerms","filteredTerms","term","biggerTerm","foundRanges","Map","searchPromises","contentControls","has","set","control","contentControl","insertContentControl","title","appearance","ContentControlAppearance","boundingBox","Office","addHandlerAsync","EventType","DocumentSelectionChanged","handleSelectionChange","loader","selectedWords","words","displayElement","groupedTerms","LayTerm","clinicalTerm","mainBox","heading","layTerm","subBox","replaceClinicalTerm","displayHighlightedText","checkGlossary","selectedClient","sponsorOptions","client","isSelectedClient","selected","addtagbody","preview","templateText","fieldsList","templateSelect","applyBtn","resetBtn","previewDiv","fieldsContainer","previewContainer","templateError","replaceKeywordsManually","keywordMap","field","id","Label","keyword","HTMLInputElement","HTMLSelectElement","insertValue","RegExp","option","toString","templateId","getPromptTemplateById","Template","div","Type","input","PromptTemplateOptionList","opt","Text","Option","selectedIndex","promptTextarea","setupPromptBuilderUI","form","promptField","nameField","descriptionField","saveGloballyCheckbox","availableForAllCheckbox","sponsorDropdownButton","sponsorDropdownItems","updateDropdownLabel","selectedOptions","cb","parentElement","valid","selectedSponsors","isAvailableForAll","isSaveGlobally","aigroup","formData","Description","GroupKeyClient","AllClient","SaveGlobally","UserDefined","ComponentKeyDataTypeID","ComponentKeyDataAccessID","DocumentTypeID","SourceTypeID","ReportHeadGroupID","ReportHeadSourceID","cancelBtnGenAi","addGroupKey","createTextGenTag","checkAndDisableSponsors","enableSponsors","stopPropagation","textareaId","DropdownId","highlightedIndex","mentionDropdown","updateHighlightedItem","totalItems","highlightedItem","scrollIntoView","behavior","block","cursorPosition","selectionStart","textBeforeCursor","slice","lastHashtag","lastIndexOf","query","filterMentions","editorValue","textareaRect","getBoundingClientRect","left","bottom","selectedItem","selectMention","matches","textarea","currentValue","textBefore","textAfter","lastHashPosition","updatedTextBefore","newCursorPosition","setSelectionRange","parts","multiSelectHTML","source","accordionBody","selectedSources","selectAllCheckbox","individualCheckboxes","sourceDropdownLabel","updateLabel","selectedSourceNames","allChecked","every","closest","Number","onReady","info","host","HostType","properties","customProperties","property","orgName","retrieveDocumentProperties","processedName","logBookmarksInSelection","URL"],"sourceRoot":""}