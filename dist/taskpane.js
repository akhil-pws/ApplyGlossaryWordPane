!function(){"use strict";var e,t,n,o={14385:function(e){e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},58394:function(e,t,n){e.exports=n.p+"6265fecef5b49ac9f532.css"}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return o[e](n,n.exports,i),n.exports}i.m=o,i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,{a:t}),t},i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e}(),i.b=document.baseURI||self.location.href,function(){let e="",t="https://plsdevapp.azurewebsites.net",n="https://linkwordplugin-aphgcwcgbfdqeccs.eastus-01.azurewebsites.net",o="",a="",i=[],r=!0,s=[],l="",c=!1,d="",m=[],p=[],u=!1,y={},g=!1,f=!1,h="0",b=0,v=[];async function E(){const t=sessionStorage.getItem("token");console.log(t),t?(e=t,window.location.hash="#/dashboard"):w()}function w(){document.getElementById("app-body").innerHTML='\n    <div class="container mt-5">\n      <form id="login-form" class="p-4 border rounded">\n        <div class="mb-3">\n          <label for="organization" class="form-label fw-bold">Organization</label>\n          <input type="text" class="form-control" id="organization" required>\n        </div>\n        <div class="mb-3">\n          <label for="username" class="form-label fw-bold">Username</label>\n          <input type="text" class="form-control" id="username" required>\n        </div>\n        <div class="mb-3">\n          <label for="password" class="form-label fw-bold">Password</label>\n          <input type="password" class="form-control" id="password" required>\n        </div>\n        <div class="d-grid">\n          <button type="submit" class="btn btn-primary bg-primary-clr">Login</button>\n        </div>\n      <div id="login-error" class="mt-3 text-danger" style="display: none;"></div>\n\n      </form>\n    </div>\n  ',document.getElementById("login-form").addEventListener("submit",I)}async function I(n){n.preventDefault();const o=document.getElementById("organization").value,i=document.getElementById("username").value,r=document.getElementById("password").value;if(o.toLowerCase().trim()===a.toLocaleLowerCase().trim()){document.getElementById("app-body").innerHTML='\n  <div id="button-container">\n\n          <div class="loader" id="loader"></div>\n          </div\n';try{const n=await fetch(`${t}/api/user/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ClientName:o,Username:i,Password:r})});if(!n.ok)throw x("An error occurred during login. Please try again."),new Error("Network response was not ok.");const a=await n.json();!0===a.Status&&a.Data&&a.Data.ResponseStatus?(e=a.Data.Token,sessionStorage.setItem("token",e),sessionStorage.setItem("userId",a.Data.ID),window.location.hash="#/dashboard"):x("An error occurred during login. Please try again.")}catch(e){x("An error occurred during login. Please try again."),console.error("Error during login:",e)}}else x("The organization specified is not associated with this document")}function x(e){w();const t=document.getElementById("login-error");t.style.display="block",t.textContent=e}async function k(a){try{const r=await fetch(`${t}/api/report/id/${o}`,{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!r.ok)throw new Error("Network response was not ok.");const l=await r.json();document.getElementById("app-body").innerHTML="",document.getElementById("logo-header").innerHTML=`\n        <img  id="main-logo" src="${n}/assets/logo.png" alt="" class="logo"> <i class="fa fa-sign-out me-5 c-pointer" aria-hidden="true" id="logout"><span class="tooltiptext">Logout</span></i>\n`,document.getElementById("header").innerHTML='\n\n    <div class="d-flex justify-content-around">\n        <button class="btn btn-dark" id="mention">Insert</button>\n        <button class="btn btn-dark" id="aitag">Refine</button>\n\n        \x3c!-- Dropdown for Formatting --\x3e\n        <div class="dropdown">\n            <button class="btn btn-dark dropdown-toggle" type="button" id="formatDropdown" data-bs-toggle="dropdown" aria-expanded="false">\n                Actions\n            </button>\n            <ul class="dropdown-menu" aria-labelledby="formatDropdown" style="z-index: 100000;">\n                <li><button class="dropdown-item" id="selectFormat">Define Formatting</button></li>\n                <li><button class="dropdown-item" id="glossary" disabled>Glossary</button></li>\n                <li><button class="dropdown-item" id="removeFormatting" disabled>Remove Formatted Text</button></li>\n            </ul>\n        </div>\n    </div>\n\n',document.getElementById("mention").addEventListener("click",U),document.getElementById("glossary").addEventListener("click",j),document.getElementById("aitag").addEventListener("click",M),document.getElementById("selectFormat").addEventListener("click",L),document.getElementById("removeFormatting").addEventListener("click",A),document.getElementById("logout").addEventListener("click",R),p=l.Data,h=p.ClientID;const c=l.Data.Group.find((e=>"AIGroup"===e.DisplayName));d=c?c.Name:"",i=c?c.GroupKey:[],s=l.Data.GroupKeyAll.filter((e=>"TABLE"===e.ComponentKeyDataType||"TEXT"===e.ComponentKeyDataType)),async function(){try{const n=await fetch(`${t}/api/client/all/${b}`,{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!n.ok)throw new Error("Network response was not ok.");const o=await n.json();v=o.Data}catch(e){}}(),"AIpanel"===a&&M()}catch(e){console.error("Error fetching glossary data:",e)}}async function L(){if(!u){c&&await q();const e='\n      <div class="container mt-3">\n        <div class="card">\n          <div class="card-header">\n               \x3c!-- Buttons for Capture and Empty Format --\x3e\n            <div class="d-flex justify-content-end">\n              <button id="capture-format-btn" class="btn btn-primary bg-primary-clr"><i class="fa fa-border-style me-1"></i>  Capture Format</button>\n            </div>\n            \x3c!-- <h5 class="card-title">Formatting Options</h5> --\x3e\n          </div>\n          <div class="card-body">\n           <div>\n                <input type="checkbox" id="empty-format-checkbox" class="form-check-input mb-2">\n                <label for="empty-format-checkbox" class="form-check-label empty-format-checkbox-label">Skip ignoring and removing format-based text</label>\n              </div>\n            \x3c!-- Section to display captured formatting --\x3e\n            <div id="format-details">\n              <h5 class="my-3">Selected Formatting:</h5>\n              <ul id="format-list" class="list-unstyled"></ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    ';document.getElementById("app-body").innerHTML=e,0===Object.keys(y).length&&(document.getElementById("format-details").style.display="none"),document.getElementById("glossary").disabled=!0,g?T():null===y.Bold||"Mixed"===y.Underline||null===y.Size||null===y["Font Name"]||""===y["Background Color"]||""===y["Text Color"]?(document.getElementById("format-list").innerHTML="<p>Multiple style values found. Try again</p>",document.getElementById("removeFormatting").disabled=!0):(document.getElementById("removeFormatting").disabled=!1,B()),document.getElementById("capture-format-btn").addEventListener("click",D);const t=document.getElementById("empty-format-checkbox");f&&(t.checked=!0,T()),t.addEventListener("change",(()=>{t.checked?(f=!0,T()):(document.getElementById("capture-format-btn").disabled=!1,f=!1,g=!1,document.getElementById("glossary").disabled=!0)}))}}function B(){g=!1;const e=document.getElementById("format-list");e.innerHTML="";for(const[t,n]of Object.entries(y))e.innerHTML+="Text Color"!==t&&"Background Color"!==t||!n?`<li><strong>${t}:</strong> ${n}</li>`:`\n        <li><strong>${t}:</strong>${n}\n          <span style="display:inline-block;width:15px;height:15px;background-color:${n};border:1px solid black;"></span>\n        </li>\n      `}function T(){y={},document.getElementById("format-details").style.display="none",g=!0,document.getElementById("glossary").disabled=!1,document.getElementById("capture-format-btn").disabled=!0,document.getElementById("removeFormatting").disabled=!0,console.log("Captured formatting cleared.")}async function D(){try{await Word.run((async e=>{const t=e.document.getSelection().font;t.load(["bold","italic","underline","size","highlightColor","name","color"]),await e.sync(),y={Bold:t.bold,Italic:t.italic,Underline:t.underline,Size:t.size,"Background Color":t.highlightColor,"Font Name":t.name,"Text Color":t.color},document.getElementById("format-details").style.display="block",null===y.Bold||"Mixed"===y.Underline||null===y.Size||null===y["Font Name"]||""===y["Background Color"]||""===y["Text Color"]?(document.getElementById("format-list").innerHTML="<p>Multiple style values found. Try again</p>",document.getElementById("removeFormatting").disabled=!0):(document.getElementById("removeFormatting").disabled=!1,B())}))}catch(e){console.error("Error capturing formatting:",e)}}async function A(){if(!u){c&&await q();const e='\n      <div class="container mt-3">\n        <div class="card">\n          <div class="card-header">\n            <h5 class="card-title">Are you sure you want to remove formatted text ?</h5>\n          </div>\n          <div class="card-body">\n          <div id="format-details">\n              <h5>Selected Formatting:</h5>\n              <ul id="format-list" class="list-unstyled mb-3"></ul>\n              <small class="text-secondary font-italic" id="warning-rem-fmt"></small>\n             \n            </div>\n               \x3c!-- Buttons for Capture and Empty Format --\x3e\n            <div class="d-flex justify-content-end mt-2">\n              <button id="change-ft-btn" class="btn btn-danger bg-danger-clr px-3 me-2"><i class="fa fa-reply me-2"></i><strong>Cancel</strong></button>\n              <button id="clear-ft-btn" class="btn btn-success bg-success-clr px-3"><i class="fa fa-check-circle me-2"></i><strong>Yes</strong></button>\n\n            </div>\n\n            \n          </div>\n        </div>\n      </div>\n    ';document.getElementById("app-body").innerHTML=e,B(),null===y["Background Color"]&&"#000000"===y["Text Color"]&&(document.getElementById("warning-rem-fmt").innerHTML="Warning : The captured formatting is broad. This might result in unintended text removal throughout the document. Proceed?"),document.getElementById("clear-ft-btn").addEventListener("click",$),document.getElementById("change-ft-btn").addEventListener("click",L)}}async function $(){try{await Word.run((async e=>{document.getElementById("clear-ft-btn").innerHTML='<i class="fa fa-spinner fa-spin text-white me-2"></i><strong>Yes</strong>',document.getElementById("clear-ft-btn").disabled=!0,document.getElementById("change-ft-btn").disabled=!0;const t=e.document.body.paragraphs;t.load("items"),await e.sync();for(const n of t.items)if(""!==n.text.trim()){const t=n.split([" "]);t.load("items, font"),await e.sync();for(const o of t.items){const t=o.font;t.load(["bold","italic","underline","size","highlightColor","name","color"]),await e.sync(),t.highlightColor===y["Background Color"]&&t.color===y["Text Color"]&&t.bold===y.Bold&&t.italic===y.Italic&&t.size===y.Size&&t.underline===y.Underline&&t.name===y["Font Name"]&&(t.highlightColor="#FFFFFF",t.color="#000000",t.bold=!1,t.italic=!1,t.underline="None",n.insertText(" ",Word.InsertLocation.replace))}}await e.sync(),y={},document.getElementById("format-details").style.display="none",g=!0,f=!0,document.getElementById("glossary").disabled=!1,L()}))}catch(e){console.error("Error removing formatted text:",e)}}async function C(n,o){if(n.FilteredReportHeadAIHistoryList&&0!==n.FilteredReportHeadAIHistoryList.length||await async function(n){try{const o=await fetch(`${t}/api/report/ai-history/${n.ID}`,{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!o.ok)throw new Error("Network response was not ok.");const a=await o.json();return n.ReportHeadAIHistoryList=a.Data||[],n.FilteredReportHeadAIHistoryList=[],n.ReportHeadAIHistoryList.forEach(((e,t)=>{e.Response=J(e.Response),n.FilteredReportHeadAIHistoryList.unshift(e)})),n.FilteredReportHeadAIHistoryList}catch(e){return console.error("Error fetching AI history:",e),[]}}(n),n.FilteredReportHeadAIHistoryList.length>0){const e=n.FilteredReportHeadAIHistoryList.map(((e,t)=>`<div class="row chatbox">\n        <div class="col-md-12 mt-2 p-2">\n          <span class="ms-3">\n            <i class="fa fa-copy text-secondary c-pointer" title="Copy Response" id="copyPrompt-${o}-${t}"></i>\n          </span>\n          <span class="float-end w-75 me-3">\n            <div class="form-control h-34 d-flex align-items-center dynamic-height user">\n              ${e.Prompt}\n            </div>\n          </span>\n        </div>\n        <div class="col-md-12 mt-2 p-2 d-flex align-items-center">\n          <span class="radio-select">\n            <input class="form-check-input c-pointer" type="radio" name="flexRadioDefault-${o}"\n              id="flexRadioDefault1-${o}-${t}" ${1===e.Selected?"checked":""}>\n          </span>\n          <span class="ms-2 w-75">\n            <div class="form-control h-34 d-flex align-items-center dynamic-height ai-reply ${1===e.Selected?"ai-selected-reply":"bg-light"}" id='selected-response-${o}${t}'>\n              ${e.Response}\n            </div>\n          </span>\n          <span class="ms-2">\n            <i class="fa fa-copy text-secondary c-pointer" title="Copy Response" id="copyResponse-${o}-${t}"></i>\n          </span>\n        </div>\n\n\n      </div>`)).join("");return setTimeout((()=>{n.FilteredReportHeadAIHistoryList.forEach(((e,t)=>{document.getElementById(`copyPrompt-${o}-${t}`)?.addEventListener("click",(()=>F(e.Prompt))),document.getElementById(`copyResponse-${o}-${t}`)?.addEventListener("click",(()=>F(e.Response))),document.getElementById(`flexRadioDefault1-${o}-${t}`)?.addEventListener("change",(()=>O(n,o,t)))}))}),0),e}return"<div>No AI history available.</div>"}function H(e,t,n,o,a){return`\n    <h2 class="accordion-header" id="${e}">\n      <button \n        class="accordion-button collapsed" \n        type="button" \n        data-bs-toggle="collapse" \n        data-bs-target="#${t}" \n        aria-expanded="false" \n        aria-controls="${t}">\n        <span class="${n.IsApplied?"text-secondary":""}" id="tagname-${a}">${n.DisplayName}</span>\n      </button>\n    </h2>\n    <div id="${t}" class="accordion-collapse collapse" aria-labelledby="${e}">\n      <div class="accordion-body chatbox" id="selected-response-parent-${a}">\n        ${o}\n      </div>\n\n      <div class="form-check form-switch mb-0 chatbox">\n              <div class="col-md-12 px-3">\n\n        <label class="form-check-label pb-3" for="doNotApply-${a}"><span class="fs-12">Do not apply<span></label>\n        <input \n          class="form-check-input" \n          type="checkbox" \n          id="doNotApply-${a}" \n          ${n.IsApplied?"checked":""}  \n        >\n        </div>\n      </div>\n  \n      <div class="col-md-12 d-flex align-items-center justify-content-end chatbox p-3">\n        <textarea \n          class="form-control" \n          rows="3" \n          id="chatbox-${a}" \n          placeholder="Type here">\n        </textarea>\n        <div class="d-flex align-self-end">\n          <button \n            type="submit" \n            class="btn btn-primary bg-primary-clr ms-2 text-white" \n            id="sendPrompt-${a}">\n            <i class="fa fa-paper-plane text-white"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  `}async function S(n,o,a){a.IsApplied=n.target.checked;const i=n.target.checked,r=document.getElementById(`tagname-${o}`),l=document.getElementById(`doNotApply-${o}`);try{l.disabled=!0;const n=await fetch(`${t}/api/report/head/groupkey`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(a)});if(!n.ok)throw l.disabled=!1,new Error("Network response was not ok.");const o=await n.json();o.Data&&!0===o.Status&&(l.disabled=!1)}catch(e){l.disabled=!1,console.error("Error updating do not apply:",e)}if(r){const e=s.find((e=>a.DisplayName===e.DisplayName));i?(e&&(e.IsApplied=!0),r.classList.add("text-secondary")):(e&&(e.IsApplied=!1),r.classList.remove("text-secondary"))}}async function N(n,o,a){if(""===o||u)console.error("No empty prompt allowed");else{u=!0;const i=document.getElementById(`sendPrompt-${a}`);i.innerHTML='<i class="fa fa-spinner fa-spin text-white"></i>';const r={ReportHeadID:n.FilteredReportHeadAIHistoryList[0].ReportHeadID,DocumentID:p.NCTID,DocumentType:p.DocumentType,TextSetting:p.TextSetting,DocumentTemplate:p.ReportTemplate,ReportHeadGroupKeyID:n.FilteredReportHeadAIHistoryList[0].ReportHeadGroupKeyID,ThreadID:n.ThreadID,AssistantID:p.AssistantID,Container:p.Container,GroupName:d,Prompt:o,PromptType:1,Response:"",VectorID:p.VectorID,Selected:0,ID:0};try{const o=await fetch(`${t}/api/report/ai-history/add`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(r)});if(!o.ok)throw new Error("Network response was not ok.");const s=await o.json();if(s.Data&&"false"!==s.Data){n.ReportHeadAIHistoryList=JSON.parse(JSON.stringify(s.Data)),n.FilteredReportHeadAIHistoryList=[],n.ReportHeadAIHistoryList.forEach((e=>{e.Response=J(e.Response),n.FilteredReportHeadAIHistoryList.unshift(e)}));const e=document.getElementById(`selected-response-parent-${a}`);if(e){const t=await C(n,a);e.innerHTML=t}n.FilteredReportHeadAIHistoryList.forEach(((e,t)=>{document.getElementById(`copyPrompt-${a}-${t}`)?.addEventListener("click",(()=>F(e.Prompt))),document.getElementById(`copyResponse-${a}-${t}`)?.addEventListener("click",(()=>F(e.Response))),document.getElementById(`flexRadioDefault1-${a}-${t}`)?.addEventListener("change",(()=>O(n,a,t)))})),i.innerHTML='<i class="fa fa-paper-plane text-white"></i>',document.getElementById(`chatbox-${a}`).value="",u=!1}else i.innerHTML='<i class="fa fa-paper-plane text-white"></i>',u=!1}catch(e){i.innerHTML='<i class="fa fa-paper-plane text-white"></i>',u=!1,console.error("Error sending AI prompt:",e)}}}function F(e){const t=document.createElement("textarea");t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}async function R(){c&&await q(),sessionStorage.clear(),window.location.hash="#/new",r=!0,document.getElementById("logo-header").innerHTML="",document.getElementById("header").innerHTML="",E()}async function M(){c&&await q(),document.getElementById("app-body").innerHTML='\n  <div class="d-flex justify-content-between">\n      <button class="btn btn-primary btn-sm bg-primary-clr c-pointer text-white ms-2 mb-2" id="addgenaitag">\n        <i class="fa fa-plus text-light"></i>\n        Add\n    </button>\n\n     <button class="btn btn-primary btn-sm bg-primary-clr c-pointer text-white me-2 mb-2" id="applyAITag">\n        <i class="fa fa-robot text-light"></i>\n        Apply\n    </button>\n    </div>\n\n    <div class="card-container"  id="card-container">\n    </div>\n  ';const e=document.getElementById("card-container");document.getElementById("applyAITag").addEventListener("click",P),document.getElementById("addgenaitag").addEventListener("click",V);for(let t=0;t<i.length;t++){const n=i[t],o=document.createElement("div");o.classList.add("accordion-item"),o.id=`accordion-item-${t}`;const a=`flush-headingOne-${t}`,r=`flush-collapseOne-${t}`,s=await C(n,t);o.innerHTML=H(a,r,n,s,t),e.appendChild(o),document.getElementById(`doNotApply-${t}`)?.addEventListener("change",(()=>S(event,t,n))),document.getElementById(`sendPrompt-${t}`)?.addEventListener("click",(()=>{const e=document.getElementById(`chatbox-${t}`).value;N(n,e,t)}))}document.querySelectorAll(".accordion-button").forEach((e=>{e.addEventListener("click",(function(){const e=this.nextElementSibling;e&&e.classList&&e.classList.toggle("show")}))})),document.querySelectorAll(".fa-copy").forEach((e=>{e.addEventListener("click",(function(){this.closest(".p-2").querySelector(".form-control").textContent}))}))}async function P(){return Word.run((async e=>{try{const t=e.document.body;e.load(t,"text"),await e.sync();for(let n=0;n<i.length;n++){const o=i[n];o.EditorValue=J(o.EditorValue);const a=t.search(`#${o.DisplayName}#`,{matchCase:!1,matchWholeWord:!1});e.load(a,"items"),await e.sync(),console.log(`Found ${a.items.length} instances of #${o.DisplayName}#`),a.items.forEach((e=>{""===o.EditorValue||o.IsApplied||e.insertText(o.EditorValue,Word.InsertLocation.replace)})),await e.sync()}await e.sync()}catch(e){console.error("Error during tag application:",e)}}))}async function O(n,o,a){if(!u){u=!0,document.getElementById(`sendPrompt-${o}`).innerHTML='<i class="fa fa-spinner fa-spin text-white"></i>';const i=n.FilteredReportHeadAIHistoryList[a];let r=JSON.parse(JSON.stringify(i));r.Container=p.Container,r.Selected=1;const l=s.find((e=>e.DisplayName===n.DisplayName));l&&(l.EditorValue=r.Response);try{const s=await fetch(`${t}/api/report/ai-history/update`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(r)});if(!s.ok)throw new Error("Network response was not ok.");const l=await s.json();if(l.Data){n.ReportHeadAIHistoryList=JSON.parse(JSON.stringify(l.Data)),n.FilteredReportHeadAIHistoryList=[],n.ReportHeadAIHistoryList.forEach((e=>{e.Response=J(e.Response),n.FilteredReportHeadAIHistoryList.unshift(e)}));document.getElementById(`selected-response-parent-${o}`).querySelectorAll(".ai-selected-reply").forEach((e=>{e.classList.remove("ai-selected-reply"),e.classList.add("bg-light")}));const e=document.getElementById(`selected-response-${o}${a}`);e&&(e.classList.remove("bg-light"),e.classList.add("ai-selected-reply")),n.UserValue=i.Response,n.EditorValue=i.Response,n.text=i.Response}}catch(e){console.error("Error updating AI data:",e)}finally{document.getElementById(`sendPrompt-${o}`).innerHTML='<i class="fa fa-paper-plane text-white"></i>',u=!1}}}async function j(){u||(document.getElementById("app-body").innerHTML='\n  <div id="button-container">\n\n          <div class="loader" id="loader"></div>\n\n        <div id="highlighted-text"></div>',z())}function z(){document.getElementById("app-body").innerHTML='\n        <div id="button-container">\n          <button class="btn btn-secondary me-2 mark-glossary btn-sm" id="applyglossary">Apply Glossary</button>\n        </div>\n  ',document.getElementById("applyglossary").addEventListener("click",G)}async function G(){document.getElementById("app-body").innerHTML='\n  <div id="button-container">\n\n          <div class="loader" id="loader"></div>\n\n        <div id="highlighted-text"></div>';try{await Word.run((async n=>{const o=n.document.body;o.load("text"),await n.sync();const a={Content:o.text.replace(/[\n\r]/g," ")};try{const n=await fetch(`${t}/api/glossary-template/client-id/${p?.ClientID}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(a)});if(!n.ok)throw new Error("Network response was not ok.");const o=await n.json();m=o.Data,o.Data.length>0?(l=o.Data[0].GlossaryTemplate,z()):document.getElementById("app-body").innerHTML='\n       <p class="text-center">Data not available<p/>\n  '}catch(e){console.error("Error fetching glossary data:",e)}const i=m.map((e=>{const t=o.search(e.ClinicalTerm,{matchCase:!0,matchWholeWord:!0});return t.load("items"),t}));await n.sync();for(const e of i)for(const t of e.items){const e=t.font;e.load(["bold","italic","underline","size","highlightColor","name","color"]),await n.sync(),e.highlightColor===y["Background Color"]&&e.color===y["Text Color"]&&e.bold===y.Bold&&e.italic===y.Italic&&e.size===y.Size&&e.underline===y.Underline&&e.name===y["Font Name"]||(e.highlightColor="yellow")}c=!0,document.getElementById("app-body").innerHTML='\n      <div id="button-container">\n        <button class="btn btn-secondary me-2 clear-glossary btn-sm" id="clearGlossary">Clear Glossary</button>\n      </div>\n\n      <div id="highlighted-text"></div>\n      <div class="d-flex justify-content-center box-loader">\n       <div class="loader" id="loader"></div></div>\n      \n',document.getElementById("loader").style.display="none",await n.sync(),document.getElementById("clearGlossary").addEventListener("click",q),Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged,W)})),console.log("Glossary applied successfully")}catch(e){console.error("Error applying glossary:",e),console.log("Error applying glossary. Please try again.")}}async function W(){await async function(){try{await Word.run((async e=>{const t=e.document.getSelection();if(t.load("text, font.highlightColor"),await e.sync(),t.text){const n=document.getElementById("loader");n&&(n.style.display="block");const o=m.map((e=>{const n=t.search(e.ClinicalTerm,{matchCase:!1,matchWholeWord:!0});return n.load("items"),n}));await e.sync();const a=[];for(const t of o)for(const n of t.items){const t=n.font;t.load(["bold","italic","underline","size","highlightColor","name","color"]),await e.sync(),t.highlightColor===y["Background Color"]&&t.color===y["Text Color"]&&t.bold===y.Bold&&t.italic===y.Italic&&t.size===y.Size&&t.underline===y.Underline&&t.name===y["Font Name"]||a.push(n.text)}!function(e){const t=document.getElementById("highlighted-text");if(t){t.innerHTML="";const n=document.getElementById("loader");n.style.display="block";const o={};e.forEach((e=>{m.forEach((t=>{t.ClinicalTerm===e&&(o[t.ClinicalTerm]||(o[t.ClinicalTerm]=[]),o[t.ClinicalTerm].includes(t.LayTerm)||o[t.ClinicalTerm].push(t.LayTerm))}))})),Object.keys(o).forEach((e=>{const n=document.createElement("div");n.className="box";const a=document.createElement("h3");a.textContent=`${e} (${l})`,n.appendChild(a),o[e].forEach((t=>{const o=document.createElement("div");o.className="sub-box",o.textContent=t,o.addEventListener("click",(async()=>{await async function(e,t){const n=document.getElementById("loader");n.style.display="block";try{await Word.run((async o=>{const a=o.document.getSelection();if(a.load("text"),await o.sync(),a.text.includes(e)){const i=a.search(e,{matchCase:!1,matchWholeWord:!0});i.load("items"),await o.sync(),i.items.forEach((e=>{e.insertText(t,"replace"),e.font.highlightColor="white"})),await o.sync(),n.style.display="none",console.log(`Replaced '${e}' with '${t}' and removed highlight in the document.`)}else n.style.display="none",console.log(`Selected text does not contain '${e}'.`)}))}catch(e){n.style.display="none",console.error("Error replacing term:",e)}}(e,t),n.remove()})),n.appendChild(o)})),t.appendChild(n)})),n.style.display="none"}}(a),await e.sync()}else console.log("No text is selected.")}))}catch(e){console.error("Error displaying glossary:",e)}}()}async function q(){try{await Word.run((async e=>{document.getElementById("app-body").innerHTML='\n      <div id="button-container">\n    \n              <div class="loader" id="loader"></div>\n    \n            <div id="highlighted-text"></div>';const t=e.document.body,n=m.map((e=>{const n=t.search(e.ClinicalTerm,{matchCase:!1,matchWholeWord:!0});return n.load("items"),n}));await e.sync();for(const t of n)for(const n of t.items){const t=n.font;t.load(["bold","italic","underline","size","highlightColor","name","color"]),await e.sync(),t.highlightColor===y["Background Color"]&&t.color===y["Text Color"]&&t.bold===y.Bold&&t.italic===y.Italic&&t.size===y.Size&&t.underline===y.Underline&&t.name===y["Font Name"]||(t.highlightColor="#FFFFFF")}document.getElementById("app-body").innerHTML='\n      <div id="button-container">\n        <button class="btn btn-secondary me-2 mark-glossary btn-sm" id="applyglossary">Apply Glossary</button>\n      </div>\n',await e.sync(),c=!1,document.getElementById("applyglossary").addEventListener("click",G)})),console.log("Glossary cleared successfully")}catch(e){console.error("Error clearing glossary:",e)}}async function U(){if(!u){c&&await q();const e='\n      <div class="container mt-3">\n        <div class="card">\n          <div class="card-header">\n            <h5 class="card-title">Search Tags</h5>\n          </div>\n          <div class="card-body">\n            <div class="form-group">\n              <input type="text" id="search-box" class="form-control" placeholder="Search Tags..." autocomplete="off" />\n            </div>\n            <ul id="suggestion-list" class="list-group mt-2"></ul>\n          </div>\n        </div>\n      </div>\n    ';document.getElementById("app-body").innerHTML=e;const t=document.getElementById("search-box"),n=document.getElementById("suggestion-list");function o(){const e=t.value.toLowerCase();""!==e?(n.innerHTML="",s.filter((t=>t.DisplayName.toLowerCase().includes(e))).forEach((e=>{const t=document.createElement("li");t.className="list-group-item list-group-item-action",t.textContent=e.DisplayName,t.onclick=()=>{!async function(e,t){Word.run((async n=>{try{const o=n.document.getSelection();if(await n.sync(),!o)throw new Error("Selection is invalid or not found.");if("TABLE"===t){const t=(new DOMParser).parseFromString(e.EditorValue,"text/html").querySelector("table");if(!t)throw o.insertParagraph(`#${e.DisplayName}#`,Word.InsertLocation.before),new Error("No table found in the provided HTML.");const a=Array.from(t.querySelectorAll("tr"));if(0===a.length)throw new Error("The table does not contain any rows.");const i=Math.max(...a.map((e=>Array.from(e.querySelectorAll("td, th")).reduce(((e,t)=>e+parseInt(t.getAttribute("colspan")||"1",10)),0)))),r=o.insertParagraph("",Word.InsertLocation.before);if(await n.sync(),!r)throw new Error("Failed to insert the paragraph.");const s=r.insertTable(a.length,i,Word.InsertLocation.after);if(await n.sync(),!s)throw new Error("Failed to insert the table.");const l=new Array(i).fill(0);a.forEach(((e,t)=>{const n=Array.from(e.querySelectorAll("td, th"));let o=0;n.forEach((e=>{for(;l[o]>0;)l[o]--,o++;const n=Array.from(e.childNodes).map((e=>e.nodeType===Node.TEXT_NODE?e.textContent?.trim()||"":e.nodeType===Node.ELEMENT_NODE?e.innerText.trim():"")).filter((e=>e.length>0)).join(" "),a=parseInt(e.getAttribute("colspan")||"1",10),r=parseInt(e.getAttribute("rowspan")||"1",10);o>=i&&(o=i-1);try{s.getCell(t,o).value=n;for(let e=1;e<a;e++)o+e<i&&(s.getCell(t,o+e).value="");if(r>1)for(let e=0;e<a;e++)o+e<i&&(l[o+e]=r-1);o+=a,o>=i&&(o=i-1)}catch(e){console.error("Error setting cell value:",e)}}))}))}else""===e.EditorValue||e.IsApplied?o.insertParagraph(`#${e.DisplayName}#`,Word.InsertLocation.before):J(e.EditorValue).split(/\r?\n/).forEach((e=>{o.insertParagraph(e,Word.InsertLocation.before)}));await n.sync()}catch(e){console.error("Detailed error:",e)}}))}(e,e.ComponentKeyDataType),n.innerHTML=""},n.appendChild(t)}))):n.innerHTML=""}t.addEventListener("input",o)}}async function V(){if(!u){c&&await q();let n=v.filter((e=>e.ID===h));const o=`\n      <div class="modal-dialog">\n        <div class="modal-content">\n          <div class="modal-body p-3">\n            <form id="genai-form" autocomplete="off" novalidate>\n              \x3c!-- Name Field --\x3e\n              <div class="mb-3">\n                <label for="name" class="form-label"><span class="text-danger">*</span> Name</label>\n                <input type="text" class="form-control" id="name" required>\n                <div class="invalid-feedback">Name is required.</div>\n              </div>\n\n              \x3c!-- Description Field --\x3e\n              <div class="mb-3">\n                <label for="description" class="form-label">Description</label>\n                <textarea class="form-control" id="description" rows="6"></textarea>\n              </div>\n\n              \x3c!-- Prompt Field --\x3e\n              <div class="mb-3">\n                <label for="prompt" class="form-label"><span class="text-danger">*</span> Prompt \n                  <small class="text-secondary">(Note: Use # tag for content suggestions)</small>\n                </label>\n                <textarea class="form-control" id="prompt" rows="6"  required></textarea>\n                <div class="invalid-feedback">Prompt is required.</div>\n                <div id="mention-dropdown" class="dropdown-menu"></div>\n              </div>\n\n              \x3c!-- Save Globally Checkbox --\x3e\n              <div class="form-check mb-3">\n                <input type="checkbox" class="form-check-input" id="saveGlobally">\n                <label class="form-check-label" for="saveGlobally">Save Globally</label>\n              </div>\n\n              \x3c!-- Available to All Sponsors Checkbox --\x3e\n              <div class="form-check mb-3">\n                <input type="checkbox" class="form-check-input" id="isAvailableForAll" disabled>\n                <label class="form-check-label" for="isAvailableForAll">Available to All Sponsors</label>\n              </div>\n\n              \x3c!-- Sponsor Dropdown --\x3e\n              <div class="mb-3">\n                <label for="sponsor" class="form-label"><span class="text-danger">*</span> Sponsor</label>\n                <div class="dropdown w-100">\n                  <button \n                    class="btn btn-white border w-100 text-start d-flex justify-content-between align-items-center dropdown-toggle" \n                    type="button" \n                    id="sponsorDropdown" \n                    data-bs-toggle="dropdown" \n                    aria-expanded="false" \n                    disabled>\n                    <span id="sponsorDropdownLabel">Select Sponsors</span>\n                    <span class="dropdown-toggle-icon"></span>\n                  </button>\n                  <ul class="dropdown-menu w-100 p-2" aria-labelledby="sponsorDropdown" style="box-shadow: 0 4px 8px rgba(0,0,0,0.1);">\n                    <li class="dropdown-item p-2" style="cursor: pointer;">\n                      <div class="form-check">\n                        <input class="form-check-input" type="checkbox" value="selectAll" id="selectAll">\n                        <label class="form-check-label" for="selectAll">Select All</label>\n                      </div>\n                    </li>\n                    ${v.map((e=>{const t=n.some((t=>t.ID===e.ID));return` \n        <li class="dropdown-item p-2" style="cursor: pointer;">\n          <div class="form-check">\n            <input class="form-check-input" type="checkbox" value="${e.ID}" id="sponsor${e.ID}" ${t?"checked disabled":""}>\n            <label class="form-check-label" for="sponsor${e.ID}">${e.Name}</label>\n          </div>\n        </li>\n      `})).join("")}\n                  </ul>\n                </div>\n              </div>\n\n              \x3c!-- Action Buttons --\x3e\n              <div class="text-end mt-3">\n                <button id="cancel-btn-gen-ai" class="btn btn-danger bg-danger-clr px-3 me-2"><i class="fa fa-reply me-2"></i><strong>Cancel</strong></button>\n                <button type="submit" class="btn btn-success bg-success-clr" id="text-gen-save"><i class="fa fa-check-circle me-2"></i><strong>Save</strong></button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>`;document.getElementById("app-body").innerHTML=o;const a=e=>s.filter((t=>t.DisplayName.toLowerCase().includes(e.toLowerCase())));let r=-1;const l=document.getElementById("prompt"),d=document.getElementById("mention-dropdown");function m(){const e=document.querySelectorAll("#mention-dropdown .dropdown-item"),t=(document.getElementById("mention-dropdown"),e.length);if(e.forEach((e=>e.classList.remove("active"))),r>=0&&r<t){const t=e[r];t.classList.add("active"),t.scrollIntoView({behavior:"smooth",block:"nearest"})}}l.addEventListener("input",(e=>{const t=l.selectionStart,n=l.value.slice(0,t),o=n.lastIndexOf("#");if(-1!==o){const e=n.slice(o+1).trim();if(e.length>0){const t=a(e);if(t.length>0){d.innerHTML=t.map((e=>`<li class="dropdown-item" data-editor-value="${e.EditorValue}">${e.DisplayName}</li>`)).join("");const e=l.getBoundingClientRect();d.style.left=`${e.left}px`,d.style.top=e.top-d.offsetHeight-5+"px",d.style.display="block"}else d.style.display="none"}else d.style.display="none"}else d.style.display="none"})),l.addEventListener("keydown",(e=>{const t=document.querySelectorAll("#mention-dropdown .dropdown-item"),n=t.length;if("ArrowDown"===e.key)e.preventDefault(),r<n-1?r++:r=0,m();else if("ArrowUp"===e.key)e.preventDefault(),r>0?r--:r=n-1,m();else if("Enter"===e.key&&-1!==r){const n=t[r];n&&(y(n.getAttribute("data-editor-value")),d.style.display="none",e.preventDefault())}})),d.addEventListener("click",(e=>{if(e.target&&e.target.matches("li")){const t=e.target.getAttribute("data-editor-value");y(t),d.style.display="none"}}));const y=e=>{const t=document.getElementById("prompt"),n=t.value,o=t.selectionStart,a=n.slice(0,o),i=n.slice(o),r=a.lastIndexOf("#"),s=a.slice(0,r);t.value=`${s}${e}${i}`;const l=s.length+e.length;t.setSelectionRange(l,l)};document.addEventListener("click",(e=>{d.contains(e.target)||e.target===l||(d.style.display="none")}));const g=document.getElementById("genai-form"),f=document.getElementById("name"),b=document.getElementById("description"),E=document.getElementById("saveGlobally"),w=document.getElementById("isAvailableForAll"),I=document.getElementById("sponsorDropdown"),x=document.querySelectorAll(".dropdown-item .form-check-input");if(document.getElementById("cancel-btn-gen-ai").addEventListener("click",M),g&&f&&l&&x.length>0){const L=()=>{if(w.checked)I.textContent=v.map((e=>e.Name)).join(", ");else{const e=Array.from(x).filter((e=>e.checked&&"selectAll"!==e.id)).map((e=>e.parentElement.textContent.trim()));I.textContent=e.length?e.join(", "):"Select Sponsors"}};g.addEventListener("submit",(function(n){n.preventDefault(),g.querySelectorAll(".is-invalid").forEach((e=>e.classList.remove("is-invalid")));let o=!0;if(f.value.trim()||(f.classList.add("is-invalid"),o=!1),l.value.trim()||(l.classList.add("is-invalid"),o=!1),o){const n=Array.from(x).filter((e=>e.checked&&"selectAll"!==e.id)).map((e=>v.find((t=>t.ID==e.value)))),o=w.checked,a=E.checked;!async function(n){try{const o=document.getElementById("text-gen-save"),a=document.getElementById("aitag"),i=document.getElementById("mention"),r=document.getElementById("formatDropdown"),s=document.getElementById("cancel-btn-gen-ai");a.disabled=!0,s.disabled=!0,i.disabled=!0,r.disabled=!0,o.innerHTML='<i class="fa fa-spinner fa-spin text-white me-2"></i><strong>Save</strong>';const l=await fetch(`${t}/api/report/group-key/add`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(n)});if(!l.ok)throw new Error("Network response was not ok.");(await l.json()).Data&&k("AIpanel")}catch(e){console.error("Error creating text generation tag:",e)}}({DisplayName:f.value.trim(),Prompt:l.value.trim(),Description:b.value.trim(),GroupKeyClient:n,AllClient:o?1:0,SaveGlobally:a,UserDefined:"1",ComponentKeyDataTypeID:"1",ComponentKeyDataAccessID:"3",AIFlag:1,DocumentTypeID:p.DocumentTypeID,ReportHeadID:p.ID,SourceTypeID:i[0].SourceTypeID,ReportHeadGroupID:i[0].ReportHeadGroupID,ReportHeadSourceID:i[0].ReportHeadSourceID})}}));const B=()=>{x.forEach((e=>{e.disabled||(e.checked=!0,e.disabled=!0)})),L()},T=()=>{x.forEach((e=>{n.some((t=>t.ID===parseInt(e.value)))||(e.disabled=!1)})),L()};E.addEventListener("change",(function(){this.checked?(w.disabled=!1,I.disabled=!1):(T(),w.checked=!1,w.disabled=!0,I.disabled=!0,x.forEach((e=>{e.disabled||(e.checked=!1,e.disabled=!1)})),L())})),w.addEventListener("change",(function(){this.checked?B():T()})),document.querySelectorAll(".dropdown-item").forEach((e=>{e.addEventListener("click",(function(e){e.stopPropagation();const t=this.querySelector(".form-check-input");if(t){if(t.disabled||(t.checked=!t.checked),"selectAll"===t.id){const e=t.checked;x.forEach((t=>{t.disabled||(t.checked=e)}))}L()}}))})),L(),[f,l].forEach((e=>{e.addEventListener("input",(function(){this.classList.contains("is-invalid")&&this.value.trim()&&this.classList.remove("is-invalid")}))}))}else console.error("Required elements are missing or not rendered yet.")}}function J(e){return e?e.replace(/^"|"$/g,"").replace(/\\n/g,"").replace(/\*\*/g,"").replace(/\\r/g,""):""}window.addEventListener("hashchange",(()=>{"#/dashboard"===window.location.hash&&r&&(r=!1,b=Number(sessionStorage.getItem("userId")),k("Init"))})),Office.onReady((e=>{e.host===Office.HostType.Word&&(document.getElementById("app-body").style.display="flex",document.getElementById("editor"),window.location.hash="#/login",async function(){try{await Word.run((async e=>{const t=e.document.properties.customProperties;t.load("items"),await e.sync();const n=t.items.find((e=>"DocumentID"===e.key)),i=t.items.find((e=>"Organization"===e.key));if(!n||!i)return document.getElementById("app-body").innerHTML='\n        <p class="px-3 text-center">Export a document from the LINK AI application to use this functionality.</p>',console.log('Custom property "documentID" not found.'),null;o=n.value,a=i.value,E()}))}catch(e){console.error("Error retrieving custom property:",e)}}())}))}(),e=i(14385),t=i.n(e),n=new URL(i(58394),i.b),t()(n)}();
//# sourceMappingURL=taskpane.js.map