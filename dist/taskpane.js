!function(){"use strict";var e,t,n,o={14385:function(e){e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},58394:function(e,t,n){e.exports=n.p+"0e7eeeefdf3c0f0acab7.css"}},a={};function r(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return o[e](n,n.exports,r),n.exports}r.m=o,r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,{a:t}),t},r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e}(),r.b=document.baseURI||self.location.href,function(){let e="",t="",n=[],o=!0,a=[],r=[];function s(){document.getElementById("app-body").innerHTML='\n    <div class="container mt-5">\n      <form id="login-form" class="p-4 border rounded">\n        <div class="mb-3">\n          <label for="organization" class="form-label fw-bold">Organization</label>\n          <input type="text" class="form-control" id="organization" required>\n        </div>\n        <div class="mb-3">\n          <label for="username" class="form-label fw-bold">Username</label>\n          <input type="text" class="form-control" id="username" required>\n        </div>\n        <div class="mb-3">\n          <label for="password" class="form-label fw-bold">Password</label>\n          <input type="password" class="form-control" id="password" required>\n        </div>\n        <div class="d-grid">\n          <button type="submit" class="btn btn-primary">Login</button>\n        </div>\n      </form>\n    </div>\n  ',document.getElementById("login-form").addEventListener("submit",i)}async function i(t){t.preventDefault();const n=document.getElementById("organization").value,o=document.getElementById("username").value,a=document.getElementById("password").value;document.getElementById("app-body").innerHTML='\n  <div id="button-container">\n\n          <div class="loader" id="loader"></div>\n          </div\n';try{const t=await fetch("https://plsdevapp.azurewebsites.net/api/user/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ClientName:n,Username:o,Password:a})});if(!t.ok)throw s(),new Error("Network response was not ok.");const r=await t.json();!0===r.Status&&r.Data&&r.Data.ResponseStatus?(e=r.Data.Token,sessionStorage.setItem("token",e),window.location.hash="#/dashboard"):s()}catch(e){s(),console.error("Error during login:",e)}}async function c(t,n){if(t.FilteredReportHeadAIHistoryList&&0!==t.FilteredReportHeadAIHistoryList.length||await async function(t){try{const n=await fetch(`https://plsdevapp.azurewebsites.net/api/report/ai-history/${t.ID}`,{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!n.ok)throw new Error("Network response was not ok.");const o=await n.json();return t.FilteredReportHeadAIHistoryList=o.Data||[],t.FilteredReportHeadAIHistoryList}catch(e){return console.error("Error fetching AI history:",e),[]}}(t),t.FilteredReportHeadAIHistoryList.length>0){const e=t.FilteredReportHeadAIHistoryList.map(((e,t)=>`<div class="row chatbox">\n        <div class="col-md-12 mt-2 p-2">\n          <span class="ms-3">\n            <i class="fa fa-copy text-secondary c-pointer" title="Copy Response" id="copyPrompt-${n}-${t}"></i>\n          </span>\n          <span class="float-end w-75 me-3">\n            <div class="form-control h-34 d-flex align-items-center dynamic-height user">\n              ${e.Prompt}\n            </div>\n          </span>\n        </div>\n        <div class="col-md-12 mt-2 p-2 d-flex align-items-center">\n          <span class="radio-select">\n            <input class="form-check-input c-pointer" type="radio" name="flexRadioDefault-${n}"\n              id="flexRadioDefault1-${n}-${t}" ${1===e.Selected?"checked":""}>\n          </span>\n          <span class="ms-2 w-75">\n            <div class="form-control h-34 d-flex align-items-center dynamic-height ai-reply ${1===e.Selected?"ai-selected-reply":"bg-light"}">\n              ${e.Response}\n            </div>\n          </span>\n          <span class="ms-2">\n            <i class="fa fa-copy text-secondary c-pointer" title="Copy Response" id="copyResponse-${n}-${t}"></i>\n          </span>\n        </div>\n      </div>`)).join("");return setTimeout((()=>{t.FilteredReportHeadAIHistoryList.forEach(((e,t)=>{document.getElementById(`copyPrompt-${n}-${t}`)?.addEventListener("click",(()=>l(e.Prompt))),document.getElementById(`copyResponse-${n}-${t}`)?.addEventListener("click",(()=>l(e.Response))),document.getElementById(`flexRadioDefault1-${n}-${t}`)?.addEventListener("change",(()=>{return e=n,o=t,void console.log(`Radio button changed for tagIndex ${e}, chatIndex ${o}`);var e,o}))}))}),0),e}return"<div>No AI history available.</div>"}function l(e){const t=document.createElement("textarea");t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}async function d(){const e=document.getElementById("app-body");e.innerHTML="";for(let t=0;t<n.length;t++){const o=n[t],a=document.createElement("div");a.classList.add("accordion-item");const r=`flush-headingOne-${t}`,s=`flush-collapseOne-${t}`,i=await c(o,t);a.innerHTML=`\n      <h2 class="accordion-header" id="${r}">\n        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"\n          data-bs-target="#${s}" aria-expanded="false" aria-controls="${s}">\n          ${o.DisplayName}\n        </button>\n      </h2>\n      <div id="${s}" class="accordion-collapse collapse" aria-labelledby="${r}">\n        <div class="accordion-body">\n          ${i}\n        \n        </div>\n      </div>\n    `,e.appendChild(a)}document.querySelectorAll(".accordion-button").forEach((e=>{e.addEventListener("click",(function(){const e=this.nextElementSibling;e&&e.classList&&e.classList.toggle("show")}))})),document.querySelectorAll(".fa-copy").forEach((e=>{e.addEventListener("click",(function(){this.closest(".p-2").querySelector(".form-control").textContent}))}))}async function u(){if(0===r.length){document.getElementById("app-body").innerHTML='\n  <div id="button-container">\n\n          <div class="loader" id="loader"></div>\n\n        <div id="highlighted-text"></div>';try{const t=await fetch("https://plsdevapp.azurewebsites.net/api/glossary-template/id/3",{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!t.ok)throw new Error("Network response was not ok.");const n=await t.json();r=n.Data.GlossaryTemplateData,m()}catch(e){console.error("Error fetching glossary data:",e)}}else m()}function m(){document.getElementById("app-body").innerHTML='\n        <div id="button-container">\n          <button class="btn btn-secondary me-2 mark-glossary btn-sm" id="applyglossary">Apply Glossary</button>\n        </div>\n  ',document.getElementById("applyglossary").addEventListener("click",p)}async function p(){document.getElementById("app-body").innerHTML='\n  <div id="button-container">\n\n          <div class="loader" id="loader"></div>\n\n        <div id="highlighted-text"></div>';try{await Word.run((async e=>{const t=e.document.body,n=r.map((e=>{const n=t.search(e.ClinicalTerm,{matchCase:!0,matchWholeWord:!0});return n.load("items"),n}));await e.sync(),n.forEach((e=>{e.items.forEach((e=>{e.font.highlightColor="yellow"}))})),document.getElementById("app-body").innerHTML='\n      <div id="button-container">\n        <button class="btn btn-secondary me-2 clear-glossary btn-sm" id="clearGlossary">Clear Glossary</button>\n      </div>\n\n      <div id="highlighted-text"></div>\n      \n',await e.sync(),document.getElementById("clearGlossary").addEventListener("click",h),Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged,y)})),console.log("Glossary applied successfully")}catch(e){console.error("Error applying glossary:",e),console.log("Error applying glossary. Please try again.")}}async function y(){await async function(){try{await Word.run((async e=>{const t=e.document.getSelection();if(t.load("text, font.highlightColor"),await e.sync(),t.text){const n=r.map((e=>{const n=t.search(e.ClinicalTerm,{matchCase:!1,matchWholeWord:!0});return n.load("items"),n}));await e.sync();const o=[];n.forEach((e=>{e.items.forEach((e=>{o.push(e.text)}))})),function(e){const t=document.getElementById("highlighted-text");if(t){t.innerHTML="";const n={};e.forEach((e=>{r.forEach((t=>{t.ClinicalTerm===e&&(n[t.ClinicalTerm]||(n[t.ClinicalTerm]=[]),n[t.ClinicalTerm].includes(t.LayTerm)||n[t.ClinicalTerm].push(t.LayTerm))}))})),Object.keys(n).forEach((e=>{const o=document.createElement("div");o.className="box";const a=document.createElement("h3");a.textContent=e,o.appendChild(a),n[e].forEach((t=>{const n=document.createElement("div");n.className="sub-box",n.textContent=t,n.addEventListener("click",(async()=>{await async function(e,t){try{await Word.run((async n=>{const o=n.document.getSelection();if(o.load("text"),await n.sync(),o.text.includes(e)){const a=o.search(e,{matchCase:!1,matchWholeWord:!0});a.load("items"),await n.sync(),a.items.forEach((e=>{e.insertText(t,"replace"),e.font.highlightColor="white"})),await n.sync(),console.log(`Replaced '${e}' with '${t}' and removed highlight in the document.`)}else console.log(`Selected text does not contain '${e}'.`)}))}catch(e){console.error("Error replacing term:",e)}}(e,t),o.remove()})),o.appendChild(n)})),t.appendChild(o)}))}}(o),await e.sync()}else console.log("No text is selected.")}))}catch(e){console.error("Error displaying glossary:",e)}}()}async function h(){try{await Word.run((async e=>{document.getElementById("app-body").innerHTML='\n      <div id="button-container">\n    \n              <div class="loader" id="loader"></div>\n    \n            <div id="highlighted-text"></div>';const t=e.document.body,n=r.map((e=>{const n=t.search(e.ClinicalTerm,{matchCase:!1,matchWholeWord:!0});return n.load("items"),n}));await e.sync(),n.forEach((e=>{e.items.forEach((e=>{e.font.highlightColor="white"}))})),document.getElementById("app-body").innerHTML='\n      <div id="button-container">\n        <button class="btn btn-secondary me-2 mark-glossary btn-sm" id="applyglossary">Apply Glossary</button>\n      </div>\n',await e.sync(),document.getElementById("applyglossary").addEventListener("click",p)})),console.log("Glossary cleared successfully")}catch(e){console.error("Error clearing glossary:",e)}}function g(){document.getElementById("app-body").innerHTML='\n    <div class="container mt-3">\n      <div class="card">\n        <div class="card-header">\n          <h5 class="card-title">Search Suggestions</h5>\n        </div>\n        <div class="card-body">\n          <div class="form-group">\n            <input type="text" id="search-box" class="form-control" placeholder="Search           <h5 class="card-title">Search Suggestions</h5>\n..." />\n          </div>\n          <ul id="suggestion-list" class="list-group mt-2"></ul>\n        </div>\n      </div>\n    </div>\n';const e=document.getElementById("search-box"),t=document.getElementById("suggestion-list");e.addEventListener("input",(function(){const n=e.value.toLowerCase();t.innerHTML="",a.filter((e=>e.DisplayName.toLowerCase().includes(n))).forEach((n=>{const o=document.createElement("li");o.className="list-group-item list-group-item-action",o.textContent=n.DisplayName,o.onclick=()=>{e.value="",t.innerHTML="",async function(e,t){Word.run((async n=>{try{const o=n.document.getSelection();if("TABLE"===t){const t=o.insertParagraph("",Word.InsertLocation.before),n=(new DOMParser).parseFromString(e,"text/html").querySelector("table");if(!n)throw new Error("No table found in the provided HTML.");const a=Array.from(n.querySelectorAll("tr"));if(0===a.length)throw new Error("The table does not contain any rows.");const r=Math.max(...a.map((e=>e.querySelectorAll("td, th").length))),s=t.insertTable(a.length,r,Word.InsertLocation.after);a.forEach(((e,t)=>{Array.from(e.querySelectorAll("td, th")).forEach(((e,n)=>{const o=e.textContent?.trim()||"";console.log(`Row ${t}, Column ${n}: ${o}`),s.getCell(t,n).value=o}))}))}else o.insertParagraph(e,Word.InsertLocation.before);await n.sync()}catch(e){console.error("Error inserting table:",e)}}))}(n.EditorValue,n.ComponentKeyDataType)},t.appendChild(o)}))}))}window.addEventListener("hashchange",(()=>{"#/dashboard"===window.location.hash&&o&&(o=!1,async function(){try{const o=await fetch(`https://plsdevapp.azurewebsites.net/api/report/id/${t}`,{method:"GET",headers:{Authorization:`Bearer ${e}`}});if(!o.ok)throw new Error("Network response was not ok.");const r=await o.json();document.getElementById("app-body").innerHTML="",document.getElementById("header").innerHTML='\n    <button class="btn btn-dark" id="mention">Suggestions</button>\n            <button class="btn btn-dark " id="aitag">AI Text Panel</button>\n\n        <button class="btn btn-dark " id="glossary">Glossary</button>\n\n',document.getElementById("mention").addEventListener("click",g),document.getElementById("glossary").addEventListener("click",u),document.getElementById("aitag").addEventListener("click",d);const s=r.Data.Group.find((e=>"AIGroup"===e.DisplayName));n=s?s.GroupKey:[],a=r.Data.GroupKeyAll.filter((e=>"TABLE"===e.ComponentKeyDataType||"TEXT"===e.ComponentKeyDataType))}catch(e){console.error("Error fetching glossary data:",e)}}())})),Office.onReady((n=>{n.host===Office.HostType.Word&&(document.getElementById("app-body").style.display="flex",document.getElementById("editor"),window.location.hash="#/login",async function(){try{await Word.run((async n=>{const o=n.document.properties.customProperties;o.load("items"),await n.sync();const a=o.items.find((e=>"DocumentID"===e.key));if(!a)return console.log('Custom property "documentID" not found.'),null;t=a.value,async function(){const t=sessionStorage.getItem("token");console.log(t),t?(e=t,window.location.hash="#/dashboard"):s()}()}))}catch(e){console.error("Error retrieving custom property:",e)}}())}))}(),e=r(14385),t=r.n(e),n=new URL(r(58394),r.b),t()(n)}();
//# sourceMappingURL=taskpane.js.map